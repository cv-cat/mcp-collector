[
    {
        "id": "jira",
        "name": "Jira MCP Server",
        "description": "A Model Context Protocol server that provides integration with Jira's REST API, allowing AI assistants to manage Jira issues programmatically.",
        "tags": [
            "jira",
            "api",
            "integration"
        ],
        "repo": "https://github.com/1broseidon/mcp-jira-server",
        "command": "node",
        "baseArgs": [
            "/path/to/jira-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "JIRA_EMAIL": {
                    "type": "string",
                    "description": "Your Jira account email with API access",
                    "required": true
                },
                "JIRA_API_TOKEN": {
                    "type": "string",
                    "description": "Your Jira API token, can be generated from Atlassian Account Settings",
                    "required": true
                },
                "JIRA_DOMAIN": {
                    "type": "string",
                    "description": "Your Jira domain",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "JIRA_EMAIL": {
                "type": "env",
                "key": "JIRA_EMAIL"
            },
            "JIRA_API_TOKEN": {
                "type": "env",
                "key": "JIRA_API_TOKEN"
            },
            "JIRA_DOMAIN": {
                "type": "env",
                "key": "JIRA_DOMAIN"
            }
        }
    },
    {
        "id": "markdown2pdf",
        "name": "Markdown2PDF MCP Server",
        "description": "An MCP server for converting Markdown documents to PDF files.",
        "tags": [
            "markdown",
            "pdf",
            "conversion"
        ],
        "repo": "https://github.com/2b3pro/markdown2pdf-mcp",
        "command": "node",
        "baseArgs": [
            "path/to/markdown2pdf-mcp/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "outputDir": {
                    "type": "string",
                    "description": "Path to the output directory.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "outputDir": {
                "type": "env",
                "key": "M2P_OUTPUT_DIR"
            }
        }
    },
    {
        "id": "roam-research",
        "name": "Roam Research MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides comprehensive access to Roam Research's API functionality.",
        "tags": [
            "roam",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/2b3pro/roam-research-mcp",
        "command": "node",
        "baseArgs": [
            "/path/to/roam-research/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ROAM_API_TOKEN": {
                    "type": "string",
                    "description": "Roam Research API token",
                    "required": true
                },
                "ROAM_GRAPH_NAME": {
                    "type": "string",
                    "description": "Name of your Roam graph",
                    "required": true
                },
                "MEMORIES_TAG": {
                    "type": "string",
                    "description": "Tag for memories",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "ROAM_API_TOKEN": {
                "type": "env",
                "key": "ROAM_API_TOKEN"
            },
            "ROAM_GRAPH_NAME": {
                "type": "env",
                "key": "ROAM_GRAPH_NAME"
            },
            "MEMORIES_TAG": {
                "type": "env",
                "key": "MEMORIES_TAG"
            }
        }
    },
    {
        "id": "mcp-chatbot",
        "name": "MCP Chatbot",
        "description": "A simple CLI chatbot that demonstrates the integration of the Model Context Protocol (MCP).",
        "repo": "https://github.com/3choff/mcp-chatbot",
        "tags": [
            "chatbot",
            "MCP",
            "CLI"
        ],
        "command": "python",
        "baseArgs": [
            "main.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "API_KEY": {
                    "type": "string",
                    "description": "Your API key for the LLM service.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "API_KEY": {
                "type": "env",
                "key": "LLM_API_KEY"
            }
        }
    },
    {
        "id": "mcp-notes",
        "name": "MCP Notes",
        "description": "A simple note-taking application built on top of the MCP protocol.",
        "tags": [
            "notes",
            "application",
            "mcp"
        ],
        "repo": "https://github.com/9Ninety/MCPNotes",
        "command": "npx",
        "baseArgs": [
            "-y",
            "-p",
            "mcp-notes",
            "mcp-notes-server",
            "--dynamodb",
            "dynamodb://access_key:secret_key@region/table"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "DynamoDB connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "qb-time-tools",
        "name": "QuickBooks Time MCP Server",
        "description": "A combined MCP server that provides access to all QuickBooks Time API functionality through a single interface.",
        "tags": [
            "quickbooks",
            "time",
            "api"
        ],
        "repo": "https://github.com/aallsbury/qb-time-mcp-server",
        "command": "python",
        "baseArgs": [
            "./qb-time-mcp-server/main.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "QB_TIME_ACCESS_TOKEN": {
                    "type": "string",
                    "description": "QuickBooks Time access token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "QB_TIME_ACCESS_TOKEN": {
                "type": "env",
                "key": "QB_TIME_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "todoist",
        "name": "Todoist",
        "description": "An MCP (Model Context Protocol) server implementation that integrates Claude with Todoist, enabling natural language task management. This server allows Claude to interact with your Todoist tasks using everyday language.",
        "repo": "https://github.com/abhiz123/todoist-mcp-server",
        "tags": [
            "todoist",
            "task management",
            "natural language"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@abhiz123/todoist-mcp-server"
        ],
        "env": {
            "TODOIST_API_TOKEN": "your_api_token_here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "TODOIST_API_TOKEN": {
                    "type": "string",
                    "description": "Todoist API Token",
                    "required": true
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "kagi-server",
        "name": "Kagi Server",
        "description": "MCP server for Kagi API integration",
        "tags": [
            "kagi",
            "api"
        ],
        "repo": "https://github.com/ac3xx/mcp-servers-kagi",
        "command": "node",
        "baseArgs": [
            "/path/to/kagi-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "KAGI_API_KEY": {
                    "type": "string",
                    "description": "Kagi API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "KAGI_API_KEY": {
                "type": "env",
                "key": "KAGI_API_KEY"
            }
        }
    },
    {
        "id": "mcp-git-ingest",
        "name": "MCP Git Ingest",
        "description": "A Model Context Protocol (MCP) server that helps read GitHub repository structure and important files.",
        "tags": [
            "github",
            "mcp",
            "git"
        ],
        "repo": "https://github.com/adhikasp/mcp-git-ingest",
        "command": "uvx",
        "baseArgs": [
            "--from",
            "git+https://github.com/adhikasp/mcp-git-ingest"
        ],
        "configurable": false
    },
    {
        "id": "mcp-twikit",
        "name": "MCP-Twikit",
        "description": "A Model Context Protocol (MCP) server for interacting with Twitter.",
        "tags": [
            "twitter",
            "mcp"
        ],
        "repo": "https://github.com/adhikasp/mcp-twikit",
        "command": "uvx",
        "baseArgs": [
            "--from",
            "git+https://github.com/adhikasp/mcp-twikit",
            "mcp-twikit"
        ],
        "env": {
            "TWITTER_USERNAME": "@example",
            "TWITTER_EMAIL": "me@example.com",
            "TWITTER_PASSWORD": "secret"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "twitterUsername": {
                    "type": "string",
                    "description": "Twitter username for accessing the account",
                    "required": true
                },
                "twitterEmail": {
                    "type": "string",
                    "description": "Email associated with the Twitter account",
                    "required": true
                },
                "twitterPassword": {
                    "type": "string",
                    "description": "Password for the Twitter account",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "twitterUsername": {
                "type": "env",
                "key": "TWITTER_USERNAME"
            },
            "twitterEmail": {
                "type": "env",
                "key": "TWITTER_EMAIL"
            },
            "twitterPassword": {
                "type": "env",
                "key": "TWITTER_PASSWORD"
            }
        }
    },
    {
        "id": "mcp-scholarly",
        "name": "MCP Scholarly",
        "description": "A MCP server to search for accurate academic articles. More scholarly vendors will be added soon.",
        "tags": [
            "academic",
            "search",
            "mcp"
        ],
        "repo": "https://github.com/adityak74/mcp-scholarly",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/adityakarnam/PycharmProjects/mcp-scholarly/mcp-scholarly",
            "run",
            "mcp-scholarly"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "gsc",
        "name": "Google Search Console",
        "description": "A Model Context Protocol (MCP) server providing access to Google Search Console.",
        "tags": [
            "google",
            "search-console"
        ],
        "repo": "https://github.com/ahonn/mcp-server-gsc",
        "command": "npx",
        "baseArgs": [
            "-y",
            "mcp-server-gsc"
        ],
        "env": {
            "GOOGLE_APPLICATION_CREDENTIALS": "/path/to/credentials.json"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "siteUrl": {
                    "type": "string",
                    "description": "Site URL (format: http://www.example.com/ or sc-domain:example.com)",
                    "required": true
                },
                "startDate": {
                    "type": "string",
                    "description": "Start date (YYYY-MM-DD)",
                    "required": true
                },
                "endDate": {
                    "type": "string",
                    "description": "End date (YYYY-MM-DD)",
                    "required": true
                },
                "dimensions": {
                    "type": "string",
                    "description": "Comma-separated list (query,page,country,device,searchAppearance)",
                    "required": false
                },
                "type": {
                    "type": "string",
                    "description": "Search type (web, image, video, news)",
                    "required": false
                },
                "aggregationType": {
                    "type": "string",
                    "description": "Aggregation method (auto, byNewsShowcasePanel, byProperty, byPage)",
                    "required": false
                },
                "rowLimit": {
                    "type": "integer",
                    "description": "Maximum rows to return (default: 1000)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "siteUrl": {
                "type": "single",
                "position": 0
            },
            "startDate": {
                "type": "single",
                "position": 1
            },
            "endDate": {
                "type": "single",
                "position": 2
            },
            "dimensions": {
                "type": "optional",
                "position": 3
            },
            "type": {
                "type": "optional",
                "position": 4
            },
            "aggregationType": {
                "type": "optional",
                "position": 5
            },
            "rowLimit": {
                "type": "optional",
                "position": 6
            }
        }
    },
    {
        "id": "chat-mcp",
        "name": "MCP Chat Desktop App",
        "description": "A Cross-Platform Interface for LLMs",
        "tags": [
            "chat",
            "desktop",
            "MCP",
            "LLMs"
        ],
        "repo": "https://github.com/AI-QL/chat-mcp",
        "command": "npm",
        "baseArgs": [
            "run",
            "start"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key for authentication",
                    "required": true
                },
                "url": {
                    "type": "string",
                    "description": "Base URL for API requests",
                    "required": true
                },
                "path": {
                    "type": "string",
                    "description": "API endpoint path",
                    "required": true
                },
                "model": {
                    "type": "string",
                    "description": "LLM model to use",
                    "required": true
                },
                "max_tokens_value": {
                    "type": "string",
                    "description": "Maximum tokens for responses",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "API_KEY"
            },
            "url": {
                "type": "single",
                "position": 1
            },
            "path": {
                "type": "single",
                "position": 2
            },
            "model": {
                "type": "single",
                "position": 3
            },
            "max_tokens_value": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "mapbox-mcp-server",
        "name": "Mapbox MCP Server",
        "description": "MCP Server for the Mapbox API.",
        "tags": [
            "mapbox",
            "api"
        ],
        "repo": "https://github.com/AidenYangX/mapbox-mcp-server",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/mapbox-mcp-server/build/index.js"
        ],
        "env": {
            "MAPBOX_ACCESS_TOKEN": "your-api-key"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "mapboxAccessToken": {
                    "type": "string",
                    "description": "Mapbox API access token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "mapboxAccessToken": {
                "type": "env",
                "key": "MAPBOX_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "mcp-codex-keeper",
        "name": "MCP Codex Keeper",
        "description": "An intelligent MCP server that serves as a guardian of development knowledge, providing AI assistants with curated access to latest documentation and best practices.",
        "tags": [
            "mcp",
            "ai",
            "documentation"
        ],
        "repo": "https://github.com/aindreyway/mcp-codex-keeper",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@aindreyway/mcp-codex-keeper@latest"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "npm_config_cache_max": {
                    "type": "string",
                    "description": "Max cache size for npm",
                    "required": true
                },
                "NODE_OPTIONS": {
                    "type": "string",
                    "description": "Node.js options for memory usage",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "npm_config_cache_max": {
                "type": "env",
                "key": "NPM_CONFIG_CACHE_MAX"
            },
            "NODE_OPTIONS": {
                "type": "env",
                "key": "NODE_OPTIONS"
            }
        }
    },
    {
        "id": "aindreyway-mcp-neurolora",
        "name": "MCP Neurolora",
        "description": "An intelligent MCP server that provides tools for code analysis using OpenAI API, code collection, and documentation generation.",
        "tags": [
            "openai",
            "code-analysis",
            "documentation"
        ],
        "repo": "https://github.com/aindreyway/mcp-neurolora",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@aindreyway/mcp-neurolora@latest"
        ],
        "env": {
            "NODE_OPTIONS": "--max-old-space-size=256",
            "OPENAI_API_KEY": "your_api_key_here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "codePath": {
                    "type": "string",
                    "description": "Path to the code file or directory to analyze",
                    "required": true
                },
                "directory": {
                    "type": "string",
                    "description": "Directory path to collect code from",
                    "required": true
                },
                "outputPath": {
                    "type": "string",
                    "description": "Path where to save the output markdown file",
                    "required": false
                },
                "ignorePatterns": {
                    "type": "array",
                    "description": "Array of patterns to ignore (similar to .gitignore)",
                    "required": false,
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "argsMapping": {
            "codePath": {
                "type": "single",
                "position": 0
            },
            "directory": {
                "type": "single",
                "position": 1
            },
            "outputPath": {
                "type": "single",
                "position": 2
            },
            "ignorePatterns": {
                "type": "spread",
                "position": 3
            }
        }
    },
    {
        "id": "myMcp",
        "name": "My MCP Server",
        "description": "Custom MCP server example for integration with Claude",
        "tags": [
            "mcp",
            "server"
        ],
        "repo": "https://github.com/Alesion30/my-mcp-server",
        "command": "node",
        "baseArgs": [
            "xxx/my-mcp-server/build/main.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "everything-search",
        "name": "Everything Search MCP Server",
        "description": "An MCP server that provides integration with Everything Search Engine, allowing powerful file search capabilities through the Model Context Protocol.",
        "tags": [
            "search",
            "mcp",
            "everything"
        ],
        "repo": "https://github.com/Alihkhawaher/everything-search-server",
        "command": "npm",
        "baseArgs": [
            "install",
            "run",
            "build"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Text to search for",
                    "required": true
                },
                "scope": {
                    "type": "string",
                    "description": "Search scope",
                    "required": false
                },
                "caseSensitive": {
                    "type": "boolean",
                    "description": "Match case",
                    "required": false
                },
                "wholeWord": {
                    "type": "boolean",
                    "description": "Match whole words only",
                    "required": false
                },
                "regex": {
                    "type": "boolean",
                    "description": "Use regular expressions",
                    "required": false
                },
                "path": {
                    "type": "boolean",
                    "description": "Search in paths",
                    "required": false
                },
                "maxResults": {
                    "type": "integer",
                    "description": "Max results (1-1000)",
                    "required": false
                },
                "sortBy": {
                    "type": "string",
                    "description": "Sort by name/path/size/date_modified",
                    "required": false
                },
                "ascending": {
                    "type": "boolean",
                    "description": "Sort direction",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "query": {
                "type": "single",
                "position": 0
            },
            "scope": {
                "type": "single",
                "position": 1
            },
            "caseSensitive": {
                "type": "single",
                "position": 2
            },
            "wholeWord": {
                "type": "single",
                "position": 3
            },
            "regex": {
                "type": "single",
                "position": 4
            },
            "path": {
                "type": "single",
                "position": 5
            },
            "maxResults": {
                "type": "single",
                "position": 6
            },
            "sortBy": {
                "type": "single",
                "position": 7
            },
            "ascending": {
                "type": "single",
                "position": 8
            }
        }
    },
    {
        "id": "home-assistant",
        "name": "Home Assistant",
        "description": "A Model Context Protocol Server for Home Assistant.",
        "repo": "https://github.com/allenporter/mcp-server-home-assistant",
        "tags": [
            "home-assistant",
            "model-context-protocol"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/allen/Development/mcp-server-home-assistant",
            "run",
            "mcp-server-home-assistant",
            "-v",
            "-v"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "HOME_ASSISTANT_WEB_SOCKET_URL": {
                    "type": "string",
                    "description": "WebSocket URL for Home Assistant API",
                    "required": true
                },
                "HOME_ASSISTANT_API_TOKEN": {
                    "type": "string",
                    "description": "Long Lived Access Token for Home Assistant API",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            },
            "webSocketUrl": {
                "type": "env",
                "key": "HOME_ASSISTANT_WEB_SOCKET_URL"
            },
            "apiToken": {
                "type": "env",
                "key": "HOME_ASSISTANT_API_TOKEN"
            }
        }
    },
    {
        "id": "unichat-mcp-server",
        "name": "Unichat MCP Server",
        "description": "Send requests to OpenAI, MistralAI, Anthropic, xAI, Google AI or DeepSeek using MCP protocol via tool or predefined prompts.",
        "repo": "https://github.com/amidabuddha/unichat-mcp-server",
        "tags": [
            "mcp",
            "api",
            "unichat"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "{{your source code local directory}}/unichat-mcp-server",
            "run",
            "unichat-mcp-server"
        ],
        "env": {
            "UNICHAT_MODEL": "SELECTED_UNICHAT_MODEL",
            "UNICHAT_API_KEY": "YOUR_UNICHAT_API_KEY"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "UNICHAT_MODEL": {
                    "type": "string",
                    "description": "Model to be used",
                    "required": true
                },
                "UNICHAT_API_KEY": {
                    "type": "string",
                    "description": "API Key for Unichat",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "string",
                "position": 1
            },
            "model": {
                "type": "env",
                "key": "UNICHAT_MODEL"
            },
            "apiKey": {
                "type": "env",
                "key": "UNICHAT_API_KEY"
            }
        }
    },
    {
        "id": "mcp-installer",
        "name": "MCP Installer",
        "description": "A MCP Server to install MCP Servers",
        "tags": [
            "mcp",
            "installer"
        ],
        "repo": "https://github.com/anaisbetts/mcp-installer",
        "command": "npx",
        "baseArgs": [
            "@anaisbetts/mcp-installer"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "youtube",
        "name": "YouTube MCP Server",
        "description": "Uses yt-dlp to download subtitles from YouTube and connects it to claude.ai via Model Context Protocol. Try it by asking Claude, \"Summarize the YouTube video <>.\" Requires yt-dlp to be installed locally e.g. via Homebrew.",
        "tags": [
            "youtube",
            "subtitles",
            "api"
        ],
        "repo": "https://github.com/anaisbetts/mcp-youtube",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@anaisbetts/mcp-youtube"
        ],
        "configurable": false
    },
    {
        "id": "simple-arxiv",
        "name": "MCP Simple Arxiv",
        "description": "An MCP server that provides access to arXiv papers through their API.",
        "repo": "https://github.com/andybrandt/mcp-simple-arxiv",
        "tags": [
            "arxiv",
            "api",
            "papers",
            "research"
        ],
        "command": "python",
        "baseArgs": [
            "-m",
            "mcp_simple_arxiv"
        ],
        "configurable": false
    },
    {
        "id": "openai-assistant",
        "name": "MCP Simple OpenAI Assistant",
        "description": "A simple MCP server for interacting with OpenAI assistants. This server allows other tools to create and interact with OpenAI assistants through the Model Context Protocol.",
        "tags": [
            "openai",
            "assistant",
            "mcp"
        ],
        "repo": "https://github.com/andybrandt/mcp-simple-openai-assistant",
        "command": "python",
        "baseArgs": [
            "-m",
            "mcp_simple_openai_assistant"
        ],
        "env": {
            "OPENAI_API_KEY": "your-api-key-here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "OPENAI_API_KEY": {
                    "type": "string",
                    "description": "OpenAI API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "simple-pubmed",
        "name": "MCP Simple PubMed",
        "description": "An MCP server that provides access to PubMed articles through the Entrez API.",
        "tags": [
            "pubmed",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/andybrandt/mcp-simple-pubmed",
        "command": "python",
        "baseArgs": [
            "-m",
            "mcp_simple_pubmed"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "PUBMED_EMAIL": {
                    "type": "string",
                    "description": "Your email address (required by NCBI)",
                    "required": true
                },
                "PUBMED_API_KEY": {
                    "type": "string",
                    "description": "Optional API key for higher rate limits",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "PUBMED_EMAIL": {
                "type": "env",
                "key": "PUBMED_EMAIL"
            },
            "PUBMED_API_KEY": {
                "type": "env",
                "key": "PUBMED_API_KEY"
            }
        }
    },
    {
        "id": "simple-timeserver",
        "name": "MCP Simple Timeserver",
        "description": "A simple MCP server that provides current local time and timezone information.",
        "tags": [
            "mcp",
            "timeserver",
            "time"
        ],
        "repo": "https://github.com/andybrandt/mcp-simple-timeserver",
        "command": "python",
        "baseArgs": [
            "-m",
            "mcp_simple_timeserver"
        ],
        "configurable": false
    },
    {
        "id": "nyt",
        "name": "NYTimes Article Search MCP Server",
        "description": "This is a TypeScript-based MCP server that allows searching for New York Times articles from the last 30 days based on a keyword.",
        "tags": [
            "nytimes",
            "search",
            "api"
        ],
        "repo": "https://github.com/angheljf/nyt",
        "command": "node",
        "baseArgs": [
            "path/to/your/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "NYTIMES_API_KEY": {
                    "type": "string",
                    "description": "Your New York Times API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "keyword": {
                "type": "single",
                "position": 1
            }
        },
        "env": {
            "NYTIMES_API_KEY": "your_api_key_here"
        }
    },
    [
        {
            "id": "postgres",
            "name": "PostgreSQL",
            "description": "Read-only database access with schema inspection",
            "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
            "tags": [
                "database",
                "postgresql",
                "sql"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/server-postgres"
            ],
            "configurable": true,
            "configSchema": {
                "properties": {
                    "connectionString": {
                        "type": "string",
                        "description": "PostgreSQL connection string",
                        "required": true
                    }
                }
            },
            "argsMapping": {
                "connectionString": {
                    "type": "single",
                    "position": 2
                }
            }
        }
    ],
    {
        "id": "mcp-xmind",
        "name": "MCP XMind Server",
        "description": "A Model Context Protocol server for analyzing and querying XMind mind maps. This tool provides powerful capabilities for searching, extracting, and analyzing content from XMind files.",
        "repo": "https://github.com/apeyroux/mcp-xmind",
        "tags": [
            "xmind",
            "analysis",
            "querying"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@41px/mcp-xmind"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path to the XMind file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "path": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "mcp-server-rag-web-browser",
        "name": "Model Context Protocol (MCP) Server for the RAG Web Browser Actor",
        "description": "Implementation of an MCP server for the RAG Web Browser Actor. This Actor serves as a web browser for large language models (LLMs) and RAG pipelines, similar to a web search in ChatGPT.",
        "tags": [
            "mcp",
            "web-browser",
            "actor"
        ],
        "repo": "https://github.com/apify/mcp-server-rag-web-browser",
        "command": "npx",
        "baseArgs": [
            "/path/to/mcp-server-rag-web-browser/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "APIFY_API_TOKEN": {
                    "type": "string",
                    "description": "Apify API Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "APIFY_API_TOKEN": {
                "type": "env",
                "key": "APIFY_API_TOKEN"
            }
        }
    },
    {
        "id": "piapi",
        "name": "PiAPI MCP Server",
        "description": "A TypeScript implementation of a Model Context Protocol (MCP) server that integrates with PiAPI's API.",
        "tags": [
            "typescript",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/apinetwork/piapi-mcp-server",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/piapi-mcp-server/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "PIAPI_API_KEY": {
                    "type": "string",
                    "description": "A PiAPI API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "PIAPI_API_KEY": {
                "type": "env",
                "key": "PIAPI_API_KEY"
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "devin-ai-integration",
        "name": "Devin.ai Integration",
        "description": "This Github App integration allows Devin (devin.ai) to have limited authenticated access to your organization's code repositories.",
        "repo": "https://github.com/apps/devin-ai-integration",
        "tags": [
            "github",
            "app",
            "integration"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-devin"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access Token for authentication with Devin.ai",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "accessToken": {
                "type": "env",
                "key": "DEVIN_AI_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "playwright",
        "name": "MCP Server Playwright",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright",
        "tags": [
            "automation",
            "playwright",
            "browser"
        ],
        "repo": "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@automatalabs/mcp-server-playwright"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "s3-mcp-server",
        "name": "Sample S3 Model Context Protocol Server",
        "description": "An MCP server implementation for retrieving data such as PDF's from S3.",
        "repo": "https://github.com/aws-samples/sample-mcp-server-s3",
        "tags": [
            "aws",
            "s3",
            "mcp"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/user/generative_ai/model_context_protocol/s3-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "awsCredentials": {
                    "type": "object",
                    "description": "AWS credentials for accessing S3",
                    "required": true,
                    "properties": {
                        "accessKeyId": {
                            "type": "string",
                            "description": "AWS Access Key ID",
                            "required": true
                        },
                        "secretAccessKey": {
                            "type": "string",
                            "description": "AWS Secret Access Key",
                            "required": true
                        },
                        "region": {
                            "type": "string",
                            "description": "AWS Region",
                            "required": true
                        }
                    }
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "axiom",
        "name": "MCP Server Axiom",
        "description": "A Model Context Protocol server implementation for Axiom that enables AI agents to query your data using Axiom Processing Language (APL).",
        "tags": [
            "axiom",
            "mcp",
            "ai",
            "data"
        ],
        "repo": "https://github.com/axiomhq/mcp-server-axiom",
        "command": "/path/to/your/axiom-mcp-binary",
        "baseArgs": [
            "--config",
            "/path/to/your/config.txt"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Axiom Token",
                    "required": true
                },
                "url": {
                    "type": "string",
                    "description": "Axiom API URL",
                    "required": true
                },
                "orgId": {
                    "type": "string",
                    "description": "Your Organization ID",
                    "required": true
                },
                "queryRate": {
                    "type": "integer",
                    "description": "Rate limit for queries",
                    "required": true
                },
                "queryBurst": {
                    "type": "integer",
                    "description": "Burst limit for queries",
                    "required": true
                },
                "datasetsRate": {
                    "type": "integer",
                    "description": "Rate limit for datasets",
                    "required": true
                },
                "datasetsBurst": {
                    "type": "integer",
                    "description": "Burst limit for datasets",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "single",
                "position": 1
            },
            "url": {
                "type": "single",
                "position": 2
            },
            "queryRate": {
                "type": "single",
                "position": 3
            },
            "queryBurst": {
                "type": "single",
                "position": 4
            },
            "datasetsRate": {
                "type": "single",
                "position": 5
            },
            "datasetsBurst": {
                "type": "single",
                "position": 6
            }
        }
    },
    {
        "id": "phabricator",
        "name": "Phabricator MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation for interacting with Phabricator API. This server allows LLMs to interact with Phabricator through a standardized interface.",
        "tags": [
            "phabricator",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/baba786/phabricator-mcp-server",
        "command": "python",
        "baseArgs": [
            "server.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "PHABRICATOR_TOKEN": {
                    "type": "string",
                    "description": "Phabricator API token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "PHABRICATOR_TOKEN": {
                "type": "env",
                "key": "PHABRICATOR_TOKEN"
            }
        }
    },
    {
        "id": "mysql",
        "name": "MySQL",
        "description": "Read-only database access with schema inspection",
        "tags": [
            "database",
            "mysql",
            "sql"
        ],
        "repo": "https://github.com/benborla/mcp-server-mysql",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@benborla29/mcp-server-mysql"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "MYSQL_HOST": {
                    "type": "string",
                    "description": "MySQL host address",
                    "required": true
                },
                "MYSQL_PORT": {
                    "type": "string",
                    "description": "MySQL port number",
                    "required": true
                },
                "MYSQL_USER": {
                    "type": "string",
                    "description": "MySQL user name",
                    "required": true
                },
                "MYSQL_PASS": {
                    "type": "string",
                    "description": "MySQL password",
                    "required": false
                },
                "MYSQL_DB": {
                    "type": "string",
                    "description": "MySQL database name",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "MYSQL_HOST": {
                "type": "env",
                "key": "MYSQL_HOST"
            },
            "MYSQL_PORT": {
                "type": "env",
                "key": "MYSQL_PORT"
            },
            "MYSQL_USER": {
                "type": "env",
                "key": "MYSQL_USER"
            },
            "MYSQL_PASS": {
                "type": "env",
                "key": "MYSQL_PASS"
            },
            "MYSQL_DB": {
                "type": "env",
                "key": "MYSQL_DB"
            }
        }
    },
    {
        "id": "alpha-vantage-mcp",
        "name": "Alpha Vantage MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides real-time access to financial market data through the free Alpha Vantage API. This server implements a standardized interface for retrieving stock quotes and company information.",
        "tags": [
            "finance",
            "api",
            "market-data"
        ],
        "repo": "https://github.com/berlinbra/alpha-vantage-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/{INSERT_USER}/YOUR/PATH/TO/alpha-vantage-mcp",
            "run",
            "alpha-vantage-mcp"
        ],
        "env": {
            "ALPHA_VANTAGE_API_KEY": "<insert api key>"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "symbol": {
                    "type": "string",
                    "description": "Stock symbol (e.g., AAPL, MSFT)",
                    "required": true
                },
                "crypto_symbol": {
                    "type": "string",
                    "description": "Cryptocurrency symbol (e.g., BTC, ETH)"
                },
                "market": {
                    "type": "string",
                    "description": "Market currency (e.g., USD, EUR)",
                    "default": "USD"
                },
                "outputsize": {
                    "type": "string",
                    "description": "compact (latest 100 data points) or full (up to 20 years of data)",
                    "default": "compact"
                }
            }
        },
        "argsMapping": {
            "symbol": {
                "type": "single",
                "position": 1
            },
            "crypto_symbol": {
                "type": "single",
                "position": 1
            },
            "market": {
                "type": "single",
                "position": 2
            },
            "outputsize": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "clojars-deps-server",
        "name": "Clojars MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides tools for fetching dependency information from Clojars, the Clojure community's artifact repository.",
        "tags": [
            "mcp",
            "clojars",
            "dependency",
            "artifact"
        ],
        "repo": "https://github.com/Bigsy/Clojars-MCP-Server",
        "command": "node",
        "baseArgs": [
            "/path/to/clojars-deps-server/build/index.js"
        ],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "maven-deps-server",
        "name": "Maven Dependencies MCP Server",
        "description": "An MCP (Model Context Protocol) server that provides tools for checking Maven dependency versions.",
        "tags": [
            "maven",
            "dependencies",
            "api"
        ],
        "repo": "https://github.com/Bigsy/maven-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/maven-deps-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "dependency": {
                    "type": "string",
                    "description": "Maven dependency in format \"groupId:artifactId\" (e.g. \"org.springframework:spring-core\")",
                    "required": true
                },
                "version": {
                    "type": "string",
                    "description": "Version to check (e.g. \"5.3.20\")",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "dependency": {
                "type": "single",
                "position": 0
            },
            "version": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "playwright-server",
        "name": "Playwright Server",
        "description": "MCP server with playwright tools",
        "tags": [
            "playwright",
            "server"
        ],
        "repo": "https://github.com/blackwhite084/playwright-plus-python-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server",
            "run",
            "playwright-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Directory containing the Playwright server"
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "arxiv-mcp-server",
        "name": "ArXiv MCP Server",
        "description": "Enable AI assistants to search and access arXiv papers through a simple MCP interface.",
        "tags": [
            "arxiv",
            "ai",
            "mcp"
        ],
        "repo": "https://github.com/blazickjp/arxiv-mcp-server",
        "command": "uv",
        "baseArgs": [
            "tool",
            "run",
            "arxiv-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "storagePath": {
                    "type": "string",
                    "description": "Paper storage location",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "storagePath": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "mcp-server-and-gw",
        "name": "MCP Server and GW",
        "description": "A Model Context Protocol gateway handling various transports.",
        "tags": [
            "mcp",
            "gateway",
            "server",
            "client"
        ],
        "repo": "https://github.com/boilingdata/mcp-server-and-gw",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server"
        ],
        "configurable": false,
        "overviewFiles": [
            {
                "displayName": "README.md",
                "preferredFileType": "readme"
            },
            {
                "displayName": "LICENSE",
                "preferredFileType": "license"
            }
        ]
    },
    {
        "id": "browserbase",
        "name": "Browserbase MCP Server",
        "description": "This server provides cloud browser automation capabilities using Browserbase, Puppeteer, and Stagehand. Enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a cloud browser environment.",
        "tags": [
            "browser",
            "automation",
            "LLM"
        ],
        "repo": "https://github.com/browserbase/mcp-server-browserbase",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@browserbase/server-browserbase"
        ],
        "configurable": false
    },
    {
        "id": "npm-search",
        "name": "NPM Search",
        "description": "A Model Context Protocol server that allows you to search for npm packages by calling the npm search command.",
        "repo": "https://github.com/btwiuse/npm-search-mcp-server",
        "tags": [
            "npm",
            "search",
            "packages"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "npm-search-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The search query.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "query": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "video-editor-mcp",
        "name": "Video Editor MCP",
        "description": "Upload, edit, search, and generate videos from everyone's favorite LLM and Video Jungle.",
        "tags": [
            "video",
            "editing",
            "api"
        ],
        "repo": "https://github.com/burningion/video-editing-mcp",
        "command": "uvx",
        "baseArgs": [
            "video-editor-mcp",
            "YOURAPIKEY"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "YOURAPIKEY": {
                    "type": "string",
                    "description": "Your Video Jungle API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "YOURAPIKEY": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "dnstwist",
        "name": "DNStwist MCP Server",
        "description": "A powerful DNS fuzzing tool that helps detect typosquatting, phishing, and corporate espionage.",
        "tags": [
            "dns",
            "fuzzing",
            "security"
        ],
        "repo": "https://github.com/BurtTheCoder/mcp-dnstwist",
        "command": "npm",
        "baseArgs": [
            "install",
            "-g",
            "mcp-dnstwist"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "domain": {
                    "type": "string",
                    "description": "Domain name to analyze (e.g., example.com)",
                    "required": true
                },
                "nameservers": {
                    "type": "string",
                    "description": "Comma-separated list of DNS servers",
                    "required": false
                },
                "threads": {
                    "type": "number",
                    "description": "Number of threads for parallel processing",
                    "required": false
                },
                "format": {
                    "type": "string",
                    "description": "Output format (json, csv, list)",
                    "required": false
                },
                "registered_only": {
                    "type": "boolean",
                    "description": "Show only registered domains",
                    "required": false
                },
                "mxcheck": {
                    "type": "boolean",
                    "description": "Check for MX records",
                    "required": false
                },
                "banners": {
                    "type": "boolean",
                    "description": "Capture HTTP banner information",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "domain": {
                "type": "single",
                "position": 0
            },
            "nameservers": {
                "type": "spread",
                "position": 1
            },
            "threads": {
                "type": "single",
                "position": 2
            },
            "format": {
                "type": "single",
                "position": 3
            },
            "registered_only": {
                "type": "single",
                "position": 4
            },
            "mxcheck": {
                "type": "single",
                "position": 5
            },
            "banners": {
                "type": "single",
                "position": 6
            }
        }
    },
    {
        "id": "maigret",
        "name": "Maigret MCP Server",
        "description": "A Model Context Protocol (MCP) server for maigret, a powerful OSINT tool that collects user account information from various public sources. This server provides tools for searching usernames across social networks and analyzing URLs. It is designed to integrate seamlessly with MCP-compatible applications.",
        "tags": [
            "osint",
            "maigret",
            "mcp"
        ],
        "repo": "https://github.com/BurtTheCoder/mcp-maigret",
        "command": "npm",
        "baseArgs": [
            "install",
            "-g",
            "mcp-maigret"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "MAIGRET_REPORTS_DIR": {
                    "type": "string",
                    "description": "Path to the directory for storing reports",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "MAIGRET_REPORTS_DIR": {
                "type": "env",
                "key": "MAIGRET_REPORTS_DIR"
            }
        }
    },
    {
        "id": "shodan",
        "name": "Shodan MCP Server",
        "description": "A Model Context Protocol (MCP) server for querying the Shodan API and Shodan CVEDB.",
        "tags": [
            "shodan",
            "api",
            "cvedb"
        ],
        "repo": "https://github.com/BurtTheCoder/mcp-shodan",
        "command": "mcp-shodan",
        "baseArgs": [],
        "env": {
            "SHODAN_API_KEY": {
                "type": "string",
                "description": "Your Shodan API key",
                "required": true
            }
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "env": {
                    "type": "object",
                    "description": "Required environment variables",
                    "properties": {
                        "SHODAN_API_KEY": {
                            "type": "string",
                            "description": "Shodan API key",
                            "required": true
                        }
                    }
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "virustotal",
        "name": "VirusTotal",
        "description": "A Model Context Protocol (MCP) server for querying the VirusTotal API. This server provides comprehensive security analysis tools with automatic relationship data fetching.",
        "tags": [
            "security",
            "api",
            "virustotal"
        ],
        "repo": "https://github.com/BurtTheCoder/mcp-virustotal",
        "command": "npm",
        "baseArgs": [
            "install",
            "-g",
            "@burtthecoder/mcp-virustotal"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "VIRUSTOTAL_API_KEY": {
                    "type": "string",
                    "description": "Your VirusTotal API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "VIRUSTOTAL_API_KEY": {
                "type": "env",
                "key": "VIRUSTOTAL_API_KEY"
            }
        }
    },
    {
        "id": "mcp-obsidian",
        "name": "Obsidian Model Context Protocol",
        "description": "This is a connector to allow Claude Desktop (or any MCP client) to read and search any directory containing Markdown notes (such as an Obsidian vault).",
        "repo": "https://github.com/smithery-ai/mcp-obsidian",
        "tags": [
            "markdown",
            "obsidian",
            "mcp",
            "connector"
        ],
        "command": "npx",
        "baseArgs": [
            "@smithery/cli",
            "install",
            "mcp-obsidian",
            "--client",
            "claude"
        ],
        "configurable": false
    },
    {
        "id": "alphavantage",
        "name": "Alphavantage",
        "description": "A MCP server for the stock market data API, Alphavantage API.",
        "tags": [
            "stock",
            "api"
        ],
        "repo": "https://github.com/calvernaz/alphavantage",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "<DIRECTORY>/alphavantage",
            "run",
            "alphavantage"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Alphavantage API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "ALPHAVANTAGE_API_KEY"
            }
        }
    },
    {
        "id": "google-news",
        "name": "Google News",
        "description": "A Model Context Protocol (MCP) server implementation that provides Google News search capabilities via SerpAPI integration. Automatically categorizes news results and supports multiple languages and regions.",
        "repo": "https://github.com/ChanMeng666/server-google-news",
        "tags": [
            "news",
            "google",
            "mcp",
            "search"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@chanmeng666/google-news-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "SerpAPI API key for authentication",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "SERP_API_KEY"
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "memorymesh",
        "name": "MemoryMesh",
        "description": "A local knowledge graph server designed for AI models, useful for text-based RPGs and interactive storytelling.",
        "tags": [
            "knowledge-graph",
            "ai",
            "rpg"
        ],
        "repo": "https://github.com/CheMiguel23/MemoryMesh",
        "command": "node",
        "baseArgs": [
            "/ABSOLUTE/PATH/TO/YOUR/PROJECT/memorymesh/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "memoryFile": {
                    "type": "string",
                    "description": "Path to the JSON file used for storing the knowledge graph data.",
                    "required": true
                },
                "schemasDir": {
                    "type": "string",
                    "description": "Path to the directory containing schema files.",
                    "required": true
                }
            }
        }
    },
    {
        "id": "keycloak",
        "name": "Keycloak",
        "description": "A Model Context Protocol server for Keycloak administration, providing tools to manage users and realms.",
        "tags": [
            "keycloak",
            "mcp",
            "authentication"
        ],
        "repo": "https://github.com/ChristophEnglisch/keycloak-model-context-protocol",
        "command": "npx",
        "baseArgs": [
            "-y",
            "keycloak-model-context-protocol"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "KEYCLOAK_URL": {
                    "type": "string",
                    "description": "Keycloak URL",
                    "required": true
                },
                "KEYCLOAK_ADMIN": {
                    "type": "string",
                    "description": "Keycloak admin username",
                    "required": true
                },
                "KEYCLOAK_ADMIN_PASSWORD": {
                    "type": "string",
                    "description": "Keycloak admin password",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "KEYCLOAK_URL": {
                "type": "env",
                "key": "KEYCLOAK_URL"
            },
            "KEYCLOAK_ADMIN": {
                "type": "env",
                "key": "KEYCLOAK_ADMIN"
            },
            "KEYCLOAK_ADMIN_PASSWORD": {
                "type": "env",
                "key": "KEYCLOAK_ADMIN_PASSWORD"
            }
        }
    },
    {
        "id": "claude-desktop-transport-bridge",
        "name": "Claude Desktop Transport Bridge",
        "description": "A transport bridge for Claude Desktop that supports both SSE and WebSocket connections.",
        "tags": [
            "desktop",
            "transport",
            "bridge"
        ],
        "repo": "https://github.com/chromecide/claude-desktop-transport-bridge",
        "command": "npm",
        "baseArgs": [
            "install",
            "-g",
            "github:chromecide/claude-desktop-transport-bridge"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "SSE or WebSocket URL",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "mcp-server-docker",
        "name": "Docker MCP server",
        "description": "An MCP server for managing Docker with natural language!",
        "tags": [
            "docker",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/ckreiling/mcp-server-docker",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/repo",
            "run",
            "mcp-server-docker"
        ],
        "configurable": false
    },
    {
        "id": "clickhouse",
        "name": "ClickHouse",
        "description": "An MCP server for ClickHouse.",
        "tags": [
            "database",
            "clickhouse"
        ],
        "repo": "https://github.com/ClickHouse/mcp-clickhouse",
        "command": "uv",
        "baseArgs": [
            "sync"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "ClickHouse connection string",
                    "required": true
                },
                "host": {
                    "type": "string",
                    "description": "ClickHouse host",
                    "required": true
                },
                "port": {
                    "type": "number",
                    "description": "ClickHouse port",
                    "required": true
                },
                "user": {
                    "type": "string",
                    "description": "ClickHouse user",
                    "required": true
                },
                "password": {
                    "type": "string",
                    "description": "ClickHouse password",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "cloudflare",
        "name": "Cloudflare MCP Server",
        "description": "Model Context Protocol (MCP) for managing context between large language models and Cloudflare's API.",
        "tags": [
            "cloudflare",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/cloudflare/mcp-server-cloudflare",
        "command": "npx",
        "baseArgs": [
            "@cloudflare/mcp-server-cloudflare"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "continue",
        "name": "Continue",
        "description": "Continue is the leading open-source AI code assistant. You can connect any models and any context to build custom autocomplete and chat experiences inside VS Code and JetBrains.",
        "tags": [
            "ai",
            "code",
            "assistant"
        ],
        "repo": "https://github.com/continuedev/continue",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-continue"
        ],
        "configurable": false
    },
    {
        "id": "elasticsearch",
        "name": "Elasticsearch",
        "description": "A Model Context Protocol (MCP) server implementation that provides Elasticsearch interaction. This server enables searching documents, analyzing indices, and managing cluster through a set of tools.",
        "tags": [
            "elasticsearch",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/cr7258/elasticsearch-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "path/to/elasticsearch_mcp_server/src",
            "run",
            "server.py"
        ],
        "env": {
            "ELASTIC_HOST": "<your_elastic_url>",
            "ELASTIC_USERNAME": "<your_elastic_username>",
            "ELASTIC_PASSWORD": "<your_elastic_password>"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "ELASTIC_HOST": {
                    "type": "string",
                    "description": "Elasticsearch host URL",
                    "required": true
                },
                "ELASTIC_USERNAME": {
                    "type": "string",
                    "description": "Elasticsearch username",
                    "required": true
                },
                "ELASTIC_PASSWORD": {
                    "type": "string",
                    "description": "Elasticsearch password",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "ELASTIC_HOST": {
                "type": "env",
                "key": "ELASTIC_HOST"
            },
            "ELASTIC_USERNAME": {
                "type": "env",
                "key": "ELASTIC_USERNAME"
            },
            "ELASTIC_PASSWORD": {
                "type": "env",
                "key": "ELASTIC_PASSWORD"
            }
        }
    },
    {
        "id": "llm-context",
        "name": "LLM Context",
        "description": "A tool that helps developers quickly inject relevant content from code/text projects into Large Language Model chat interfaces.",
        "repo": "https://github.com/cyberchitta/llm-context.py",
        "tags": [
            "llm",
            "ai",
            "development",
            "integration"
        ],
        "command": "uv",
        "baseArgs": [
            "tool",
            "install",
            "llm-context"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "projectPath": {
                    "type": "string",
                    "description": "Path to the project root",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "projectPath": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "notion-todo",
        "name": "Notion MCP Integration",
        "description": "A simple Model Context Protocol (MCP) server that integrates with Notion's API to manage my personal todo list through Claude.",
        "tags": [
            "notion",
            "mcp",
            "todo"
        ],
        "repo": "https://github.com/danhilse/notion_mcp",
        "command": "/path/to/your/.venv/bin/python",
        "baseArgs": [
            "-m",
            "notion_mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Notion API key for accessing the Notion API",
                    "required": true
                },
                "databaseId": {
                    "type": "string",
                    "description": "Notion database ID for managing todos",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "NOTION_API_KEY"
            },
            "databaseId": {
                "type": "env",
                "key": "NOTION_DATABASE_ID"
            }
        }
    },
    {
        "id": "markdown-downloader",
        "name": "Markdown Downloader",
        "description": "A powerful MCP (Model Context Protocol) server that allows you to download webpages as markdown files with ease.",
        "tags": [
            "downloader",
            "markdown"
        ],
        "repo": "https://github.com/dazeb/markdown-downloader",
        "command": "node",
        "baseArgs": [
            "/home/user/Documents/Cline/MCP/markdown-downloader/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "downloadDirectory": {
                    "type": "string",
                    "description": "Directory where downloaded markdown files will be stored",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "downloadDirectory": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "postman",
        "name": "Postman MCP Server",
        "description": "An MCP server that provides access to the Postman API. Functionality is based on the official OpenAPI specification.",
        "tags": [
            "postman",
            "api"
        ],
        "repo": "https://github.com/delano/postman-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/postman-api-server/build/index.js"
        ],
        "env": {
            "POSTMAN_API_KEY": "CHANGEME"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Postman API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "POSTMAN_API_KEY"
            }
        }
    },
    {
        "id": "minecraft-mcp-server",
        "name": "Minecraft MCP Server",
        "description": "An early prototype of a Model Context Protocol (MCP) server implementation integrating the Mineflayer API to interact with Minecraft.",
        "tags": [
            "mcp",
            "minecraft",
            "mineflayer"
        ],
        "repo": "https://github.com/DennisTraub/minecraft-mcp-server",
        "command": "npx",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "mysql",
        "name": "MySQL MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables secure interaction with MySQL databases. This server allows AI assistants to list tables, read data, and execute SQL queries through a controlled interface, making database exploration and analysis safer and more structured.",
        "tags": [
            "mysql",
            "database",
            "mcp"
        ],
        "repo": "https://github.com/designcomputer/mysql_mcp_server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "path/to/mysql_mcp_server",
            "run",
            "mysql_mcp_server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "MYSQL_HOST": {
                    "type": "string",
                    "description": "MySQL host",
                    "required": true
                },
                "MYSQL_USER": {
                    "type": "string",
                    "description": "MySQL username",
                    "required": true
                },
                "MYSQL_PASSWORD": {
                    "type": "string",
                    "description": "MySQL password",
                    "required": true
                },
                "MYSQL_DATABASE": {
                    "type": "string",
                    "description": "MySQL database name",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "MYSQL_HOST": {
                "type": "env",
                "key": "MYSQL_HOST"
            },
            "MYSQL_USER": {
                "type": "env",
                "key": "MYSQL_USER"
            },
            "MYSQL_PASSWORD": {
                "type": "env",
                "key": "MYSQL_PASSWORD"
            },
            "MYSQL_DATABASE": {
                "type": "env",
                "key": "MYSQL_DATABASE"
            }
        }
    },
    {
        "id": "mcp-server",
        "name": "MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides agentic tools for interacting with the Trieve API.",
        "repo": "https://github.com/devflowinc/trieve/tree/main/clients/mcp-server",
        "tags": [
            "mcp",
            "API",
            "Trieve"
        ],
        "command": "npx",
        "baseArgs": [
            "trieve-mcp-server@latest"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "TRIEVE_API_KEY": {
                    "type": "string",
                    "description": "Your Trieve API key from dashboard.trieve.ai",
                    "required": true
                },
                "TRIEVE_ORGANIZATION_ID": {
                    "type": "string",
                    "description": "Your Trieve organization ID from dashboard.trieve.ai",
                    "required": true
                },
                "TRIEVE_DATASET_ID": {
                    "type": "string",
                    "description": "Specific dataset ID to use (if not provided via CLI)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "TRIEVE_API_KEY": {
                "type": "env",
                "key": "TRIEVE_API_KEY"
            },
            "TRIEVE_ORGANIZATION_ID": {
                "type": "env",
                "key": "TRIEVE_ORGANIZATION_ID"
            },
            "TRIEVE_DATASET_ID": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "tablestore",
        "name": "Azure TableStore",
        "description": "A TypeScript-based MCP server that enables interaction with Azure Table Storage directly through Cline.",
        "tags": [
            "azure",
            "storage",
            "tables"
        ],
        "repo": "https://github.com/dkmaker/mcp-azure-tablestorage",
        "command": "node",
        "baseArgs": [
            "C:/path/to/your/mcp-azure-tablestorage/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "Your Azure Storage account connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "env",
                "key": "AZURE_STORAGE_CONNECTION_STRING"
            }
        }
    },
    {
        "id": "mcp-function-app-tester",
        "name": "MCP Function App Tester",
        "description": "A TypeScript-based MCP server that enables testing of Azure Function Apps through Cline. This tool allows you to test and interact with Function App endpoints directly from your development environment.",
        "repo": "https://github.com/dkmaker/mcp-function-app-tester",
        "tags": [
            "mcp",
            "azure",
            "function-app"
        ],
        "command": "npm",
        "baseArgs": [
            "install",
            "dkmaker-mcp-function-app-tester"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AUTH_BASIC_USERNAME": {
                    "type": "string",
                    "description": "Your username for Basic Authentication",
                    "required": false
                },
                "AUTH_BASIC_PASSWORD": {
                    "type": "string",
                    "description": "Your password for Basic Authentication",
                    "required": false
                },
                "AUTH_BEARER": {
                    "type": "string",
                    "description": "Your token for Bearer Token authentication",
                    "required": false
                },
                "AUTH_APIKEY_HEADER_NAME": {
                    "type": "string",
                    "description": "The header name for API Key authentication",
                    "required": false
                },
                "AUTH_APIKEY_VALUE": {
                    "type": "string",
                    "description": "The actual API Key value",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "AUTH_BASIC_USERNAME": {
                "type": "env",
                "key": "AUTH_BASIC_USERNAME"
            },
            "AUTH_BASIC_PASSWORD": {
                "type": "env",
                "key": "AUTH_BASIC_PASSWORD"
            },
            "AUTH_BEARER": {
                "type": "env",
                "key": "AUTH_BEARER"
            },
            "AUTH_APIKEY_HEADER_NAME": {
                "type": "env",
                "key": "AUTH_APIKEY_HEADER_NAME"
            },
            "AUTH_APIKEY_VALUE": {
                "type": "env",
                "key": "AUTH_APIKEY_VALUE"
            }
        }
    },
    {
        "id": "minima",
        "name": "Minima",
        "description": "Minima is an open source RAG on-premises containers, with ability to integrate with ChatGPT and MCP.",
        "tags": [
            "mcp",
            "rag",
            "containers",
            "chatgpt"
        ],
        "repo": "https://github.com/dmayboroda/minima",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path_to_cloned_minima_project/mcp-server",
            "run",
            "minima"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "LOCAL_FILES_PATH": {
                    "type": "string",
                    "description": "Specify the root folder for indexing.",
                    "required": true
                },
                "EMBEDDING_MODEL_ID": {
                    "type": "string",
                    "description": "Specify the embedding model to use.",
                    "required": true
                },
                "EMBEDDING_SIZE": {
                    "type": "number",
                    "description": "Define the embedding dimension provided by the model.",
                    "required": true
                },
                "START_INDEXING": {
                    "type": "boolean",
                    "description": "Set this to 'true' on initial startup to begin indexing.",
                    "required": true
                },
                "OLLAMA_MODEL": {
                    "type": "string",
                    "description": "Set up the Ollama model.",
                    "required": true
                },
                "RERANKER_MODEL": {
                    "type": "string",
                    "description": "Specify the reranker model.",
                    "required": true
                },
                "USER_ID": {
                    "type": "string",
                    "description": "Just use your email here for custom GPT.",
                    "required": true
                },
                "PASSWORD": {
                    "type": "string",
                    "description": "Put any password here for create a firebase account.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "LOCAL_FILES_PATH": {
                "type": "single",
                "position": 1
            },
            "EMBEDDING_MODEL_ID": {
                "type": "single",
                "position": 2
            },
            "EMBEDDING_SIZE": {
                "type": "single",
                "position": 3
            },
            "START_INDEXING": {
                "type": "single",
                "position": 4
            },
            "OLLAMA_MODEL": {
                "type": "single",
                "position": 5
            },
            "RERANKER_MODEL": {
                "type": "single",
                "position": 6
            },
            "USER_ID": {
                "type": "single",
                "position": 7
            },
            "PASSWORD": {
                "type": "single",
                "position": 8
            }
        }
    },
    {
        "id": "airtable",
        "name": "Airtable",
        "description": "A Model Context Protocol server that provides read and write access to Airtable databases. This server enables LLMs to inspect database schemas, then read and write records.",
        "tags": [
            "airtable",
            "database",
            "mcp"
        ],
        "repo": "https://github.com/domdomegg/airtable-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "airtable-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Airtable personal access token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "github",
        "name": "GitHub MCP Server",
        "description": "Enhanced GitHub MCP server with code analysis, security scanning, and automated reviews",
        "tags": [
            "github",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/DynamicEndpoints/github-mcp-server",
        "command": "npx",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "paloalto",
        "name": "Palo Alto MCP Servers",
        "description": "A collection of Model Context Protocol (MCP) servers for managing Palo Alto Networks firewalls and services",
        "repo": "https://github.com/DynamicEndpoints/paloalto-mcp-servers",
        "tags": [],
        "command": "",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "pocketbase",
        "name": "PocketBase MCP Server",
        "description": "A comprehensive MCP server that provides sophisticated tools for interacting with PocketBase databases.",
        "tags": [
            "pocketbase",
            "database",
            "mcp"
        ],
        "repo": "https://github.com/DynamicEndpoints/pocketbase-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-pocketbase"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "POCKETBASE_URL": {
                    "type": "string",
                    "description": "URL of your PocketBase instance (e.g., 'http://127.0.0.1:8090')",
                    "required": true
                },
                "POCKETBASE_ADMIN_EMAIL": {
                    "type": "string",
                    "description": "Admin email for certain operations",
                    "required": false
                },
                "POCKETBASE_ADMIN_PASSWORD": {
                    "type": "string",
                    "description": "Admin password",
                    "required": false
                },
                "POCKETBASE_DATA_DIR": {
                    "type": "string",
                    "description": "Custom data directory path",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "POCKETBASE_URL": {
                "type": "single",
                "position": 0
            },
            "POCKETBASE_ADMIN_EMAIL": {
                "type": "env",
                "key": "POCKETBASE_ADMIN_EMAIL"
            },
            "POCKETBASE_ADMIN_PASSWORD": {
                "type": "env",
                "key": "POCKETBASE_ADMIN_PASSWORD"
            },
            "POCKETBASE_DATA_DIR": {
                "type": "env",
                "key": "POCKETBASE_DATA_DIR"
            }
        }
    },
    {
        "id": "mcp-server",
        "name": "E2B MCP Server",
        "description": "This repository contains the source code for the E2B MCP server. The E2B MCP server allows you to add code interpreting capabilities to your Claude Desktop app via the E2B Sandbox.",
        "tags": [
            "mcp",
            "e2b",
            "server"
        ],
        "repo": "https://github.com/e2b-dev/mcp-server",
        "command": "npx",
        "baseArgs": [
            "@smithery/cli",
            "install",
            "e2b",
            "--client",
            "claude"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "client": {
                    "type": "string",
                    "description": "Client type for installation",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "client": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "twitter-mcp",
        "name": "Twitter MCP Server",
        "description": "This MCP server allows Clients to interact with Twitter, enabling posting tweets and searching Twitter.",
        "tags": [
            "twitter",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/EnesCinr/twitter-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@enescinar/twitter-mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "API_KEY": {
                    "type": "string",
                    "description": "Twitter API key",
                    "required": true
                },
                "API_SECRET_KEY": {
                    "type": "string",
                    "description": "Twitter API secret key",
                    "required": true
                },
                "ACCESS_TOKEN": {
                    "type": "string",
                    "description": "Twitter access token",
                    "required": true
                },
                "ACCESS_TOKEN_SECRET": {
                    "type": "string",
                    "description": "Twitter access token secret",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "API_KEY": {
                "type": "env",
                "key": "TWITTER_API_KEY"
            },
            "API_SECRET_KEY": {
                "type": "env",
                "key": "TWITTER_API_SECRET_KEY"
            },
            "ACCESS_TOKEN": {
                "type": "env",
                "key": "TWITTER_ACCESS_TOKEN"
            },
            "ACCESS_TOKEN_SECRET": {
                "type": "env",
                "key": "TWITTER_ACCESS_TOKEN_SECRET"
            }
        }
    },
    {
        "id": "bigquery",
        "name": "BigQuery MCP Server",
        "description": "A server that lets your LLMs (like Claude) talk directly to your BigQuery data, making sure they can chat securely and efficiently.",
        "tags": [
            "bigquery",
            "mcp",
            "database",
            "api"
        ],
        "repo": "https://github.com/ergut/mcp-bigquery-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@ergut/mcp-bigquery-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "Google Cloud project ID",
                    "required": true
                },
                "location": {
                    "type": "string",
                    "description": "BigQuery location",
                    "required": false
                },
                "keyFile": {
                    "type": "string",
                    "description": "Path to service account key file",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "projectId": {
                "type": "single",
                "position": 2
            },
            "location": {
                "type": "single",
                "position": 4
            },
            "keyFile": {
                "type": "single",
                "position": 6
            }
        }
    },
    {
        "id": "mcp-logseq",
        "name": "MCP LogSeq Server",
        "description": "MCP server to interact with LogSeq via its API.",
        "tags": [
            "logseq",
            "api",
            "server"
        ],
        "repo": "https://github.com/ergut/mcp-logseq-server",
        "command": "uvx",
        "baseArgs": [
            "mcp-logseq"
        ],
        "env": {
            "LOGSEQ_API_TOKEN": "<your_api_token_here>",
            "LOGSEQ_API_URL": "http://localhost:12315"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "LOGSEQ_API_TOKEN": {
                    "type": "string",
                    "description": "Token for authenticating with the LogSeq API",
                    "required": true
                },
                "LOGSEQ_API_URL": {
                    "type": "string",
                    "description": "URL for the LogSeq API",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "LOGSEQ_API_TOKEN": {
                "type": "env",
                "key": "LOGSEQ_API_TOKEN"
            },
            "LOGSEQ_API_URL": {
                "type": "env",
                "key": "LOGSEQ_API_URL"
            }
        }
    },
    {
        "id": "mcp-hn",
        "name": "Hacker News MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides tools for fetching information from Hacker News.",
        "tags": [
            "hacker-news",
            "mcp"
        ],
        "repo": "https://github.com/erithwik/mcp-hn",
        "command": "uvx",
        "baseArgs": [
            "mcp-hn"
        ],
        "configurable": false
    },
    {
        "id": "mcp-connect",
        "name": "MCP Connect",
        "description": "A tool that integrates cloud-based AI services with local MCP servers.",
        "tags": [
            "mcp",
            "cloud",
            "integration",
            "tool"
        ],
        "repo": "https://github.com/EvalsOne/MCP-Connect",
        "command": "npm",
        "baseArgs": [
            "run",
            "start"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AUTH_TOKEN": {
                    "type": "string",
                    "description": "Authentication token for the bridge API",
                    "required": false
                },
                "PORT": {
                    "type": "number",
                    "description": "HTTP server port (default: 3000)",
                    "required": true
                },
                "LOG_LEVEL": {
                    "type": "string",
                    "description": "Logging level (default: info)",
                    "required": true
                },
                "NGROK_AUTH_TOKEN": {
                    "type": "string",
                    "description": "Ngrok auth token",
                    "required": false
                }
            }
        }
    },
    {
        "id": "mcp-hfspace",
        "name": "mcp-hfspace",
        "description": "Connect to Hugging Face Spaces with minimal setup needed - simply add your spaces and go!",
        "tags": [
            "huggingface",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/evalstate/mcp-hfspace",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@llmindset/mcp-hfspace"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "workDir": {
                    "type": "string",
                    "description": "Working directory for file handling",
                    "required": true
                },
                "hfToken": {
                    "type": "string",
                    "description": "Hugging Face Token for accessing private spaces",
                    "required": false
                },
                "spaces": {
                    "type": "array",
                    "description": "List of Hugging Face spaces",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "workDir": {
                "type": "single",
                "position": 2
            },
            "hfToken": {
                "type": "env",
                "key": "HF_TOKEN"
            },
            "spaces": {
                "type": "spread",
                "position": 3
            }
        }
    },
    {
        "id": "mcp-miro",
        "name": "MCP Miro",
        "description": "A Model Context Protocol server to connect to the MIRO Whiteboard Application.",
        "tags": [
            "miro",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/evalstate/mcp-miro",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@llmindset/mcp-miro"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "MIRO OAuth key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "env",
                "key": "MIRO_OAUTH_KEY"
            }
        }
    },
    {
        "id": "exa",
        "name": "Exa MCP Server",
        "description": "A Model Context Protocol (MCP) server that allows AI assistants to perform web searches using Exa's powerful search API.",
        "tags": [
            "mcp",
            "search",
            "api"
        ],
        "repo": "https://github.com/exa-labs/exa-mcp-server",
        "command": "npx",
        "baseArgs": [
            "/path/to/exa-mcp-server/build/index.js"
        ],
        "env": {
            "EXA_API_KEY": "your-api-key-here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Exa API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "EXA_API_KEY"
            }
        }
    },
    {
        "id": "playwright",
        "name": "Playwright MCP Server",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
        "repo": "https://github.com/executeautomation/mcp-playwright",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@executeautomation/playwright-mcp-server"
        ],
        "configurable": false
    },
    {
        "id": "mysql",
        "name": "MySQL",
        "description": "A Model Context Protocol server that provides MySQL database operations. This server enables AI models to interact with MySQL databases through a standardized interface.",
        "tags": [
            "mysql",
            "database",
            "sql"
        ],
        "repo": "https://github.com/f4ww4z/mcp-mysql-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@f4ww4z/mcp-mysql-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "MYSQL_HOST": {
                    "type": "string",
                    "description": "MySQL host address",
                    "required": true
                },
                "MYSQL_USER": {
                    "type": "string",
                    "description": "MySQL username",
                    "required": true
                },
                "MYSQL_PASSWORD": {
                    "type": "string",
                    "description": "MySQL password",
                    "required": true
                },
                "MYSQL_DATABASE": {
                    "type": "string",
                    "description": "MySQL database name",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "MYSQL_HOST": {
                "type": "env",
                "key": "MYSQL_HOST"
            },
            "MYSQL_USER": {
                "type": "env",
                "key": "MYSQL_USER"
            },
            "MYSQL_PASSWORD": {
                "type": "env",
                "key": "MYSQL_PASSWORD"
            },
            "MYSQL_DATABASE": {
                "type": "env",
                "key": "MYSQL_DATABASE"
            }
        }
    },
    {
        "id": "search1api",
        "name": "Search1API MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides search and crawl functionality using Search1API.",
        "tags": [
            "search",
            "API",
            "crawler"
        ],
        "repo": "https://github.com/fatwang2/search1api-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "search1api-mcp"
        ],
        "env": {
            "SEARCH1API_KEY": "YOUR_SEARCH1API_KEY"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "SEARCH1API_KEY": {
                    "type": "string",
                    "description": "Search1API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SEARCH1API_KEY": {
                "type": "env",
                "key": "SEARCH1API_KEY"
            }
        }
    },
    {
        "id": "airtable",
        "name": "Airtable MCP Server",
        "description": "A Model Context Protocol server that provides tools for interacting with Airtable's API. This server enables programmatic management of Airtable bases, tables, fields, and records through Claude Desktop.",
        "tags": [
            "airtable",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/felores/airtable-mcp",
        "command": "npx",
        "baseArgs": [
            "airtable-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AIRTABLE_API_KEY": {
                    "type": "string",
                    "description": "Airtable API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "AIRTABLE_API_KEY": {
                "type": "env",
                "key": "AIRTABLE_API_KEY"
            }
        }
    },
    {
        "id": "cloudinary",
        "name": "Cloudinary",
        "description": "This MCP server provides tools for uploading images and videos to Cloudinary through Claude Desktop and compatible MCP clients.",
        "tags": [
            "cloudinary",
            "upload",
            "media"
        ],
        "repo": "https://github.com/felores/cloudinary-mcp-server",
        "command": "npx",
        "baseArgs": [
            "@felores/cloudinary-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "CLOUDINARY_CLOUD_NAME": {
                    "type": "string",
                    "description": "Your Cloudinary cloud name",
                    "required": true
                },
                "CLOUDINARY_API_KEY": {
                    "type": "string",
                    "description": "Your Cloudinary API key",
                    "required": true
                },
                "CLOUDINARY_API_SECRET": {
                    "type": "string",
                    "description": "Your Cloudinary API secret",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "CLOUDINARY_CLOUD_NAME": {
                "type": "env",
                "key": "CLOUDINARY_CLOUD_NAME"
            },
            "CLOUDINARY_API_KEY": {
                "type": "env",
                "key": "CLOUDINARY_API_KEY"
            },
            "CLOUDINARY_API_SECRET": {
                "type": "env",
                "key": "CLOUDINARY_API_SECRET"
            }
        }
    },
    {
        "id": "placid",
        "name": "Placid MCP Server",
        "description": "An MCP server implementation for integrating with Placid.app's API. This server provides tools for listing templates and generating creatives through the Model Context Protocol.",
        "tags": [
            "api",
            "placid",
            "mcp"
        ],
        "repo": "https://github.com/felores/placid-mcp-server",
        "command": "npx",
        "baseArgs": [
            "@felores/placid-mcp-server"
        ],
        "env": {
            "PLACID_API_TOKEN": "your-api-token"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "PLACID_API_TOKEN": {
                    "type": "string",
                    "description": "Placid API token for authentication",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "PLACID_API_TOKEN": {
                "type": "env",
                "key": "PLACID_API_TOKEN"
            }
        }
    },
    {
        "id": "genkit",
        "name": "Genkit",
        "description": "AI framework for building applications with Node.js and Go.",
        "tags": [
            "ai",
            "framework",
            "nodejs",
            "go"
        ],
        "repo": "https://github.com/firebase/genkit",
        "command": "npm",
        "baseArgs": [
            "i",
            "-g",
            "genkit"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "genkit",
        "name": "Genkit",
        "description": "A framework for building AI-powered applications.",
        "repo": "https://github.com/firebase/genkit/tree/main",
        "tags": [
            "ai",
            "framework",
            "open-source"
        ],
        "command": "npm",
        "baseArgs": [
            "i"
        ],
        "configurable": false
    },
    {
        "id": "mcp",
        "name": "Genkit MCP",
        "description": "Integration between Genkit and the Model Context Protocol (MCP).",
        "repo": "https://github.com/firebase/genkit/tree/main/js/plugins/mcp",
        "tags": [
            "genkit",
            "mcp",
            "plugin"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everything"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "fireproof",
        "name": "Fireproof Database",
        "description": "A simple example database for Model Context Protocol server with CRUD operations",
        "tags": [
            "database",
            "json",
            "api"
        ],
        "repo": "https://github.com/fireproof-storage/mcp-database-server",
        "command": "/path/to/fireproof-mcp/build/index.js",
        "configurable": false
    },
    {
        "id": "kubernetes",
        "name": "Kubernetes",
        "description": "MCP Server that can connect to a Kubernetes cluster and manage it.",
        "tags": [
            "kubernetes",
            "cluster",
            "management"
        ],
        "repo": "https://github.com/Flux159/mcp-server-kubernetes",
        "command": "npx",
        "baseArgs": [
            "mcp-server-kubernetes"
        ],
        "configurable": false
    },
    {
        "id": "mcp-server-commands",
        "name": "MCP Server Commands",
        "description": "Commands for interacting with the Model Context Protocol (MCP) servers",
        "repo": "https://github.com/g0t4/mcp-server-commands",
        "tags": [
            "mcp",
            "server",
            "commands"
        ],
        "command": "npx",
        "baseArgs": [
            "mcp-server-commands"
        ],
        "configurable": false
    },
    {
        "id": "jira-server",
        "name": "Jira MCP Server",
        "description": "Speak to Jira in natural language to get information on and modify your project. Use it with Claude Desktop in combination with a custom README that you will create with project information, so that you can delegate PM tasks.",
        "tags": [
            "jira",
            "project-management",
            "api"
        ],
        "repo": "https://github.com/George5562/Jira-MCP-Server",
        "command": "npm start",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "JIRA_HOST": {
                    "type": "string",
                    "description": "Your Jira instance hostname",
                    "required": true
                },
                "JIRA_EMAIL": {
                    "type": "string",
                    "description": "Your Jira account email",
                    "required": true
                },
                "JIRA_API_TOKEN": {
                    "type": "string",
                    "description": "API token from Atlassian",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "JIRA_HOST": {
                "type": "env",
                "key": "JIRA_HOST"
            },
            "JIRA_EMAIL": {
                "type": "env",
                "key": "JIRA_EMAIL"
            },
            "JIRA_API_TOKEN": {
                "type": "env",
                "key": "JIRA_API_TOKEN"
            }
        }
    },
    {
        "id": "json-mcp",
        "name": "JSON MCP Server",
        "description": "A JSON Model Context Protocol (MCP) server implementation for querying and manipulating JSON data. This server enables LLMs to interact with JSON data through a set of standardized tools.",
        "repo": "https://github.com/GongRzhe/JSON-MCP-Server",
        "tags": [
            "json",
            "mcp",
            "server"
        ],
        "command": "npx",
        "baseArgs": [
            "@gongrzhe/server-json-mcp@1.0.3"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "json": {
                    "type": "object",
                    "description": "Configuration for the JSON server",
                    "required": true,
                    "properties": {
                        "command": {
                            "type": "string",
                            "description": "Prime command to run the server",
                            "required": true
                        },
                        "args": {
                            "type": "array",
                            "description": "Command line arguments for the server",
                            "required": true,
                            "minItems": 1
                        }
                    }
                }
            }
        }
    },
    {
        "id": "travel-planner",
        "name": "Travel Planner MCP Server",
        "description": "A Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.",
        "tags": [
            "travel",
            "maps",
            "google",
            "api"
        ],
        "repo": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server",
        "command": "npx",
        "baseArgs": [
            "@gongrzhe/server-travelplanner-mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GOOGLE_MAPS_API_KEY": {
                    "type": "string",
                    "description": "Your Google Maps API key with the following APIs enabled: Places API, Directions API, Geocoding API, Time Zone API.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GOOGLE_MAPS_API_KEY": {
                "type": "env",
                "key": "GOOGLE_MAPS_API_KEY"
            }
        }
    },
    {
        "id": "mcp-difyworkflow-server",
        "name": "MCP Dify Workflow Server",
        "description": "An MCP server Tools application that implements the query and invocation of Dify workflows, supporting the on-demand operation of multiple custom Dify workflows.",
        "tags": [
            "mcp",
            "dify",
            "workflow",
            "server"
        ],
        "repo": "https://github.com/gotoolkits/mcp-difyworkflow-server",
        "command": "mcp-difyworkflow-server",
        "baseArgs": [
            "-base-url",
            "http://localhost/v1"
        ],
        "env": {
            "DIFY_WORKFLOW_NAME": "workflow-translator,workflow-genImag",
            "DIFY_API_KEYS": "appkey-xxxxxxxxxxxa,appkey-xxxxxxxxxxxb"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "baseUrl": {
                    "type": "string",
                    "description": "The base URL of the Dify platform API server url.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "baseUrl": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "mcp-wecombot-server",
        "name": "MCP WeCom Bot Server",
        "description": "An MCP server application that sends various types of messages to the WeCom group robot.",
        "repo": "https://github.com/gotoolkits/mcp-wecombot-server",
        "command": "mcp-wecombot-server",
        "tags": [],
        "env": {
            "WECOM_BOT_WEBHOOK_KEY": {
                "type": "string",
                "description": "WeCom bot webhook key",
                "required": true
            }
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "WECOM_BOT_WEBHOOK_KEY": {
                    "type": "string",
                    "description": "The webhook key for the WeCom robot",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "WECOM_BOT_WEBHOOK_KEY": {
                "type": "env",
                "key": "WECOM_BOT_WEBHOOK_KEY"
            }
        }
    },
    {
        "id": "notepad-server",
        "name": "Notepad Server",
        "description": "A Model Context Protocol server for note-taking.",
        "tags": [
            "mcp",
            "notepad",
            "notes"
        ],
        "repo": "https://github.com/GuoAccount/notepad-server",
        "command": "node",
        "baseArgs": [
            "/path/to/notepad-server/build/index.js"
        ],
        "configurable": false
    },
    {
        "id": "imessage-query",
        "name": "iMessage Query",
        "description": "An MCP server that provides safe access to your iMessage database through Model Context Protocol (MCP). This server is built with the FastMCP framework and the imessagedb library, enabling LLMs to query and analyze iMessage conversations with proper phone number validation and attachment handling.",
        "tags": [
            "mcp",
            "imessage",
            "database"
        ],
        "repo": "https://github.com/hannesrudolph/imessage-query-fastmcp-mcp-server",
        "command": "uv",
        "baseArgs": [
            "run",
            "--with",
            "fastmcp",
            "fastmcp",
            "run",
            "/path/to/repo/imessage-query-server.py"
        ],
        "configurable": false
    },
    {
        "id": "rag-docs",
        "name": "RAG Documentation MCP Server",
        "description": "An MCP server implementation that provides tools for retrieving and processing documentation through vector search, enabling AI assistants to augment their responses with relevant documentation context.",
        "tags": [
            "documentation",
            "search",
            "ai"
        ],
        "repo": "https://github.com/hannesrudolph/mcp-ragdocs",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@hannesrudolph/mcp-ragdocs"
        ],
        "env": {
            "OPENAI_API_KEY": "",
            "QDRANT_URL": "",
            "QDRANT_API_KEY": ""
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "OPENAI_API_KEY": {
                    "type": "string",
                    "description": "Your OpenAI API key for embeddings generation",
                    "required": true
                },
                "QDRANT_URL": {
                    "type": "string",
                    "description": "URL of your Qdrant vector database instance",
                    "required": true
                },
                "QDRANT_API_KEY": {
                    "type": "string",
                    "description": "API key for authenticating with Qdrant",
                    "required": true
                }
            }
        }
    },
    {
        "id": "sqlite",
        "name": "SQLite Explorer",
        "description": "An MCP server that provides safe, read-only access to SQLite databases through Model Context Protocol (MCP).",
        "tags": [
            "sqlite",
            "database",
            "mcp"
        ],
        "repo": "https://github.com/hannesrudolph/sqlite-explorer-fastmcp-mcp-server",
        "command": "fastmcp",
        "baseArgs": [
            "install",
            "sqlite_explorer.py",
            "--name",
            "SQLite Explorer",
            "-e",
            "SQLITE_DB_PATH=/path/to/db"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "SQLITE_DB_PATH": {
                    "type": "string",
                    "description": "Full path to the SQLite database file you want to explore",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SQLITE_DB_PATH": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "pdf-tools",
        "name": "MCP PDF Tools Server",
        "description": "An MCP (Model Context Protocol) server that provides PDF manipulation tools. This server allows LLMs to perform operations like merging PDFs and extracting pages.",
        "tags": [
            "pdf",
            "mcp",
            "tools"
        ],
        "repo": "https://github.com/hanweg/mcp-pdf-tools",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "PATH_TO\\mcp-pdf-tools"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "filepath": {
                    "type": "string",
                    "description": "Path to the MCP PDF Tools directory",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "filepath": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "ragdocs",
        "name": "RagDocs MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides RAG (Retrieval-Augmented Generation) capabilities using Qdrant vector database and Ollama/OpenAI embeddings. This server enables semantic search and management of documentation through vector similarity.",
        "tags": [
            "mcp",
            "rag",
            "qdrant",
            "embedding"
        ],
        "repo": "https://github.com/heltonteixeira/ragdocs",
        "command": "node",
        "baseArgs": [
            "@mcpservers/ragdocs"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "QDRANT_URL": {
                    "type": "string",
                    "description": "URL of your Qdrant instance",
                    "required": true
                },
                "QDRANT_API_KEY": {
                    "type": "string",
                    "description": "API key for Qdrant Cloud",
                    "required": false
                },
                "EMBEDDING_PROVIDER": {
                    "type": "string",
                    "description": "Choice of embedding provider (\"ollama\" or \"openai\")",
                    "required": false
                },
                "OPENAI_API_KEY": {
                    "type": "string",
                    "description": "OpenAI API key (required if using OpenAI)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "QDRANT_URL": {
                "type": "env",
                "key": "QDRANT_URL"
            },
            "QDRANT_API_KEY": {
                "type": "env",
                "key": "QDRANT_API_KEY"
            },
            "EMBEDDING_PROVIDER": {
                "type": "env",
                "key": "EMBEDDING_PROVIDER"
            },
            "OPENAI_API_KEY": {
                "type": "env",
                "key": "OPENAI_API_KEY"
            }
        }
    },
    {
        "id": "box",
        "name": "Box",
        "description": "File storage and management via Box API",
        "tags": [
            "box",
            "files",
            "api"
        ],
        "repo": "https://github.com/hmk/box-mcp-server",
        "command": "npx",
        "baseArgs": [
            "box-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "BOX_JWT_CONFIG_PATH": {
                    "type": "string",
                    "description": "Path to the Box JWT configuration JSON",
                    "required": true
                },
                "BOX_USER_ID": {
                    "type": "string",
                    "description": "Box user ID for access control",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "BOX_JWT_CONFIG_PATH": {
                "type": "single",
                "position": 0
            },
            "BOX_USER_ID": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "searxng",
        "name": "SearxNG MCP Server",
        "description": "An MCP server implementation that integrates the SearxNG API, providing web search capabilities.",
        "tags": [
            "search",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/ihor-sokoliuk/mcp-searxng",
        "command": "npx",
        "baseArgs": [
            "-y",
            "<full path to mcp-searxng repo>/"
        ],
        "env": {
            "SEARXNG_URL": "YOUR_SEARXNG_INSTANCE_URL"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "SEARXNG_URL": {
                    "type": "string",
                    "description": "The URL of the SearxNG instance.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SEARXNG_URL": {
                "type": "env",
                "key": "SEARXNG_URL"
            }
        }
    },
    {
        "id": "mcp-langchain-ts-client",
        "name": "MCP LangChain TS Client",
        "description": "A LangChain.js client for Model Context Protocol.",
        "tags": [
            "langchain",
            "mcp",
            "typescript",
            "javascript"
        ],
        "repo": "https://github.com/isaacwasserman/mcp-langchain-ts-client",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everything"
        ],
        "configurable": false,
        "configSchema": {},
        "argsMapping": {}
    },
    {
        "id": "snowflake",
        "name": "Snowflake MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation that provides database interaction with Snowflake.",
        "tags": [
            "database",
            "snowflake",
            "mcp"
        ],
        "repo": "https://github.com/isaacwasserman/mcp-snowflake-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-snowflake"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "account": {
                    "type": "string",
                    "description": "Snowflake account name",
                    "required": true
                },
                "warehouse": {
                    "type": "string",
                    "description": "Snowflake warehouse name",
                    "required": true
                },
                "user": {
                    "type": "string",
                    "description": "Snowflake username",
                    "required": true
                },
                "password": {
                    "type": "string",
                    "description": "Snowflake password",
                    "required": true
                },
                "role": {
                    "type": "string",
                    "description": "Snowflake role",
                    "required": true
                },
                "database": {
                    "type": "string",
                    "description": "Snowflake database name",
                    "required": true
                },
                "schema": {
                    "type": "string",
                    "description": "Snowflake schema name",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "account": {
                "type": "single",
                "position": 0
            },
            "warehouse": {
                "type": "single",
                "position": 1
            },
            "user": {
                "type": "single",
                "position": 2
            },
            "password": {
                "type": "single",
                "position": 3
            },
            "role": {
                "type": "single",
                "position": 4
            },
            "database": {
                "type": "single",
                "position": 5
            },
            "schema": {
                "type": "single",
                "position": 6
            }
        }
    },
    {
        "id": "datavis",
        "name": "Data Visualization MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation that provides the LLM an interface for visualizing data using Vega-Lite syntax.",
        "tags": [
            "data",
            "visualization",
            "vega-lite"
        ],
        "repo": "https://github.com/isaacwasserman/mcp-vegalite-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/absolute/path/to/mcp-datavis-server",
            "run",
            "mcp_server_datavis",
            "--output_type",
            "png"
        ],
        "configurable": false,
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            },
            "output_type": {
                "type": "single",
                "position": 5
            }
        }
    },
    {
        "id": "contentful",
        "name": "Contentful MCP Server",
        "description": "An MCP server implementation that integrates with Contentful's Content Management API, providing comprehensive content management capabilities.",
        "tags": [
            "contentful",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/ivo-toby/contentful-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@ivotoby/contentful-management-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Contentful Management API token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "accessToken": {
                "type": "env",
                "key": "CONTENTFUL_MANAGEMENT_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "mcp-reasoner",
        "name": "MCP Reasoner",
        "description": "A reasoning implementation for Claude Desktop that lets you use both Beam Search and Monte Carlo Tree Search (MCTS).",
        "repo": "https://github.com/Jacck/mcp-reasoner",
        "tags": [
            "reasoning",
            "mcts",
            "beam-search"
        ],
        "command": "node",
        "baseArgs": [
            "path/to/mcp-reasoner/dist/index.js"
        ],
        "configurable": false
    },
    {
        "id": "mcp-hub-desktop",
        "name": "MCPHub Desktop",
        "description": "MCPHub Desktop is Model Context Protocol (MCP) servers installer, manager, directory. It's a GUI. It supports install node, uv dependencies with one click, and install/uninstall with one click.",
        "tags": [
            "mcp",
            "desktop",
            "installer"
        ],
        "repo": "https://github.com/Jeamee/MCPHub-Desktop",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-mcphub"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        }
    },
    {
        "id": "linear",
        "name": "Linear MCP Server",
        "description": "A Model Context Protocol server for the Linear API, allowing LLMs to interact with Linear issues.",
        "tags": [
            "linear",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/jerhadf/linear-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-linear"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "LINEAR_API_KEY": {
                    "type": "string",
                    "description": "Your Linear API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "LINEAR_API_KEY": {
                "type": "env",
                "key": "LINEAR_API_KEY"
            }
        }
    },
    {
        "id": "jetbrains",
        "name": "JetBrains MCP Proxy Server",
        "description": "The server proxies requests from client to JetBrains IDE.",
        "repo": "https://github.com/JetBrains/mcp-jetbrains",
        "tags": [
            "proxy",
            "jetbrains",
            "server"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@jetbrains/mcp-proxy"
        ],
        "configurable": false
    },
    {
        "id": "jetbrains",
        "name": "JetBrains MCP Proxy Server",
        "description": "The server proxies requests from client to JetBrains IDE.",
        "tags": [
            "proxy",
            "jetbrains",
            "server"
        ],
        "repo": "https://github.com/JetBrains/mcp-jetbrains",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@jetbrains/mcp-proxy"
        ],
        "env": {
            "IDE_PORT": "<port of IDE's built-in webserver>",
            "HOST": "<host/address of IDE's built-in webserver>",
            "LOG_ENABLED": "true"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "IDE_PORT": {
                    "type": "string",
                    "description": "Port of the IDE's built-in webserver",
                    "required": true
                },
                "HOST": {
                    "type": "string",
                    "description": "Host/address of IDE's built-in webserver",
                    "required": true
                },
                "LOG_ENABLED": {
                    "type": "string",
                    "description": "Enable logging",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "IDE_PORT": {
                "type": "env",
                "key": "IDE_PORT"
            },
            "HOST": {
                "type": "env",
                "key": "HOST"
            },
            "LOG_ENABLED": {
                "type": "env",
                "key": "LOG_ENABLED"
            }
        }
    },
    {
        "id": "fastmcp",
        "name": "FastMCP",
        "description": "The fast, Pythonic way to build MCP servers.",
        "tags": [
            "mcp",
            "python",
            "server"
        ],
        "repo": "https://github.com/jlowin/fastmcp",
        "command": "fastmcp",
        "baseArgs": [
            "run",
            "server.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "dependencies": {
                    "type": "array",
                    "description": "Optional dependencies for your MCP server",
                    "required": false,
                    "minItems": 0
                }
            }
        },
        "argsMapping": {
            "dependencies": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "app-store-connect",
        "name": "App Store Connect MCP Server",
        "description": "A Model Context Protocol (MCP) server for interacting with the App Store Connect API. This server provides tools for managing apps, beta testers, bundle IDs, devices, and capabilities in App Store Connect.",
        "tags": [
            "app-store",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/JoshuaRileyDev/app-store-connect-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@your-org/app-store-connect-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "APP_STORE_CONNECT_KEY_ID": {
                    "type": "string",
                    "description": "Your App Store Connect Key ID",
                    "required": true
                },
                "APP_STORE_CONNECT_ISSUER_ID": {
                    "type": "string",
                    "description": "Your App Store Connect Issuer ID",
                    "required": true
                },
                "APP_STORE_CONNECT_P8_PATH": {
                    "type": "string",
                    "description": "Path to your .p8 private key file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "APP_STORE_CONNECT_KEY_ID": {
                "type": "env",
                "key": "APP_STORE_CONNECT_KEY_ID"
            },
            "APP_STORE_CONNECT_ISSUER_ID": {
                "type": "env",
                "key": "APP_STORE_CONNECT_ISSUER_ID"
            },
            "APP_STORE_CONNECT_P8_PATH": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "simulator",
        "name": "Mac Apps Launcher MCP Server",
        "description": "A Model Context Protocol (MCP) server for launching and managing macOS applications.",
        "tags": [
            "mcp",
            "macos",
            "application-launcher"
        ],
        "repo": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
        "command": "npx",
        "baseArgs": [
            "y",
            "@joshuarileydev/mac-apps-launcher-mcp-server"
        ],
        "configurable": false
    },
    {
        "id": "simulator",
        "name": "iOS Simulator MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides programmatic control over iOS simulators. This server implements the MCP specification to expose simulator functionality through a standardized interface.",
        "tags": [
            "ios",
            "simulator",
            "mcp"
        ],
        "repo": "https://github.com/JoshuaRileyDev/simulator-mcp-server",
        "command": "npx",
        "baseArgs": [
            "y",
            "@joshuarileydev/simulator-mcp-server"
        ],
        "configurable": false,
        "configSchema": {},
        "argsMapping": {}
    },
    {
        "id": "supabase",
        "name": "Supabase MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides programmatic access to the Supabase Management API.",
        "tags": [
            "api",
            "supabase"
        ],
        "repo": "https://github.com/joshuarileydev/supabase-mcp-server",
        "command": "npx",
        "baseArgs": [
            "y",
            "@joshuarileydev/supabase-mcp-server"
        ],
        "env": {
            "SUPABASE_API_KEY": "API_KEY_HERE"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Supabase API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "SUPABASE_API_KEY"
            }
        }
    },
    {
        "id": "financial-analysis-mcp-server",
        "name": "Financial Analysis MCP Server",
        "description": "An MCP server implementation for financial analysis using Alpha Vantage and Financial Modeling Prep APIs.",
        "tags": [
            "finance",
            "api"
        ],
        "repo": "https://github.com/kablewy/financial-analysis-mcp-server",
        "command": "npm",
        "baseArgs": [
            "install"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ALPHA_VANTAGE_API_KEY": {
                    "type": "string",
                    "description": "Alpha Vantage API Key",
                    "required": true
                },
                "FMP_API_KEY": {
                    "type": "string",
                    "description": "Financial Modeling Prep API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "ALPHA_VANTAGE_API_KEY": {
                "type": "env",
                "key": "ALPHA_VANTAGE_API_KEY"
            },
            "FMP_API_KEY": {
                "type": "env",
                "key": "FMP_API_KEY"
            }
        }
    },
    {
        "id": "kagi",
        "name": "Kagi MCP",
        "description": "Interact with Kagi's MCP server and API",
        "tags": [
            "kagi",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/kagisearch/kagimcp",
        "command": "uv",
        "baseArgs": [
            "kagimcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "KAGI_API_KEY": {
                    "type": "string",
                    "description": "Kagi API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "KAGI_API_KEY": {
                "type": "env",
                "key": "KAGI_API_KEY"
            }
        }
    },
    {
        "id": "zotero",
        "name": "Zotero",
        "description": "A Model Context Protocol server for Zotero integration that allows Claude to interact with your Zotero library.",
        "tags": [
            "zotero",
            "library",
            "api"
        ],
        "repo": "https://github.com/kaliaboi/mcp-zotero",
        "command": "npx",
        "baseArgs": [
            "mcp-zotero"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ZOTERO_API_KEY": {
                    "type": "string",
                    "description": "Your Zotero API key.",
                    "required": true
                },
                "ZOTERO_USER_ID": {
                    "type": "string",
                    "description": "Your Zotero user ID.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "ZOTERO_API_KEY": {
                "type": "env",
                "key": "ZOTERO_API_KEY"
            },
            "ZOTERO_USER_ID": {
                "type": "env",
                "key": "ZOTERO_USER_ID"
            }
        }
    },
    {
        "id": "mcp-server-vikingdb",
        "name": "VikingDB MCP server",
        "description": "An MCP server for VikingDB store and search",
        "tags": [
            "vikingdb",
            "database",
            "search"
        ],
        "repo": "https://github.com/KashiwaByte/vikingdb-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "dir to mcp-server-vikingdb",
            "run",
            "mcp-server-vikingdb"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "vikingdb_host": {
                    "type": "string",
                    "description": "The host to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb_region": {
                    "type": "string",
                    "description": "The region to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb_ak": {
                    "type": "string",
                    "description": "The Access Key to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb_sk": {
                    "type": "string",
                    "description": "The Secret Key to use for the VikingDB server.",
                    "required": true
                },
                "collection_name": {
                    "type": "string",
                    "description": "The name of the collection to use.",
                    "required": true
                },
                "index_name": {
                    "type": "string",
                    "description": "The name of the index to use.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "vikingdb_host": {
                "type": "single",
                "position": 4
            },
            "vikingdb_region": {
                "type": "single",
                "position": 6
            },
            "vikingdb_ak": {
                "type": "single",
                "position": 8
            },
            "vikingdb_sk": {
                "type": "single",
                "position": 10
            },
            "collection_name": {
                "type": "single",
                "position": 12
            },
            "index_name": {
                "type": "single",
                "position": 14
            }
        }
    },
    {
        "id": "bluesky",
        "name": "Bluesky Context Server",
        "description": "A simple MCP server that can enable MCP clients to query Bluesky instances.",
        "tags": [],
        "repo": "https://github.com/keturiosakys/bluesky-context-server",
        "command": "/Users/laurynas-fp/.bun/bin/bun",
        "baseArgs": [
            "<path_to_this_directory>/bluesky-context-server/index.ts"
        ],
        "env": {
            "BLUESKY_APP_KEY": "",
            "BLUESKY_IDENTIFIER": ""
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "BLUESKY_APP_KEY": {
                    "type": "string",
                    "description": "Bluesky Application Key",
                    "required": false
                },
                "BLUESKY_IDENTIFIER": {
                    "type": "string",
                    "description": "Bluesky Identifier",
                    "required": false
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "mongodb",
        "name": "MCP MongoDB Server",
        "description": "A Model Context Protocol server that provides access to MongoDB databases. This server enables LLMs to inspect collection schemas and execute read-only queries.",
        "tags": [
            "mongodb",
            "database"
        ],
        "repo": "https://github.com/kiliczsh/mcp-mongo-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "mcp-mongo-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "MongoDB connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "youtube-transcript",
        "name": "YouTube Transcript Server",
        "description": "A Model Context Protocol server that enables retrieval of transcripts from YouTube videos. This server provides direct access to video captions and subtitles through a simple interface.",
        "tags": [
            "youtube",
            "transcript",
            "api"
        ],
        "repo": "https://github.com/kimtaeyoon83/mcp-server-youtube-transcript",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@kimtaeyoon83/mcp-server-youtube-transcript"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "YouTube video URL or video ID",
                    "required": true
                },
                "lang": {
                    "type": "string",
                    "description": "Language code for transcript (e.g., 'ko', 'en')",
                    "required": false,
                    "default": "en"
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "lang": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "mcp-aoai-web-browsing",
        "name": "MCP Server & Client",
        "description": "MCP Server & Client implementation for using Azure OpenAI.",
        "tags": [
            "mcp",
            "azure",
            "openai"
        ],
        "repo": "https://github.com/kimtth/mcp-aoai-web-browsing",
        "command": "python",
        "baseArgs": [
            "chatgui.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AZURE_OPEN_AI_ENDPOINT": {
                    "type": "string",
                    "description": "Azure OpenAI endpoint",
                    "required": true
                },
                "AZURE_OPEN_AI_API_KEY": {
                    "type": "string",
                    "description": "Azure OpenAI API key",
                    "required": true
                },
                "AZURE_OPEN_AI_DEPLOYMENT_MODEL": {
                    "type": "string",
                    "description": "Azure OpenAI deployment model",
                    "required": true
                },
                "AZURE_OPEN_AI_API_VERSION": {
                    "type": "string",
                    "description": "Azure OpenAI API version",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "AZURE_OPEN_AI_ENDPOINT": {
                "type": "env",
                "key": "AZURE_OPEN_AI_ENDPOINT"
            },
            "AZURE_OPEN_AI_API_KEY": {
                "type": "env",
                "key": "AZURE_OPEN_AI_API_KEY"
            },
            "AZURE_OPEN_AI_DEPLOYMENT_MODEL": {
                "type": "env",
                "key": "AZURE_OPEN_AI_DEPLOYMENT_MODEL"
            },
            "AZURE_OPEN_AI_API_VERSION": {
                "type": "env",
                "key": "AZURE_OPEN_AI_API_VERSION"
            }
        }
    },
    {
        "id": "devrev",
        "name": "DevRev MCP Server",
        "description": "A Model Context Protocol server for DevRev. It is used to search and retrieve information using the DevRev APIs.",
        "tags": [
            "devrev",
            "api",
            "search"
        ],
        "repo": "https://github.com/kpsunil97/devrev-mcp-server",
        "command": "uvx",
        "baseArgs": [
            "devrev-mcp"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your DevRev API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "DEVREV_API_KEY"
            }
        }
    },
    {
        "id": "duckdb",
        "name": "DuckDB",
        "description": "A Model Context Protocol (MCP) server implementation for DuckDB, providing database interaction capabilities through MCP tools.",
        "tags": [
            "duckdb",
            "database"
        ],
        "repo": "https://github.com/ktanaka101/mcp-server-duckdb",
        "command": "uvx",
        "baseArgs": [
            "mcp-server-duckdb",
            "--db-path"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "db-path": {
                    "type": "string",
                    "description": "Path to the DuckDB database file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "db-path": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "tmdb",
        "name": "TMDB MCP Server",
        "description": "This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
        "tags": [
            "movie",
            "api",
            "tmdb"
        ],
        "repo": "https://github.com/Laksh-star/mcp-server-tmdb",
        "command": "npm run start",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "TMDB_API_KEY": {
                    "type": "string",
                    "description": "Your TMDB API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "TMDB_API_KEY": {
                "type": "env",
                "key": "TMDB_API_KEY"
            }
        }
    },
    {
        "id": "cfbd-mcp-server",
        "name": "College Football Data MCP Server",
        "description": "An MCP server implementation providing access to college football statistics sourced from the College Football Data API.",
        "tags": [
            "college-football",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/lenwood/cfbd-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/full/path/to/cfbd-mcp-server",
            "run",
            "cfbd-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "CFB_API_KEY": {
                    "type": "string",
                    "description": "College Football Data API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "CFB_API_KEY": {
                "type": "env",
                "key": "CFB_API_KEY"
            }
        }
    },
    {
        "id": "gateway",
        "name": "MCP Server Gateway",
        "description": "A gateway service that bridges the stdio-based Model Context Protocol (MCP) implementation in Claude Desktop with HTTP/SSE-based MCP servers.",
        "tags": [
            "gateway",
            "mcp",
            "claude"
        ],
        "repo": "https://github.com/lightconetech/mcp-gateway",
        "command": "node",
        "baseArgs": [
            "/opt/homebrew/lib/node_modules/@mcphub/gateway/dist/src/mcphub-gateway.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "serverPath": {
                    "type": "string",
                    "description": "Path to the MCP Gateway script",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "serverPath": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "current-time",
        "name": "Current Time",
        "description": "Retrieve the current time from the server",
        "tags": [
            "time",
            "server"
        ],
        "repo": "https://github.com/linux-china/mcp-rs-template",
        "command": "mcp-rs-template",
        "baseArgs": [
            "--mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key for accessing the service",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "API_KEY"
            }
        }
    },
    {
        "id": "glean-server",
        "name": "Glean Server",
        "description": "An MCP server implementation that integrates the Glean API, providing the Search and Chat functions.",
        "tags": [
            "api",
            "search",
            "chat"
        ],
        "repo": "https://github.com/longyi1207/glean-mcp-server",
        "command": "docker",
        "baseArgs": [
            "run",
            "-i",
            "--rm",
            "-e",
            "GLEAN_API_KEY",
            "-e",
            "GLEAN_DOMAIN",
            "glean-server"
        ],
        "env": {
            "GLEAN_API_KEY": "YOUR_API_KEY_HERE",
            "GLEAN_DOMAIN": "YOUR_DOMAIN_HERE"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "GLEAN_API_KEY": {
                    "type": "string",
                    "description": "Your Glean API key",
                    "required": true
                },
                "GLEAN_DOMAIN": {
                    "type": "string",
                    "description": "Your Glean domain",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GLEAN_API_KEY": {
                "type": "env",
                "key": "GLEAN_API_KEY"
            },
            "GLEAN_DOMAIN": {
                "type": "env",
                "key": "GLEAN_DOMAIN"
            }
        }
    },
    {
        "id": "bigquery",
        "name": "BigQuery",
        "description": "A Model Context Protocol server that provides access to BigQuery. This server enables LLMs to inspect database schemas and execute queries.",
        "tags": [
            "bigquery",
            "database"
        ],
        "repo": "https://github.com/LucasHild/mcp-server-bigquery",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "{{PATH_TO_REPO}}",
            "run",
            "mcp-server-bigquery"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The GCP project ID.",
                    "required": true
                },
                "location": {
                    "type": "string",
                    "description": "The GCP location (e.g. europe-west9).",
                    "required": true
                },
                "dataset": {
                    "type": "array",
                    "description": "Only take specific BigQuery datasets into consideration.",
                    "required": false,
                    "minItems": 0
                }
            }
        },
        "argsMapping": {
            "project": {
                "type": "single",
                "position": 4
            },
            "location": {
                "type": "single",
                "position": 6
            },
            "dataset": {
                "type": "spread",
                "position": 8
            }
        }
    },
    {
        "id": "python-pip-mcp",
        "name": "Python Pip MCP",
        "description": "Minimal Example Implementation of an Anthropic MCP Client and Server in Python with Pip.",
        "tags": [
            "python",
            "mcp",
            "example"
        ],
        "repo": "https://github.com/lukeage/python-pip-mcp",
        "command": "python",
        "baseArgs": [
            "mcp_client.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Anthropic API key for accessing the MCP services",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "ANTHROPIC_API_KEY"
            }
        }
    },
    {
        "id": "everything-search",
        "name": "Everything Search",
        "description": "An MCP server that provides fast file searching capabilities across Windows, macOS, and Linux.",
        "tags": [
            "search",
            "files",
            "mcp"
        ],
        "repo": "https://github.com/mamertofabian/mcp-everything-search",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everything-search"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Search query string",
                    "required": true
                },
                "max_results": {
                    "type": "number",
                    "description": "Maximum number of results to return",
                    "required": false
                },
                "match_path": {
                    "type": "boolean",
                    "description": "Match against full path instead of filename only",
                    "required": false
                },
                "match_case": {
                    "type": "boolean",
                    "description": "Enable case-sensitive search",
                    "required": false
                },
                "match_whole_word": {
                    "type": "boolean",
                    "description": "Match whole words only",
                    "required": false
                },
                "match_regex": {
                    "type": "boolean",
                    "description": "Enable regex search",
                    "required": false
                },
                "sort_by": {
                    "type": "number",
                    "description": "Sort order for results",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "query": {
                "type": "single",
                "position": 0
            },
            "max_results": {
                "type": "single",
                "position": 1
            },
            "sort_by": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "codemirror-mcp",
        "name": "CodeMirror MCP",
        "description": "A CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands.",
        "repo": "https://github.com/marimo-team/codemirror-mcp",
        "tags": [
            "codemirror",
            "mcp",
            "editor"
        ],
        "command": "npm",
        "baseArgs": [
            "install",
            "@marimo-team/codemirror-mcp",
            "@modelcontextprotocol/sdk"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "filesystem",
        "name": "Filesystem",
        "description": "Go server implementing Model Context Protocol (MCP) for filesystem operations.",
        "tags": [
            "filesystem",
            "api"
        ],
        "repo": "https://github.com/mark3labs/mcp-filesystem-server",
        "command": "go install",
        "baseArgs": [
            "github.com/mark3labs/mcp-filesystem-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "paths": {
                    "type": "array",
                    "description": "Allowed file system paths",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "paths": {
                "type": "spread",
                "position": 1
            }
        }
    },
    {
        "id": "mcp-go",
        "name": "MCP Go",
        "description": "A Go implementation of the Model Context Protocol (MCP), enabling seamless integration between LLM applications and external data sources and tools.",
        "repo": "https://github.com/mark3labs/mcp-go",
        "tags": [
            "mcp",
            "go",
            "llm"
        ],
        "command": "go",
        "baseArgs": [
            "get",
            "github.com/mark3labs/mcp-go"
        ],
        "configurable": false
    },
    {
        "id": "mcphost",
        "name": "MCPHost",
        "description": "A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP). Currently supports both Claude 3.5 Sonnet and Ollama models.",
        "tags": [
            "mcp",
            "cli",
            "llm"
        ],
        "repo": "https://github.com/mark3labs/mcphost",
        "command": "go",
        "baseArgs": [
            "install",
            "github.com/mark3labs/mcphost@latest"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "mcpServers": {
                    "type": "object",
                    "description": "Configuration for MCP servers",
                    "required": true
                }
            }
        }
    },
    {
        "id": "mcp-gsuite",
        "name": "MCP GSuite",
        "description": "MCP server to interact with Google products.",
        "repo": "https://github.com/MarkusPfundstein/mcp-gsuite",
        "tags": [
            "google",
            "api",
            "gmail",
            "calendar"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "<dir_to>/mcp-gsuite",
            "run",
            "mcp-gsuite"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "gauthFile": {
                    "type": "string",
                    "description": "Path to the OAuth2 client configuration file.",
                    "required": false
                },
                "accountsFile": {
                    "type": "string",
                    "description": "Path to the accounts configuration file.",
                    "required": false
                },
                "credentialsDir": {
                    "type": "string",
                    "description": "Directory to store OAuth credentials.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "gauthFile": {
                "type": "single",
                "position": 2
            },
            "accountsFile": {
                "type": "single",
                "position": 3
            },
            "credentialsDir": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "mcp-obsidian",
        "name": "MCP for Obsidian",
        "description": "MCP server to interact with Obsidian via the Local REST API community plugin.",
        "repo": "https://github.com/MarkusPfundstein/mcp-obsidian",
        "tags": [
            "mcp",
            "obsidian",
            "api"
        ],
        "command": "uvx",
        "baseArgs": [
            "mcp-obsidian"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "OBSIDIAN_API_KEY": {
                    "type": "string",
                    "description": "Obsidian REST API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "OBSIDIAN_API_KEY": {
                "type": "env",
                "key": "OBSIDIAN_API_KEY"
            }
        }
    },
    {
        "id": "skyfire",
        "name": "Skyfire",
        "description": "A Model Context Protocol (MCP) server implementation that interfaces with the Skyfire payment system.",
        "tags": [
            "payment",
            "api"
        ],
        "repo": "https://github.com/MCP-Mirror/0xtotaylor_mcp-server-skyfire",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-skyfire"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "skyfireApiKey": {
                    "type": "string",
                    "description": "Skyfire API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "skyfireApiKey": {
                "type": "env",
                "key": "SKYFIRE_API_KEY"
            }
        }
    },
    {
        "id": "redmine",
        "name": "Redmine MCP Server",
        "description": "This plugin provides a Model Context Protocol server using Server Side Event.",
        "tags": [
            "redmine",
            "mcp",
            "server",
            "protocol"
        ],
        "repo": "https://github.com/MCP-Mirror/9506hqwy_redmine_mcp_server",
        "command": "git",
        "baseArgs": [
            "clone",
            "https://github.com/9506hqwy/redmine_mcp_server.git"
        ],
        "configurable": false
    },
    {
        "id": "todoist",
        "name": "Todoist",
        "description": "An MCP (Model Context Protocol) server implementation that integrates Claude with Todoist, enabling natural language task management.",
        "tags": [
            "todoist",
            "task-management",
            "integration"
        ],
        "repo": "https://github.com/abhiz123/todoist-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@abhiz123/todoist-mcp-server"
        ],
        "env": {
            "TODOIST_API_TOKEN": "your_api_token_here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Your Todoist API token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiToken": {
                "type": "env",
                "key": "TODOIST_API_TOKEN"
            }
        }
    },
    {
        "id": "kagi-server",
        "name": "Kagi Server",
        "description": "MCP server for Kagi API integration",
        "tags": [
            "kagi",
            "api",
            "search"
        ],
        "repo": "https://github.com/MCP-Mirror/ac3xx_mcp-servers-kagi",
        "command": "node",
        "baseArgs": [
            "/path/to/kagi-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "KAGI_API_KEY": {
                    "type": "string",
                    "description": "Kagi API key for authentication",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "KAGI_API_KEY": {
                "type": "env",
                "key": "KAGI_API_KEY"
            }
        }
    },
    {
        "id": "mcp-proxy",
        "name": "MCP Proxy Server",
        "description": "An MCP proxy server that aggregates and serves multiple MCP resource servers through a single interface.",
        "tags": [
            "mcp",
            "proxy",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/adamwattis_mcp-proxy-server",
        "command": "node",
        "baseArgs": [
            "/path/to/mcp-proxy-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "servers": {
                    "type": "array",
                    "description": "List of MCP servers to connect to.",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "servers": {
                "type": "spread",
                "position": 0
            }
        }
    },
    {
        "id": "gmail",
        "name": "Gmail MCP Server",
        "description": "An MCP (Model Context Protocol) server that provides Gmail integration capabilities to MCP clients like Claude Desktop.",
        "tags": [
            "gmail",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/MCP-Mirror/ajbr0wn_gmail-mcp-server",
        "command": "/path/to/conda/envs/mcp-gmail/bin/python",
        "baseArgs": [
            "-m",
            "gmail_mcp_server.server"
        ],
        "env": {
            "PYTHONPATH": "/path/to/gmail-mcp-server/src",
            "GMAIL_CREDENTIALS_FILE": "/path/to/credentials.json",
            "GMAIL_TOKEN_FILE": "/path/to/token.json"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "GMAIL_CREDENTIALS_FILE": {
                    "type": "string",
                    "description": "Path to your Google OAuth credentials file",
                    "required": true
                },
                "GMAIL_TOKEN_FILE": {
                    "type": "string",
                    "description": "Path where the authentication token will be saved",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GMAIL_CREDENTIALS_FILE": {
                "type": "env",
                "key": "GMAIL_CREDENTIALS_FILE"
            },
            "GMAIL_TOKEN_FILE": {
                "type": "env",
                "key": "GMAIL_TOKEN_FILE"
            }
        }
    },
    {
        "id": "google-search",
        "name": "Google Custom Search",
        "description": "A Model Context Protocol (MCP) server that provides web search capabilities through Google's Custom Search API. This server enables Language Learning Models (LLMs) to perform web searches using a standardized interface.",
        "tags": [
            "google",
            "search",
            "api"
        ],
        "repo": "https://github.com/MCP-Mirror/alexatnordnet_mcp-google-custom-search-server",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/mcp-google-custom-search-server/build/index.js"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "GOOGLE_API_KEY": {
                    "type": "string",
                    "description": "Your Google Custom Search API key",
                    "required": true
                },
                "GOOGLE_SEARCH_ENGINE_ID": {
                    "type": "string",
                    "description": "Your Custom Search Engine ID",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GOOGLE_API_KEY": {
                "type": "env",
                "key": "GOOGLE_API_KEY"
            },
            "GOOGLE_SEARCH_ENGINE_ID": {
                "type": "env",
                "key": "GOOGLE_SEARCH_ENGINE_ID"
            }
        }
    },
    {
        "id": "notes-server",
        "name": "Notes Server",
        "description": "A JSON-RPC 2.0 compliant server implementing the Model Context Protocol (MCP) for note management (as an example)",
        "tags": [
            "json-rpc",
            "mcp",
            "note management"
        ],
        "repo": "https://github.com/MCP-Mirror/AndrewDonelson_go-mcp-server-service",
        "command": "./bin/dev/<platform>/notes-server",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "playwright",
        "name": "MCP Server Playwright",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Playwright.",
        "tags": [
            "automation",
            "browser",
            "playwright"
        ],
        "repo": "https://github.com/Automata-Labs-team/MCP-Server-Playwright",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@automatalabs/mcp-server-playwright"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "clojars-deps-server",
        "name": "Clojars MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides tools for fetching dependency information from Clojars, the Clojure community's artifact repository.",
        "tags": [
            "clojars",
            "mcp",
            "dependency"
        ],
        "repo": "https://github.com/MCP-Mirror/Bigsy_Clojars-MCP-Server",
        "command": "node",
        "baseArgs": [
            "/path/to/clojars-deps-server/build/index.js"
        ],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "maven-deps-server",
        "name": "Maven Dependencies MCP Server",
        "description": "An MCP server that provides tools for checking Maven dependency versions.",
        "tags": [
            "maven",
            "dependencies",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/Bigsy_maven-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/maven-deps-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "prometheus",
        "name": "MCP Server for Prometheus",
        "description": "A Model Context Protocol (MCP) server for retrieving data from Prometheus databases. This MCP server enables Large Language Models (LLMs) to invoke tool functions that retrieve and analyze vast amounts of metric data, search metric usage, execute complex queries, and perform other related tasks through pre-defined routes with enhanced control over usage.",
        "tags": [
            "prometheus",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/CaesarYangs_prometheus_mcp_server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/prometheus_mcp_server",
            "run",
            "server.py"
        ],
        "env": {
            "PROMETHEUS_HOST": "http://localhost:9090"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "Directory path to the MCP server",
                    "required": true
                },
                "prometheusHost": {
                    "type": "string",
                    "description": "Prometheus server host URL",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            },
            "prometheusHost": {
                "type": "env",
                "key": "PROMETHEUS_HOST"
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "birdnet",
        "name": "BirdNet-Pi MCP Server",
        "description": "A Python-based Model Context Protocol (MCP) server for BirdNet-Pi integration.",
        "tags": [
            "birdnet",
            "mcp",
            "server",
            "python"
        ],
        "repo": "https://github.com/MCP-Mirror/DMontgomery40_mcp-local-server",
        "command": "python",
        "baseArgs": [
            "server.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "BIRDNET_DETECTIONS_FILE": {
                    "type": "string",
                    "description": "Path to detections JSON file",
                    "required": false
                },
                "BIRDNET_AUDIO_DIR": {
                    "type": "string",
                    "description": "Path to audio files directory",
                    "required": false
                },
                "BIRDNET_REPORT_DIR": {
                    "type": "string",
                    "description": "Path to reports directory",
                    "required": false
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "meta-mcp-server",
        "name": "Meta MCP Server",
        "description": "MCP Server that Creates MCP Servers. Automated and dynamic server generation with error handling and debugging support.",
        "tags": [
            "mcp",
            "server",
            "automated",
            "dynamic"
        ],
        "repo": "https://github.com/MCP-Mirror/DMontgomery40_meta-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "meta-mcp-server"
        ],
        "configurable": false
    },
    {
        "id": "huntress",
        "name": "Huntress API MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides tools for interacting with the Huntress API.",
        "tags": [
            "huntress",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/MCP-Mirror/DynamicEndpoints_huntress-mcp-server",
        "command": "node",
        "baseArgs": [
            "path/to/huntress-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "HUNTRESS_API_KEY": {
                    "type": "string",
                    "description": "Your Huntress API Key",
                    "required": true
                },
                "HUNTRESS_API_SECRET": {
                    "type": "string",
                    "description": "Your Huntress API Secret Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "env": {
                "HUNTRESS_API_KEY": {
                    "type": "env",
                    "key": "HUNTRESS_API_KEY"
                },
                "HUNTRESS_API_SECRET": {
                    "type": "env",
                    "key": "HUNTRESS_API_SECRET"
                }
            }
        }
    },
    {
        "id": "kubernetes",
        "name": "Kubernetes",
        "description": "MCP Server that can connect to a Kubernetes cluster and manage it.",
        "tags": [
            "kubernetes"
        ],
        "repo": "https://github.com/MCP-Mirror/Flux159_mcp-server-kubernetes",
        "command": "npx",
        "baseArgs": [
            "mcp-server-kubernetes"
        ],
        "configurable": false
    },
    {
        "id": "mcp-server-modal",
        "name": "MCP Server Modal",
        "description": "An MCP Server that allows users to deploy python scripts to modal.",
        "repo": "https://github.com/MCP-Mirror/Flux159_mcp-server-modal",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/mcp-server-modal",
            "run",
            "modal-server"
        ],
        "configurable": false
    },
    {
        "id": "needle_mcp",
        "name": "Needle MCP",
        "description": "An MCP server to manage documents and perform semantic search through Claude chat using Needle.",
        "tags": [
            "mcp",
            "needle",
            "search"
        ],
        "repo": "https://github.com/MCP-Mirror/JANHMS_needle-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/needle-mcp",
            "run",
            "needle-mcp"
        ],
        "env": {
            "NEEDLE_API_KEY": "your_needle_api_key"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "NEEDLE_API_KEY": {
                    "type": "string",
                    "description": "Your Needle API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "app-store-connect",
        "name": "App Store Connect MCP Server",
        "description": "A Model Context Protocol (MCP) server for interacting with the App Store Connect API. This server provides tools for managing apps, beta testers, bundle IDs, devices, and capabilities in App Store Connect.",
        "tags": [
            "app",
            "management",
            "api"
        ],
        "repo": "https://github.com/MCP-Mirror/JoshuaRileyDev_app-store-connect-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@your-org/app-store-connect-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "APP_STORE_CONNECT_KEY_ID": {
                    "type": "string",
                    "description": "Your App Store Connect Key ID",
                    "required": true
                },
                "APP_STORE_CONNECT_ISSUER_ID": {
                    "type": "string",
                    "description": "Your App Store Connect Issuer ID",
                    "required": true
                },
                "APP_STORE_CONNECT_P8_PATH": {
                    "type": "string",
                    "description": "Path to your .p8 private key file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "APP_STORE_CONNECT_KEY_ID": {
                "type": "env",
                "key": "APP_STORE_CONNECT_KEY_ID"
            },
            "APP_STORE_CONNECT_ISSUER_ID": {
                "type": "env",
                "key": "APP_STORE_CONNECT_ISSUER_ID"
            },
            "APP_STORE_CONNECT_P8_PATH": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "simulator",
        "name": "iOS Simulator MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides programmatic control over iOS simulators. This server implements the MCP specification to expose simulator functionality through a standardized interface.",
        "tags": [
            "ios",
            "mcp",
            "simulator"
        ],
        "repo": "https://github.com/MCP-Mirror/JoshuaRileyDev_simulator-mcp-server",
        "command": "npx",
        "baseArgs": [
            "y",
            "@joshuarileydev/simulator-mcp-server"
        ],
        "configurable": false
    },
    {
        "id": "supabase",
        "name": "Supabase MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides programmatic access to the Supabase Management API. This server allows AI models and other clients to manage Supabase projects and organizations through a standardized interface.",
        "tags": [
            "supabase",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/MCP-Mirror/JoshuaRileyDev_supabase-mcp-server",
        "command": "npx",
        "baseArgs": [
            "y",
            "@joshuarileydev/supabase-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "SUPABASE_API_KEY": {
                    "type": "string",
                    "description": "Supabase API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SUPABASE_API_KEY": {
                "type": "env",
                "key": "SUPABASE_API_KEY"
            }
        }
    },
    {
        "id": "mcp-server-vikingdb",
        "name": "VikingDB MCP Server",
        "description": "An MCP server for VikingDB store and search.",
        "tags": [
            "vikingdb",
            "mcp",
            "database"
        ],
        "repo": "https://github.com/MCP-Mirror/KashiwaByte_vikingdb-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "dir to mcp-server-vikingdb",
            "run",
            "mcp-server-vikingdb"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "vikingdb-host": {
                    "type": "string",
                    "description": "The host to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb-region": {
                    "type": "string",
                    "description": "The region to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb-ak": {
                    "type": "string",
                    "description": "The Access Key to use for the VikingDB server.",
                    "required": true
                },
                "vikingdb-sk": {
                    "type": "string",
                    "description": "The Secret Key to use for the VikingDB server.",
                    "required": true
                },
                "collection-name": {
                    "type": "string",
                    "description": "The name of the collection to use.",
                    "required": true
                },
                "index-name": {
                    "type": "string",
                    "description": "The name of the index to use.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "vikingdb-host": {
                "type": "single",
                "position": 4
            },
            "vikingdb-region": {
                "type": "single",
                "position": 6
            },
            "vikingdb-ak": {
                "type": "single",
                "position": 8
            },
            "vikingdb-sk": {
                "type": "single",
                "position": 10
            },
            "collection-name": {
                "type": "single",
                "position": 12
            },
            "index-name": {
                "type": "single",
                "position": 14
            }
        }
    },
    {
        "id": "tmdb",
        "name": "TMDB MCP Server",
        "description": "This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.",
        "repo": "https://github.com/MCP-Mirror/Laksh-star_mcp-server-tmdb",
        "tags": [
            "tmdb",
            "movies",
            "api"
        ],
        "command": "npm run build",
        "baseArgs": [
            "git clone [repository-url]",
            "cd mcp-server-tmdb",
            "npm install"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "TMDB API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "TMDB_API_KEY"
            }
        }
    },
    {
        "id": "dockerized-mcpaper-server",
        "name": "Dockerized MCPaper Server",
        "description": "A Dockerized version of the MCPaper server for easy deployment",
        "tags": [
            "docker",
            "mcpaper",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/LeoMainini_dockerized-mcpaper-server",
        "command": "docker-compose",
        "baseArgs": [
            "up",
            "-d"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "databaseUrl": {
                    "type": "string",
                    "description": "Connection URL for the database",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "databaseUrl": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "linkup",
        "name": "Linkup for Claude",
        "description": "Internet Access for Your AI Assistant",
        "repo": "https://github.com/MCP-Mirror/LinkupPlatform_python-mcp-server",
        "tags": [
            "internet",
            "ai",
            "access"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-linkup"
        ],
        "configurable": false
    },
    {
        "id": "bigquery",
        "name": "BigQuery",
        "description": "A Model Context Protocol server that provides access to BigQuery. This server enables LLMs to inspect database schemas and execute queries.",
        "tags": [
            "bigquery",
            "database",
            "gcp"
        ],
        "repo": "https://github.com/MCP-Mirror/LucasHild_mcp-server-bigquery",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "{{PATH_TO_REPO}}",
            "run",
            "mcp-server-bigquery",
            "--project",
            "{{GCP_PROJECT_ID}}",
            "--location",
            "{{GCP_LOCATION}}"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "project": {
                    "type": "string",
                    "description": "The GCP project ID",
                    "required": true
                },
                "location": {
                    "type": "string",
                    "description": "The GCP location (e.g. europe-west9)",
                    "required": true
                },
                "dataset": {
                    "type": "array",
                    "description": "Specific BigQuery datasets to consider",
                    "required": false,
                    "minItems": 0
                }
            }
        },
        "argsMapping": {
            "project": {
                "type": "single",
                "position": 4
            },
            "location": {
                "type": "single",
                "position": 6
            },
            "dataset": {
                "type": "spread",
                "position": 8
            }
        }
    },
    {
        "id": "raygun",
        "name": "Raygun MCP Server",
        "description": "MCP Server for Raygun's API V3 endpoints for interacting with your Crash Reporting and Real User Monitoring applications. This server provides comprehensive access to Raygun's API features through the Model Context Protocol.",
        "tags": [
            "raygun",
            "api"
        ],
        "repo": "https://github.com/MCP-Mirror/MindscapeHQ_mcp-server-raygun",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@raygun.io/mcp-server-raygun"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Raygun PAT token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "env",
                "key": "RAYGUN_PAT_TOKEN"
            }
        }
    },
    {
        "id": "cli-mcp-server",
        "name": "CLI MCP Server",
        "description": "A secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with comprehensive security features.",
        "repo": "https://github.com/MCP-Mirror/MladenSU_cli-mcp-server",
        "tags": [
            "mcp",
            "cli",
            "security"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "<path/to/the/repo>/cli-mcp-server",
            "run",
            "cli-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ALLOWED_DIR": {
                    "type": "string",
                    "description": "Base directory for command execution",
                    "required": true
                },
                "ALLOWED_COMMANDS": {
                    "type": "string",
                    "description": "Comma-separated list of allowed commands",
                    "required": true,
                    "default": "ls,cat,pwd,echo"
                },
                "ALLOWED_FLAGS": {
                    "type": "string",
                    "description": "Comma-separated list of allowed flags",
                    "required": true,
                    "default": "-l,-a,--help,--version"
                },
                "MAX_COMMAND_LENGTH": {
                    "type": "integer",
                    "description": "Maximum command string length",
                    "required": true,
                    "default": 1024
                },
                "COMMAND_TIMEOUT": {
                    "type": "integer",
                    "description": "Command execution timeout in seconds",
                    "required": true,
                    "default": 30
                }
            }
        },
        "argsMapping": {
            "ALLOWED_DIR": {
                "type": "single",
                "position": 1
            },
            "ALLOWED_COMMANDS": {
                "type": "single",
                "position": 2
            },
            "ALLOWED_FLAGS": {
                "type": "single",
                "position": 3
            },
            "MAX_COMMAND_LENGTH": {
                "type": "single",
                "position": 4
            },
            "COMMAND_TIMEOUT": {
                "type": "single",
                "position": 5
            }
        }
    },
    {
        "id": "nikogenia-java-mcplugin-challengeserverbungeeplugin",
        "name": "Nikogenia Java-MCPlugin Challenge Server Bungee Plugin",
        "description": "The Java Minecraft Plugin (BungeeCord) for the Challenge Server.",
        "tags": [
            "minecraft",
            "bungeecord",
            "plugin"
        ],
        "repo": "https://github.com/MCP-Mirror/Nikogenia_Java-MCPlugin-ChallengeServerBungeePlugin",
        "command": "git",
        "baseArgs": [
            "clone"
        ],
        "configurable": false
    },
    {
        "id": "mc_server",
        "name": "MCpp Server",
        "description": "High-performance Minecraft server developed entirely in C++.",
        "tags": [
            "minecraft",
            "server",
            "cpp"
        ],
        "repo": "https://github.com/Noeli14/MCppServer",
        "command": "./MCppServer",
        "configurable": true,
        "configSchema": {
            "properties": {
                "onlineMode": {
                    "type": "boolean",
                    "description": "Whether to enable online mode for player authentication",
                    "required": true
                },
                "worldFolder": {
                    "type": "string",
                    "description": "Directory for the world folder",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "worldFolder": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "cmd",
        "name": "CMD MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation for executing CMD commands on both Windows and Linux, as well as allowing SSH connections. This server allows you to integrate command-line operations with MCP-compatible applications.",
        "tags": [
            "mcp",
            "cmd",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/PhialsBasement_CMD-MCP-Server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@smithery/cli",
            "install",
            "server-cmd"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "xcode-mcp-server",
        "name": "Xcode MCP Server",
        "description": "A Model Context Protocol server for building Xcode projects directly from LLM applications",
        "tags": [
            "xcode",
            "build",
            "mcp"
        ],
        "repo": "https://github.com/MCP-Mirror/PolarVista_Xcode-mcp-server",
        "command": "npm run",
        "baseArgs": [
            "start",
            "/path/to/build/logs/directory"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "projectPath": {
                    "type": "string",
                    "description": "Path to the .xcodeproj or .xcworkspace",
                    "required": true
                },
                "scheme": {
                    "type": "string",
                    "description": "Build scheme name",
                    "required": true
                },
                "configuration": {
                    "type": "string",
                    "description": "Build configuration (Debug/Release, defaults to Debug)",
                    "required": false
                },
                "destination": {
                    "type": "string",
                    "description": "Build destination (defaults to \"platform=iOS Simulator,name=iPhone 15 Pro\")",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "projectPath": {
                "type": "single",
                "position": 0
            },
            "scheme": {
                "type": "single",
                "position": 1
            },
            "configuration": {
                "type": "optional",
                "position": 2
            },
            "destination": {
                "type": "optional",
                "position": 3
            }
        }
    },
    {
        "id": "mcpe-server-proxy",
        "name": "MCPE Server Proxy",
        "description": "This helps with joining MCPI-Revival servers on MCPE (0.6.1), MCPI, or old versions of MCPI-Revival.",
        "tags": [
            "mcpe",
            "proxy",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/Red-exe-Engineer_MCPE-Server-Proxy",
        "command": "python",
        "baseArgs": [
            "main.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "preset": {
                    "type": "string",
                    "description": "Server address preset",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "preset": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "terminal",
        "name": "Terminal",
        "description": "Terminal server implementation for Model Context Protocol (MCP). Provides secure and controlled access to terminal commands and npm operations.",
        "tags": [
            "terminal",
            "commands",
            "npm"
        ],
        "repo": "https://github.com/MCP-Mirror/RichardTheuws_mcp-terminal-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-terminal"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "allowedCommands": {
                    "type": "array",
                    "description": "Commands allowed to execute",
                    "required": true,
                    "minItems": 1
                },
                "defaultTimeout": {
                    "type": "number",
                    "description": "Default timeout for commands in milliseconds",
                    "required": true
                },
                "defaultCwd": {
                    "type": "string",
                    "description": "Default working directory",
                    "required": true
                },
                "environmentVariables": {
                    "type": "object",
                    "description": "Environment variables for command execution",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "allowedCommands": {
                "type": "spread",
                "position": 0
            },
            "defaultTimeout": {
                "type": "single",
                "position": 1
            },
            "defaultCwd": {
                "type": "single",
                "position": 2
            },
            "environmentVariables": {
                "type": "spread",
                "position": 3
            }
        }
    },
    {
        "id": "windows-cli",
        "name": "Windows CLI MCP Server",
        "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH.",
        "tags": [
            "windows",
            "cli",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/SimonB97_win-cli-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@simonb97/server-win-cli"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "config": {
                    "type": "object",
                    "description": "Server configuration settings",
                    "required": true
                }
            }
        }
    },
    {
        "id": "jewish_library",
        "name": "Jewish Library MCP Server",
        "description": "An MCP (Model Context Protocol) server that provides powerful search capabilities for Jewish texts and literature.",
        "tags": [
            "mcp",
            "jewish",
            "library",
            "search"
        ],
        "repo": "https://github.com/MCP-Mirror/Sivan22_mcp-otzaria-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "your/path/to/directory",
            "run",
            "jewish_library"
        ],
        "env": {
            "PYTHONIOENCODING": "utf-8"
        },
        "configurable": false
    },
    {
        "id": "smallcloud-mcp-server",
        "name": "SmallCloud MCP Server",
        "description": "SmallCloud MCP Server Demonstration of an Anthropic MCP server using the Model Context Protocol SDK by Anthropic. For use with Claude Desktop and other MCP Hosts.",
        "repo": "https://github.com/MCP-Mirror/SmallCloudCo_smallcloud-mcp-server",
        "tags": [
            "mcp",
            "server",
            "demo"
        ],
        "command": "node",
        "baseArgs": [
            "index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "configPath": {
                    "type": "string",
                    "description": "Path to the configuration for Claude Desktop",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "configPath": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "strongapps_mcpe_servers",
        "name": "StrongApps MCPE Servers",
        "description": "Open Source Website where you can view MCPE Server.",
        "tags": [],
        "repo": "https://github.com/MCP-Mirror/StrongApps_MCPE_servers",
        "command": "",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "aira",
        "name": "Aira MCP Server",
        "description": "A Model Context Protocol server for creating commit messages from git staged files",
        "tags": [
            "git",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/Sunwood-ai-labs_aira-mcp-server",
        "command": "node",
        "baseArgs": [
            "path/to/aira-mcp-server/build/index.js"
        ],
        "configurable": false
    },
    {
        "id": "github-kanban",
        "name": "GitHub Kanban MCP Server",
        "description": "GitHub\u306eissue\u3092\u30ab\u30f3\u30d0\u30f3\u30dc\u30fc\u30c9\u5f62\u5f0f\u3067\u7ba1\u7406\u3057\u3001LLM\u306e\u30bf\u30b9\u30af\u7ba1\u7406\u3092\u52b9\u7387\u5316\u3059\u308b\u305f\u3081\u306eModel Context Protocol\uff08MCP\uff09\u30b5\u30fc\u30d0\u30fc\u3067\u3059\u3002",
        "tags": [
            "github",
            "kanban",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/MCP-Mirror/Sunwood-ai-labs_github-kanban-mcp-server",
        "command": "github-kanban-mcp-server",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "repo": {
                    "type": "string",
                    "description": "GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u540d",
                    "required": true
                },
                "state": {
                    "type": "string",
                    "description": "issue\u306e\u72b6\u614b\uff08'open', 'closed', 'all'\uff09"
                },
                "labels": {
                    "type": "array",
                    "description": "\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u30e9\u30d9\u30eb\u306e\u914d\u5217"
                }
            }
        },
        "argsMapping": {
            "repo": {
                "type": "single",
                "position": 0
            },
            "state": {
                "type": "single",
                "position": 1
            },
            "labels": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "weather_service",
        "name": "Weather Service",
        "description": "A simple note-saving system implementing customizable note access and storage.",
        "tags": [
            "note",
            "python",
            "service"
        ],
        "repo": "https://github.com/MCP-Mirror/Sunwood-ai-labs_mcp-weather-service-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:\\Prj\\weather_service",
            "run"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the note",
                    "required": true
                },
                "content": {
                    "type": "string",
                    "description": "Content of the note",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "name": {
                "type": "single",
                "position": 1
            },
            "content": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "uniprot",
        "name": "UniProt MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides access to UniProt protein information. This server allows AI assistants to fetch protein function and sequence information directly from UniProt.",
        "tags": [
            "protein",
            "api",
            "uniprot"
        ],
        "repo": "https://github.com/MCP-Mirror/TakumiY235_uniprot-mcp-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "path/to/uniprot-mcp-server",
            "run",
            "uniprot-mcp-server"
        ],
        "configurable": false
    },
    {
        "id": "current-time",
        "name": "MCP Rust CLI server template",
        "description": "A template to implement MCP CLI server in Rust.",
        "repo": "https://github.com/MCP-Mirror/TeamDman_mcp-server-hello",
        "tags": [
            "mcp",
            "rust",
            "cli",
            "server"
        ],
        "command": "mcp-rs-template",
        "baseArgs": [
            "--mcp"
        ],
        "env": {
            "API_KEY": "xxxx"
        },
        "configurable": true,
        "argsMapping": {}
    },
    {
        "id": "tavily-search",
        "name": "Tavily Search MCP Server",
        "description": "A MCP server project that uses the Tavily API to perform searches based on specified queries.",
        "tags": [
            "tavily",
            "search",
            "api"
        ],
        "repo": "https://github.com/Tomatio13/mcp-server-tavily",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:\\your_path\\mcp-server-tavily",
            "run",
            "tavily-search"
        ],
        "env": {
            "TAVILY_API_KEY": "YOUR_TAVILY_API_KEY",
            "PYTHONIOENCODING": "utf-8"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Search query",
                    "required": true
                },
                "search_depth": {
                    "type": "string",
                    "description": "Search depth (basic or advanced)",
                    "enum": [
                        "basic",
                        "advanced"
                    ]
                }
            }
        },
        "argsMapping": {
            "query": {
                "type": "single",
                "position": 0
            },
            "search_depth": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "kusto",
        "name": "Kusto MCP Server",
        "description": "A mcp server that provides access to Azure Data Explorer (ADX) clusters.",
        "tags": [
            "azure",
            "data-explorer",
            "kusto"
        ],
        "repo": "https://github.com/MCP-Mirror/ZZZHDW_mcp-server-kusto",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "{{PATH_TO_PROJECT}}\\mcp-server-kusto\\src\\mcp_server_kusto",
            "run",
            "mcp-server-kusto",
            "--cluster",
            "{{ADX_CLUSTER_URL}}"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "clusterUrl": {
                    "type": "string",
                    "description": "The URL of the Azure Data Explorer cluster.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "clusterUrl": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "mcp-server-chatsum",
        "name": "MCP Server Chatsum",
        "description": "This MCP Server is used to summarize your chat messages.",
        "tags": [],
        "repo": "https://github.com/chatmcp/mcp-server-chatsum",
        "command": "path-to/bin/node",
        "baseArgs": [
            "path-to/mcp-server-chatsum/build/index.js"
        ],
        "env": {
            "CHAT_DB_PATH": "path-to/mcp-server-chatsum/chatbot/data/chat.db"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "CHAT_DB_PATH": {
                    "type": "string",
                    "description": "Path to the chat database",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "CHAT_DB_PATH": {
                "type": "env",
                "key": "CHAT_DB_PATH"
            }
        }
    },
    {
        "id": "mcp-server-chatsum",
        "name": "MCP Server Chatsum",
        "description": "This MCP Server is used to summarize your chat messages.",
        "repo": "https://github.com/chatmcp/mcp-server-chatsum",
        "tags": [
            "mcp",
            "chat",
            "summarize"
        ],
        "command": "path-to/bin/node",
        "baseArgs": [
            "path-to/mcp-server-chatsum/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "CHAT_DB_PATH": {
                    "type": "string",
                    "description": "Path to the chat database file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "CHAT_DB_PATH": {
                "type": "env",
                "key": "CHAT_DB_PATH"
            }
        }
    },
    {
        "id": "mcp-badges",
        "name": "Model Context Protocol Badges",
        "description": "Quickly highlight your MCP project with clear, eye-catching badges",
        "repo": "https://github.com/mcpx-dev/mcp-badges",
        "tags": [
            "mcp",
            "badges"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-github"
        ],
        "configurable": false
    },
    {
        "id": "screenpipe",
        "name": "ScreenPipe",
        "description": "Library & platform to build, distribute, monetize AI apps that have the full context",
        "tags": [
            "ai",
            "app",
            "os"
        ],
        "repo": "https://github.com/mediar-ai/screenpipe",
        "command": "screenpipe",
        "configurable": true
    },
    {
        "id": "meilisearch",
        "name": "Meilisearch",
        "description": "A Model Context Protocol (MCP) server for interacting with Meilisearch through LLM interfaces.",
        "repo": "https://github.com/meilisearch/meilisearch-mcp",
        "tags": [
            "mcp",
            "search",
            "database"
        ],
        "command": "python",
        "baseArgs": [
            "-m",
            "src.meilisearch_mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Meilisearch server URL",
                    "required": true
                },
                "api_key": {
                    "type": "string",
                    "description": "Meilisearch API key",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "api_key": {
                "type": "env",
                "key": "MEILI_MASTER_KEY"
            }
        }
    },
    {
        "id": "golang-mcp-server",
        "name": "MCP Golang",
        "description": "An unofficial implementation of the Model Context Protocol in Go.",
        "tags": [
            "golang",
            "mcp"
        ],
        "repo": "https://github.com/metoro-io/mcp-golang",
        "command": "<your path to golang MCP server go executable>",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "metoro-mcp-server",
        "name": "Metoro MCP Server",
        "description": "This repository contains the Metoro MCP (Model Context Protocol) Server. This MCP Server allows you to interact with your Kubernetes cluster via the Claude Desktop App.",
        "tags": [
            "mcp",
            "kubernetes",
            "server"
        ],
        "repo": "https://github.com/metoro-io/metoro-mcp-server",
        "command": "go",
        "baseArgs": [
            "build",
            "-o",
            "metoro-mcp-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "METORO_AUTH_TOKEN": {
                    "type": "string",
                    "description": "Metoro authentication token",
                    "required": true
                },
                "METORO_API_URL": {
                    "type": "string",
                    "description": "Metoro API base URL",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "METORO_AUTH_TOKEN": {
                "type": "env",
                "key": "METORO_AUTH_TOKEN"
            },
            "METORO_API_URL": {
                "type": "env",
                "key": "METORO_API_URL"
            }
        }
    },
    {
        "id": "raygun",
        "name": "Raygun",
        "description": "MCP Server for Raygun's API V3 endpoints for interacting with your Crash Reporting and Real User Monitoring applications.",
        "tags": [
            "raygun",
            "api"
        ],
        "repo": "https://github.com/MindscapeHQ/mcp-server-raygun",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@raygun.io/mcp-server-raygun"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "RAYGUN_PAT_TOKEN": {
                    "type": "string",
                    "description": "Your Raygun PAT token",
                    "required": true
                },
                "SOURCEMAP_ALLOWED_DIRS": {
                    "type": "array",
                    "description": "Comma-separated list of directories allowed for source map operations",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "RAYGUN_PAT_TOKEN": {
                "type": "env",
                "key": "RAYGUN_PAT_TOKEN"
            },
            "SOURCEMAP_ALLOWED_DIRS": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "google-search",
        "name": "Google Search MCP Server",
        "description": "An MCP (Model Context Protocol) server that provides Google search capabilities and webpage content analysis tools.",
        "tags": [
            "google",
            "search",
            "api"
        ],
        "repo": "https://github.com/mixelpixx/GoogleSearch_McpServer",
        "command": "npm",
        "baseArgs": [
            "run",
            "start:all"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "api_key": {
                    "type": "string",
                    "description": "Google API Key",
                    "required": true
                },
                "search_engine_id": {
                    "type": "string",
                    "description": "Google Custom Search Engine ID",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "api_key": {
                "type": "env",
                "key": "GOOGLE_API_KEY"
            },
            "search_engine_id": {
                "type": "env",
                "key": "SEARCH_ENGINE_ID"
            }
        }
    },
    {
        "id": "cli-mcp-server",
        "name": "CLI MCP Server",
        "description": "A secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with comprehensive security features.",
        "repo": "https://github.com/MladenSU/cli-mcp-server",
        "tags": [
            "mcp",
            "cli",
            "security"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "<path/to/the/repo>/cli-mcp-server",
            "run",
            "cli-mcp-server"
        ],
        "env": {
            "ALLOWED_DIR": "<your/desired/dir>",
            "ALLOWED_COMMANDS": "ls,cat,pwd,echo",
            "ALLOWED_FLAGS": "-l,-a,--help,--version",
            "MAX_COMMAND_LENGTH": "1024",
            "COMMAND_TIMEOUT": "30"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Single command to execute (e.g., 'ls -l' or 'cat file.txt')",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "command": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "python-sdk",
        "name": "MCP Python SDK",
        "description": "Python implementation of the Model Context Protocol (MCP)",
        "repo": "https://github.com/modelcontextprotocol/python-sdk",
        "tags": [
            "mcp",
            "python",
            "sdk"
        ],
        "command": "python",
        "baseArgs": [
            "server.py"
        ],
        "configurable": false
    },
    {
        "mcpServers": {
            "postgres": {
                "id": "postgres",
                "name": "PostgreSQL",
                "description": "Read-only database access with schema inspection",
                "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
                "tags": [
                    "database",
                    "postgresql",
                    "sql"
                ],
                "command": "npx",
                "baseArgs": [
                    "-y",
                    "@modelcontextprotocol/server-postgres"
                ],
                "configurable": true,
                "configSchema": {
                    "properties": {
                        "connectionString": {
                            "type": "string",
                            "description": "PostgreSQL connection string",
                            "required": true
                        }
                    }
                },
                "argsMapping": {
                    "connectionString": {
                        "type": "single",
                        "position": 2
                    }
                }
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "gitignore",
        "name": ".gitignore",
        "description": "Specifies files and directories to be ignored by Git",
        "repo": "https://github.com/modelcontextprotocol/servers/blob/main/.gitignore",
        "tags": [
            "git",
            "ignore",
            "configuration"
        ],
        "command": "npx",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "npmrc",
        "name": ".npmrc",
        "description": "Configuration file for npm package management",
        "tags": [
            "npm",
            "configuration"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "NPM registry URL",
                    "required": true
                },
                "@modelcontextprotocol:registry": {
                    "type": "string",
                    "description": "Registry for model context protocol packages",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "registry": {
                "type": "single",
                "position": 1
            },
            "@modelcontextprotocol:registry": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "license",
        "name": "License",
        "description": "MIT License",
        "tags": [
            "license",
            "MIT"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers",
        "command": "npx",
        "baseArgs": [],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "servers",
        "name": "Model Context Protocol Servers",
        "description": "Servers for the Model Context Protocol.",
        "license": "MIT",
        "author": "Anthropic, PBC (https://anthropic.com)",
        "homepage": "https://modelcontextprotocol.io",
        "bugs": "https://github.com/modelcontextprotocol/servers/issues",
        "version": "0.6.2",
        "private": true,
        "type": "module",
        "workspaces": [
            "src/*"
        ],
        "scripts": {
            "build": "npm run build --workspaces",
            "watch": "npm run watch --workspaces",
            "publish-all": "npm publish --workspaces --access public",
            "link-all": "npm link --workspaces"
        },
        "dependencies": {
            "@modelcontextprotocol/server-everything": "*",
            "@modelcontextprotocol/server-gdrive": "*",
            "@modelcontextprotocol/server-postgres": "*",
            "@modelcontextprotocol/server-puppeteer": "*",
            "@modelcontextprotocol/server-slack": "*",
            "@modelcontextprotocol/server-brave-search": "*",
            "@modelcontextprotocol/server-memory": "*",
            "@modelcontextprotocol/server-filesystem": "*",
            "@modelcontextprotocol/server-everart": "*",
            "@modelcontextprotocol/server-sequential-thinking": "*"
        }
    },
    {
        "id": "aws-kb-retrieval",
        "name": "AWS Knowledge Base Retrieval",
        "description": "An MCP server implementation for retrieving information from the AWS Knowledge Base using the Bedrock Agent Runtime.",
        "tags": [
            "aws",
            "knowledge-base",
            "retrieval"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/aws-kb-retrieval-server",
        "command": "docker",
        "baseArgs": [
            "run",
            "-i",
            "--rm",
            "-e",
            "AWS_ACCESS_KEY_ID",
            "-e",
            "AWS_SECRET_ACCESS_KEY",
            "-e",
            "AWS_REGION",
            "mcp/aws-kb-retrieval-server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AWS_ACCESS_KEY_ID": {
                    "type": "string",
                    "description": "Your AWS access key ID",
                    "required": true
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "type": "string",
                    "description": "Your AWS secret access key",
                    "required": true
                },
                "AWS_REGION": {
                    "type": "string",
                    "description": "Your AWS region",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "AWS_ACCESS_KEY_ID": {
                "type": "env",
                "key": "AWS_ACCESS_KEY_ID"
            },
            "AWS_SECRET_ACCESS_KEY": {
                "type": "env",
                "key": "AWS_SECRET_ACCESS_KEY"
            },
            "AWS_REGION": {
                "type": "env",
                "key": "AWS_REGION"
            }
        }
    },
    {
        "id": "brave-search",
        "name": "Brave Search",
        "description": "An MCP server implementation that integrates the Brave Search API, providing both web and local search capabilities.",
        "tags": [
            "search",
            "brave",
            "api"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search",
        "command": "docker",
        "baseArgs": [
            "run",
            "-i",
            "--rm",
            "-e",
            "BRAVE_API_KEY",
            "mcp/brave-search"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "BRAVE_API_KEY": {
                    "type": "string",
                    "description": "Brave Search API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "BRAVE_API_KEY": {
                "type": "env",
                "key": "BRAVE_API_KEY"
            }
        }
    },
    {
        "id": "everart",
        "name": "EverArt MCP Server",
        "description": "Image generation server for Claude Desktop using EverArt's API.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/everart",
        "tags": [
            "image-generation",
            "API",
            "everart"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everart"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "EVERART_API_KEY": {
                    "type": "string",
                    "description": "Your EverArt API key for authentication",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "EVERART_API_KEY": {
                "type": "env",
                "key": "EVERART_API_KEY"
            }
        }
    },
    {
        "id": "everything",
        "name": "Everything MCP Server",
        "description": "This MCP server attempts to exercise all the features of the MCP protocol. It is not intended to be a useful server, but rather a test server for builders of MCP clients. It implements prompts, tools, resources, sampling, and more to showcase MCP capabilities.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
        "tags": [
            "mcp",
            "server",
            "testing"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everything"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "Message to echo back",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "message": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "fetch",
        "name": "Fetch",
        "description": "A Model Context Protocol server that provides web content fetching capabilities.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
        "tags": [
            "fetch",
            "mcp"
        ],
        "command": "npx",
        "baseArgs": [
            "@modelcontextprotocol/server-fetch"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch",
                    "required": true
                },
                "max_length": {
                    "type": "integer",
                    "description": "Maximum number of characters to return",
                    "required": false
                },
                "start_index": {
                    "type": "integer",
                    "description": "Start content from this character index",
                    "required": false
                },
                "raw": {
                    "type": "boolean",
                    "description": "Get raw content without markdown conversion",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "max_length": {
                "type": "single",
                "position": 1
            },
            "start_index": {
                "type": "single",
                "position": 2
            },
            "raw": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "filesystem",
        "name": "Filesystem",
        "description": "Node.js server implementing Model Context Protocol (MCP) for filesystem operations.",
        "tags": [
            "filesystem",
            "access-control"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-filesystem"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "paths": {
                    "type": "array",
                    "description": "Allowed file system paths",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "paths": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "gdrive",
        "name": "Google Drive",
        "description": "File access and search capabilities for Google Drive",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
        "tags": [
            "google",
            "filesystem",
            "api"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-gdrive"
        ],
        "configurable": false,
        "configSchema": {
            "properties": {
                "paths": {
                    "type": "array",
                    "description": "Allowed file system paths",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "git",
        "name": "Git",
        "description": "A Model Context Protocol server for Git repository interaction and automation.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
        "tags": [
            "git",
            "repository",
            "mcp"
        ],
        "command": "uvx",
        "baseArgs": [
            "mcp-server-git",
            "--repository"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "Path to Git repository",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "repository": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "github",
        "name": "GitHub",
        "description": "MCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.",
        "tags": [
            "github",
            "api",
            "repository"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-github"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "GitHub Personal Access Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "env",
                "key": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "gitlab",
        "name": "GitLab",
        "description": "MCP Server for the GitLab API, enabling project management, file operations, and more.",
        "tags": [
            "gitlab",
            "api",
            "project management"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
        "command": "docker",
        "baseArgs": [
            "run",
            "-e",
            "GITLAB_PERSONAL_ACCESS_TOKEN",
            "-e",
            "GITLAB_API_URL",
            "mcp/gitlab"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GITLAB_PERSONAL_ACCESS_TOKEN": {
                    "type": "string",
                    "description": "Your GitLab personal access token",
                    "required": true
                },
                "GITLAB_API_URL": {
                    "type": "string",
                    "description": "Base URL for GitLab API",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "GITLAB_PERSONAL_ACCESS_TOKEN": {
                "type": "env",
                "key": "GITLAB_PERSONAL_ACCESS_TOKEN"
            },
            "GITLAB_API_URL": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "google-maps",
        "name": "Google Maps",
        "description": "MCP Server for the Google Maps API.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
        "tags": [
            "maps",
            "google",
            "api"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-google-maps"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GOOGLE_MAPS_API_KEY": {
                    "type": "string",
                    "description": "Google Maps API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GOOGLE_MAPS_API_KEY": {
                "type": "env",
                "key": "GOOGLE_MAPS_API_KEY"
            }
        }
    },
    {
        "id": "memory",
        "name": "Memory",
        "description": "A basic implementation of persistent memory using a local knowledge graph.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
        "tags": [
            "memory",
            "knowledge-graph"
        ],
        "command": "docker",
        "baseArgs": [
            "run",
            "-i",
            "--rm",
            "mcp/memory"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "someConfig": {
                    "type": "string",
                    "description": "Example config parameter",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "configParam": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "A Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "puppeteer",
        "name": "Puppeteer",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
        "tags": [
            "automation",
            "browser",
            "puppeteer",
            "llm"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-puppeteer"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to navigate to in the browser.",
                    "required": true
                },
                "screenshotName": {
                    "type": "string",
                    "description": "Name of the screenshot to capture.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "screenshotName": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "sentry",
        "name": "Sentry",
        "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
        "tags": [
            "mcp",
            "sentry",
            "error-reporting"
        ],
        "command": "npx",
        "baseArgs": [
            "@modelcontextprotocol/server-sentry"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Sentry authentication token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "authToken": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "sequentialthinking",
        "name": "Sequential Thinking MCP Server",
        "description": "An MCP server implementation that provides a tool for dynamic and reflective problem-solving through a structured thinking process.",
        "tags": [
            "mcp",
            "sequential",
            "thinking",
            "problem-solving"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-sequential-thinking"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "thought": {
                    "type": "string",
                    "description": "The current thinking step",
                    "required": true
                },
                "nextThoughtNeeded": {
                    "type": "boolean",
                    "description": "Whether another thought step is needed",
                    "required": true
                },
                "thoughtNumber": {
                    "type": "integer",
                    "description": "Current thought number",
                    "required": true
                },
                "totalThoughts": {
                    "type": "integer",
                    "description": "Estimated total thoughts needed",
                    "required": true
                },
                "isRevision": {
                    "type": "boolean",
                    "description": "Whether this revises previous thinking",
                    "required": false
                },
                "revisesThought": {
                    "type": "integer",
                    "description": "Which thought is being reconsidered",
                    "required": false
                },
                "branchFromThought": {
                    "type": "integer",
                    "description": "Branching point thought number",
                    "required": false
                },
                "branchId": {
                    "type": "string",
                    "description": "Branch identifier",
                    "required": false
                },
                "needsMoreThoughts": {
                    "type": "boolean",
                    "description": "If more thoughts are needed",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "thought": {
                "type": "single",
                "position": 0
            },
            "nextThoughtNeeded": {
                "type": "single",
                "position": 1
            },
            "thoughtNumber": {
                "type": "single",
                "position": 2
            },
            "totalThoughts": {
                "type": "single",
                "position": 3
            },
            "isRevision": {
                "type": "single",
                "position": 4
            },
            "revisesThought": {
                "type": "single",
                "position": 5
            },
            "branchFromThought": {
                "type": "single",
                "position": 6
            },
            "branchId": {
                "type": "single",
                "position": 7
            },
            "needsMoreThoughts": {
                "type": "single",
                "position": 8
            }
        }
    },
    {
        "id": "slack",
        "name": "Slack",
        "description": "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
        "tags": [
            "slack",
            "api"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-slack"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "SLACK_BOT_TOKEN": {
                    "type": "string",
                    "description": "Slack Bot User OAuth Token",
                    "required": true
                },
                "SLACK_TEAM_ID": {
                    "type": "string",
                    "description": "Slack Team ID",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SLACK_BOT_TOKEN": {
                "type": "env",
                "key": "SLACK_BOT_TOKEN"
            },
            "SLACK_TEAM_ID": {
                "type": "env",
                "key": "SLACK_TEAM_ID"
            }
        }
    },
    {
        "id": "sqlite",
        "name": "SQLite",
        "description": "Database management and analysis tool with support for SQL queries and business insights.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
        "tags": [
            "database",
            "sqlite",
            "sql"
        ],
        "command": "uv",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "dbPath": {
                    "type": "string",
                    "description": "Path to the SQLite database file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "dbPath": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "time",
        "name": "Time MCP Server",
        "description": "A Model Context Protocol server that provides time and timezone conversion capabilities. This server enables LLMs to get current time information and perform timezone conversions using IANA timezone names, with automatic system timezone detection.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/time",
        "tags": [
            "mcp",
            "time",
            "timezone"
        ],
        "command": "uvx",
        "baseArgs": [
            "mcp-server-time"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "localTimezone": {
                    "type": "string",
                    "description": "Optional local timezone to override system detection.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "localTimezone": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "tsconfig",
        "name": "TypeScript Configuration",
        "description": "Configuration file for TypeScript compiler options",
        "tags": [
            "typescript",
            "config"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/tsconfig",
        "command": "npx",
        "baseArgs": [
            "typescript"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "compilerOptions": {
                    "type": "object",
                    "description": "Compiler options for TypeScript",
                    "required": true
                },
                "include": {
                    "type": "array",
                    "description": "Files to include in compilation",
                    "required": true,
                    "minItems": 1
                },
                "exclude": {
                    "type": "array",
                    "description": "Files to exclude from compilation",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "compilerOptions": {
                "type": "single",
                "position": 0
            },
            "include": {
                "type": "spread",
                "position": 1
            },
            "exclude": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "branches": {
            "default": {
                "name": "main",
                "isDefault": true,
                "mergeQueueEnabled": false,
                "path": "/modelcontextprotocol/servers",
                "protectedByBranchProtections": false,
                "author": {
                    "login": "dsp-ant",
                    "name": "dsp-ant",
                    "avatarUrl": "https://avatars.githubusercontent.com/u/167242713?s=32&v=4",
                    "path": "/dsp-ant"
                },
                "authoredDate": "2025-01-16T04:26:53.000+08:00",
                "deleteable": false,
                "deleteProtected": true,
                "isBeingRenamed": false,
                "renameable": false
            },
            "active": [
                {
                    "name": "devin/1733957078-fix-linting-issues",
                    "isDefault": false,
                    "mergeQueueEnabled": false,
                    "path": "/modelcontextprotocol/servers/tree/devin/1733957078-fix-linting-issues",
                    "protectedByBranchProtections": false,
                    "author": {
                        "login": "devin-ai-integration[bot]",
                        "name": "devin-ai-integration",
                        "avatarUrl": "https://avatars.githubusercontent.com/in/811515?s=32&v=4",
                        "path": "/apps/devin-ai-integration"
                    },
                    "authoredDate": "2024-12-13T07:40:21.000+08:00",
                    "deleteable": true,
                    "deleteProtected": false,
                    "isBeingRenamed": false,
                    "renameable": false
                },
                {
                    "name": "jadamson/click-server",
                    "isDefault": false,
                    "mergeQueueEnabled": false,
                    "path": "/modelcontextprotocol/servers/tree/jadamson/click-server",
                    "protectedByBranchProtections": false,
                    "author": {
                        "login": "jackadamson",
                        "name": "jackadamson",
                        "avatarUrl": "https://avatars.githubusercontent.com/u/7891953?s=32&v=4",
                        "path": "/jackadamson"
                    },
                    "authoredDate": "2024-11-28T23:17:23.000+08:00",
                    "deleteable": true,
                    "deleteProtected": false,
                    "isBeingRenamed": false,
                    "renameable": false
                }
            ]
        }
    },
    {
        "id": "repo_protection_L3",
        "name": "Repo Protection L3",
        "description": "L3 protections enabled",
        "repo": "https://github.com/modelcontextprotocol/servers",
        "tags": [
            "security",
            "protection",
            "repo"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "repo_protection_L3": {
                    "type": "boolean",
                    "description": "L3 protections enabled",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "repo_protection_L3": {
                "type": "single",
                "position": 0
            }
        },
        "values": {
            "repo_protection_L3": "true"
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "server",
        "name": "Model Context Protocol Servers",
        "description": "Collection of servers for the Model Context Protocol.",
        "repo": "https://github.com/modelcontextprotocol/servers",
        "version": "2025.1.14",
        "updatedPackages": [
            {
                "name": "@modelcontextprotocol/server-aws-kb-retrieval",
                "version": "2025.1.14"
            },
            {
                "name": "@modelcontextprotocol/server-puppeteer",
                "version": "2025.1.14"
            },
            {
                "name": "@modelcontextprotocol/server-gdrive",
                "version": "2025.1.14"
            },
            {
                "name": "@modelcontextprotocol/server-github",
                "version": "2025.1.14"
            },
            {
                "name": "@modelcontextprotocol/server-filesystem",
                "version": "2025.1.14"
            },
            {
                "name": "@modelcontextprotocol/server-everything",
                "version": "2025.1.14"
            },
            {
                "name": "mcp-server-fetch",
                "version": "2025.1.14"
            },
            {
                "name": "mcp-server-sentry",
                "version": "2025.1.14"
            },
            {
                "name": "mcp-server-sqlite",
                "version": "2025.1.14"
            },
            {
                "name": "mcp-server-git",
                "version": "2025.1.14"
            }
        ]
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    [
        {
            "id": "2025.1.15",
            "name": "2025.1.15",
            "description": "Release 2025.1.15",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/2025.1.15",
            "tags": [
                "release"
            ],
            "date": "2025-01-15T10:04:09Z",
            "commit": "ae2e48a18d30c59eb134ad500cdff7395212eec3",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/2025.1.15.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/2025.1.15.tar.gz"
            }
        },
        {
            "id": "2025.1.14",
            "name": "2025.1.14",
            "description": "Release 2025.1.14",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/2025.1.14",
            "tags": [
                "release"
            ],
            "date": "2025-01-14T03:03:30Z",
            "commit": "260032172a64a397961f6e80d754121a8b1931be",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/2025.1.14.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/2025.1.14.tar.gz"
            }
        },
        {
            "id": "typescript-servers-0.6.2",
            "name": "typescript-servers-0.6.2",
            "description": "Typescript Servers 0.6.2",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/typescript-servers-0.6.2",
            "tags": [
                "release"
            ],
            "date": "2024-12-05T00:12:02Z",
            "commit": "94a36286d2ea49d095704167846283f0c2c2d5d1",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/typescript-servers-0.6.2.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/typescript-servers-0.6.2.tar.gz"
            }
        },
        {
            "id": "typescript-servers-0.6.1",
            "name": "typescript-servers-0.6.1",
            "description": "Typescript servers 0.6.1",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/typescript-servers-0.6.1",
            "tags": [
                "release"
            ],
            "date": "2024-12-03T17:50:10Z",
            "commit": "129d80af313c6c0ad9a929f4923c6d8a07d6a9e5",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/typescript-servers-0.6.1.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/typescript-servers-0.6.1.tar.gz"
            }
        },
        {
            "id": "python-servers-0.6.2",
            "name": "python-servers-0.6.2",
            "description": "python servers 0.6.2",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/python-servers-0.6.2",
            "tags": [
                "release"
            ],
            "date": "2024-12-04T15:57:54Z",
            "commit": "e7e1c85058e029ca1102efe6b2797f0ed608221b",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/python-servers-0.6.2.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/python-servers-0.6.2.tar.gz"
            }
        },
        {
            "id": "python-servers-0.6.1",
            "name": "python-servers-0.6.1",
            "description": "python servers 0.6.1",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/python-servers-0.6.1",
            "tags": [
                "release"
            ],
            "date": "2024-11-30T01:51:21Z",
            "commit": "2578d6f6689ee446b47644b5803d87a88ae457b5",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/python-servers-0.6.1.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/python-servers-0.6.1.tar.gz"
            }
        },
        {
            "id": "0.5.1",
            "name": "0.5.1",
            "description": "0.5.1",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/0.5.1",
            "tags": [
                "release"
            ],
            "date": "2024-11-25T19:56:36Z",
            "commit": "0da25bea8720c8162895f3222b46abb0c96c7a81",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/0.5.1.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/0.5.1.tar.gz"
            }
        },
        {
            "id": "0.5.0",
            "name": "0.5.0",
            "description": "0.5.0",
            "repo": "https://github.com/modelcontextprotocol/servers/releases/tag/0.5.0",
            "tags": [
                "release"
            ],
            "date": "2024-11-25T13:13:35Z",
            "commit": "45c4f70da468e2d81b9efe0d736b49efde1b9263",
            "downloadLinks": {
                "zip": "/modelcontextprotocol/servers/archive/refs/tags/0.5.0.zip",
                "tar": "/modelcontextprotocol/servers/archive/refs/tags/0.5.0.tar.gz"
            }
        }
    ],
    {
        "id": "github",
        "name": "GitHub",
        "description": "Repository management, file operations, and GitHub API integration",
        "tags": [
            "github",
            "repository",
            "api"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-github"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "GitHub Personal Access Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "env",
                "key": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "brave-search",
        "name": "Brave Search",
        "description": "An MCP server implementation that integrates the Brave Search API, providing both web and local search capabilities.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/brave-search",
        "tags": [
            "search",
            "api",
            "brave"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-brave-search"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Brave Search API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "BRAVE_API_KEY"
            }
        }
    },
    {
        "id": "everything",
        "name": "Everything MCP Server",
        "description": "This MCP server attempts to exercise all the features of the MCP protocol. It is not intended to be a useful server, but rather a test server for builders of MCP clients. It implements prompts, tools, resources, sampling, and more to showcase MCP capabilities.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/everything",
        "tags": [
            "mcp",
            "server",
            "testing"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-everything"
        ],
        "configurable": false
    },
    {
        "id": "fetch",
        "name": "Fetch MCP Server",
        "description": "A Model Context Protocol server that provides web content fetching capabilities.",
        "tags": [
            "web",
            "fetch",
            "mcp"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/fetch",
        "command": "npx",
        "baseArgs": [
            "@modelcontextprotocol/mcp-server-fetch"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL to fetch",
                    "required": true
                },
                "max_length": {
                    "type": "integer",
                    "description": "Maximum number of characters to return",
                    "required": false
                },
                "start_index": {
                    "type": "integer",
                    "description": "Start content from this character index",
                    "required": false
                },
                "raw": {
                    "type": "boolean",
                    "description": "Get raw content without markdown conversion",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "max_length": {
                "type": "single",
                "position": 1
            },
            "start_index": {
                "type": "single",
                "position": 2
            },
            "raw": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "filesystem",
        "name": "Filesystem",
        "description": "Node.js server implementing Model Context Protocol (MCP) for filesystem operations",
        "tags": [
            "filesystem",
            "mcp",
            "nodejs"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-filesystem"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "allowedDirectories": {
                    "type": "array",
                    "description": "List of allowed directories for file operations",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "allowedDirectories": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "gdrive",
        "name": "Google Drive",
        "description": "File access and search capabilities for Google Drive",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
        "tags": [
            "google",
            "filesystem",
            "api"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-gdrive"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Google OAuth Client ID",
                    "required": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Google OAuth Client Secret",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "clientId": {
                "type": "env",
                "key": "GOOGLE_OAUTH_CLIENT_ID"
            },
            "clientSecret": {
                "type": "env",
                "key": "GOOGLE_OAUTH_CLIENT_SECRET"
            }
        }
    },
    {
        "id": "git",
        "name": "Git",
        "description": "A Model Context Protocol server for Git repository interaction and automation.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/git",
        "tags": [
            "git",
            "repository",
            "version-control"
        ],
        "command": "npx",
        "baseArgs": [
            "@modelcontextprotocol/server-git"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "Path to the Git repository",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "repository": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "github",
        "name": "GitHub",
        "description": "MCP Server for the GitHub API, enabling file operations, repository management, search functionality, and more.",
        "tags": [
            "github",
            "api",
            "repository",
            "file-operations"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-github"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GITHUB_PERSONAL_ACCESS_TOKEN": {
                    "type": "string",
                    "description": "GitHub Personal Access Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GITHUB_PERSONAL_ACCESS_TOKEN": {
                "type": "env",
                "key": "GITHUB_PERSONAL_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "gitlab",
        "name": "GitLab",
        "description": "MCP Server for the GitLab API, enabling project management, file operations, and more.",
        "tags": [
            "gitlab",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/gitlab",
        "command": "docker",
        "baseArgs": [
            "run",
            "-e",
            "GITLAB_PERSONAL_ACCESS_TOKEN",
            "-e",
            "GITLAB_API_URL",
            "mcp/gitlab"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GITLAB_PERSONAL_ACCESS_TOKEN": {
                    "type": "string",
                    "description": "Your GitLab personal access token",
                    "required": true
                },
                "GITLAB_API_URL": {
                    "type": "string",
                    "description": "Base URL for GitLab API (optional, defaults to https://gitlab.com/api/v4)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "GITLAB_PERSONAL_ACCESS_TOKEN": {
                "type": "env",
                "key": "GITLAB_PERSONAL_ACCESS_TOKEN"
            },
            "GITLAB_API_URL": {
                "type": "env",
                "key": "GITLAB_API_URL"
            }
        }
    },
    {
        "id": "google-maps",
        "name": "Google Maps",
        "description": "MCP Server for the Google Maps API.",
        "tags": [
            "google",
            "maps",
            "api"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-google-maps"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GOOGLE_MAPS_API_KEY": {
                    "type": "string",
                    "description": "Google Maps API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GOOGLE_MAPS_API_KEY": {
                "type": "env",
                "key": "GOOGLE_MAPS_API_KEY"
            }
        }
    },
    {
        "id": "memory",
        "name": "Memory",
        "description": "A basic implementation of persistent memory using a local knowledge graph.",
        "tags": [
            "knowledge-graph",
            "memory",
            "persistence"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/memory",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-memory"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "A Model Context Protocol server that provides read-only access to PostgreSQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "puppeteer",
        "name": "Puppeteer",
        "description": "A Model Context Protocol server that provides browser automation capabilities using Puppeteer. This server enables LLMs to interact with web pages, take screenshots, and execute JavaScript in a real browser environment.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/puppeteer",
        "tags": [
            "automation",
            "puppeteer",
            "browser"
        ],
        "command": "docker",
        "baseArgs": [
            "run",
            "-i",
            "--rm",
            "--init",
            "-e",
            "DOCKER_CONTAINER=true",
            "mcp/puppeteer"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The URL to navigate to",
                    "required": true
                },
                "name": {
                    "type": "string",
                    "description": "Name for the screenshot",
                    "required": false
                },
                "selector": {
                    "type": "string",
                    "description": "CSS selector for element to screenshot",
                    "required": false
                },
                "width": {
                    "type": "number",
                    "description": "Screenshot width",
                    "required": false,
                    "default": 800
                },
                "height": {
                    "type": "number",
                    "description": "Screenshot height",
                    "required": false,
                    "default": 600
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 2
            },
            "name": {
                "type": "single",
                "position": 3
            },
            "selector": {
                "type": "single",
                "position": 4
            },
            "width": {
                "type": "single",
                "position": 5
            },
            "height": {
                "type": "single",
                "position": 6
            }
        }
    },
    {
        "id": "sentry",
        "name": "Sentry",
        "description": "A Model Context Protocol server for retrieving and analyzing issues from Sentry.io.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/sentry",
        "tags": [
            "mcp",
            "sentry"
        ],
        "command": "uvx",
        "baseArgs": [
            "mcp-server-sentry"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "authToken": {
                    "type": "string",
                    "description": "Sentry authentication token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "authToken": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "slack",
        "name": "Slack",
        "description": "MCP Server for the Slack API, enabling Claude to interact with Slack workspaces.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/slack",
        "tags": [
            "slack",
            "api",
            "mcp"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-slack"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "SLACK_BOT_TOKEN": {
                    "type": "string",
                    "description": "Slack Bot User OAuth Token",
                    "required": true
                },
                "SLACK_TEAM_ID": {
                    "type": "string",
                    "description": "Slack Team ID",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SLACK_BOT_TOKEN": {
                "type": "env",
                "key": "SLACK_BOT_TOKEN"
            },
            "SLACK_TEAM_ID": {
                "type": "env",
                "key": "SLACK_TEAM_ID"
            }
        }
    },
    {
        "id": "sqlite",
        "name": "SQLite",
        "description": "Database interactions and business intelligence capabilities via SQLite.",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/sqlite",
        "tags": [
            "database",
            "sqlite",
            "sql"
        ],
        "command": "uv",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "databasePath": {
                    "type": "string",
                    "description": "Path to the SQLite database file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "databasePath": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "typescript-sdk",
        "name": "MCP TypeScript SDK",
        "description": "TypeScript implementation of the Model Context Protocol (MCP), providing both client and server capabilities for integrating with LLM surfaces.",
        "repo": "https://github.com/modelcontextprotocol/typescript-sdk",
        "tags": [
            "typescript",
            "sdk",
            "mcp"
        ],
        "command": "npm",
        "baseArgs": [
            "install",
            "@modelcontextprotocol/sdk"
        ],
        "configurable": false
    },
    {
        "id": "mcp-server-motherduck",
        "name": "MCP Server for MotherDuck",
        "description": "An MCP server for MotherDuck and local DuckDB.",
        "tags": [
            "mcp",
            "motherduck",
            "duckdb"
        ],
        "repo": "https://github.com/motherduckdb/mcp-server-motherduck",
        "command": "uvx",
        "baseArgs": [
            "mcp-server-motherduck"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "motherduck_token": {
                    "type": "string",
                    "description": "MotherDuck token",
                    "required": true
                },
                "HOME": {
                    "type": "string",
                    "description": "Home directory",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "motherduck_token": {
                "type": "env",
                "key": "MOTHERDUCK_TOKEN"
            },
            "HOME": {
                "type": "env",
                "key": "HOME"
            }
        }
    },
    {
        "id": "godoc",
        "name": "GoDoc MCP Server",
        "description": "Efficient access to Go documentation for improved LLM performance",
        "repo": "https://github.com/mrjoshuak/godoc-mcp",
        "tags": [
            "go",
            "mcp",
            "documentation"
        ],
        "command": "go",
        "baseArgs": [
            "install",
            "github.com/mrjoshuak/godoc-mcp@latest"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "GOPATH": {
                    "type": "string",
                    "description": "Path to the Go workspace",
                    "required": true
                },
                "GOMODCACHE": {
                    "type": "string",
                    "description": "Path to the Go module cache",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "GOPATH": {
                "type": "env",
                "key": "GOPATH"
            },
            "GOMODCACHE": {
                "type": "env",
                "key": "GOMODCACHE"
            }
        }
    },
    {
        "id": "mcp-openai",
        "name": "MCP OpenAI Server",
        "description": "A Model Context Protocol (MCP) server that lets you seamlessly use OpenAI's models right from Claude.",
        "tags": [
            "openai",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/mzxrai/mcp-openai",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@mzxrai/mcp-openai@latest"
        ],
        "env": {
            "OPENAI_API_KEY": "your-api-key-here (get one from https://platform.openai.com/api-keys)"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "OPENAI_API_KEY": {
                    "type": "string",
                    "description": "OpenAI API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "OPENAI_API_KEY": {
                "type": "env",
                "key": "OPENAI_API_KEY"
            }
        }
    },
    {
        "id": "webresearch",
        "name": "MCP Web Research Server",
        "description": "A Model Context Protocol (MCP) server for web research.",
        "tags": [
            "web",
            "research",
            "MCP"
        ],
        "repo": "https://github.com/mzxrai/mcp-webresearch",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@mzxrai/mcp-webresearch@latest"
        ],
        "configurable": false
    },
    {
        "id": "needle_mcp",
        "name": "Needle MCP Server",
        "description": "Manage documents and perform searches using Needle through Claude's Desktop Application.",
        "tags": [
            "document-management",
            "search",
            "needle"
        ],
        "repo": "https://github.com/needle-ai/needle-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/needle-mcp",
            "run",
            "needle-mcp"
        ],
        "env": {
            "NEEDLE_API_KEY": "your_needle_api_key"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "directory": {
                    "type": "string",
                    "description": "The directory containing your Needle MCP server.",
                    "required": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "Your Needle API key.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "mcp-neo4j",
        "name": "Neo4j MCP Clients & Servers",
        "description": "A reference server for modeling memory as a knowledge graph.",
        "tags": [
            "neo4j",
            "memory",
            "graph"
        ],
        "repo": "https://github.com/neo4j-contrib/mcp-neo4j",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-neo4j"
        ],
        "configurable": false,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "neon",
        "name": "Neon MCP Server",
        "description": "Model Context Protocol (MCP) server for managing context between LLMs and external systems.",
        "tags": [
            "mcp",
            "neon",
            "database"
        ],
        "repo": "https://github.com/neondatabase/mcp-server-neon",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@neondatabase/mcp-server-neon"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Neon API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "NEON_API_KEY"
            }
        }
    },
    {
        "id": "my_mcp_server",
        "name": "MyMCP Server",
        "description": "A powerful Model Context Protocol (MCP) server implementation with integrations for GitLab, Jira, Confluence, YouTube, and more.",
        "repo": "https://github.com/nguyenvanduocit/all-in-one-model-context-protocol",
        "command": "all-in-one-model-context-protocol",
        "baseArgs": [
            "-env",
            "/path/to/.env"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ENABLE_TOOLS": {
                    "type": "string",
                    "description": "Comma separated list of tools group to enable. If not set, all tools will be enabled. Leave it empty to enable all tools.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "ENV": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "oatpp-mcp",
        "name": "Oat++ MCP",
        "description": "Anthropic\u2019s Model Context Protocol implementation for Oat++",
        "repo": "https://github.com/oatpp/oatpp-mcp",
        "tags": [
            "oatpp",
            "mcp",
            "api"
        ],
        "command": "npx",
        "baseArgs": [],
        "configurable": false
    },
    {
        "id": "eagle",
        "name": "MCP Eagle Server",
        "description": "This is a Model Context Protocol (MCP) server for interfacing with the Eagle app.",
        "tags": [
            "eagle",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/olegshilin/mcp-eagle",
        "command": "node",
        "baseArgs": [
            "/path/to/mcp-eagle/build/index.js"
        ],
        "configurable": false
    },
    {
        "id": "mcp-server-drupal",
        "name": "MCP Server for Drupal",
        "description": "This is a typescript based companion Model Context Protocol(MCP) server for the Drupal MCP module that works with the STDIO transport.",
        "tags": [
            "mcp",
            "drupal",
            "server"
        ],
        "repo": "https://github.com/Omedia/mcp-server-drupal",
        "command": "__BINARY_PATH__",
        "baseArgs": [
            "--drupal-url",
            "__DRUPAL_BASE_URL__"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "drupalUrl": {
                    "type": "string",
                    "description": "Base URL of your Drupal site",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "drupalUrl": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "odmcp",
        "name": "Open Data Model Context Protocol",
        "description": "Connect Open Data to LLMs in minutes!",
        "tags": [
            "open-data",
            "llm",
            "data-access"
        ],
        "repo": "https://github.com/OpenDataMCP/OpenDataMCP",
        "command": "uvx",
        "baseArgs": [
            "odmcp"
        ],
        "configurable": false
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "openai-server",
        "name": "OpenAI MCP Server",
        "description": "Query OpenAI models directly from Claude using MCP protocol.",
        "tags": [
            "openai",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/pierrebrunelle/mcp-server-openai",
        "command": "python",
        "baseArgs": [
            "-m",
            "src.mcp_server_openai.server"
        ],
        "env": {
            "PYTHONPATH": "C:/path/to/your/mcp-server-openai",
            "OPENAI_API_KEY": "your-key-here"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "PYTHONPATH": {
                    "type": "string",
                    "description": "Path to the MCP server openai directory",
                    "required": true
                },
                "OPENAI_API_KEY": {
                    "type": "string",
                    "description": "OpenAI API Key",
                    "required": true
                }
            }
        }
    },
    {
        "id": "chroma",
        "name": "Chroma MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation that provides vector database capabilities through Chroma. This server enables semantic document search, metadata filtering, and document management with persistent storage.",
        "repo": "https://github.com/privetin/chroma",
        "tags": [
            "mcp",
            "vector",
            "database",
            "semantic search"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:/MCP/server/community/chroma",
            "run",
            "chroma"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "dataset-viewer",
        "name": "Dataset Viewer",
        "description": "An MCP server for interacting with the Hugging Face Dataset Viewer API, providing capabilities to browse and analyze datasets hosted on the Hugging Face Hub.",
        "tags": [
            "dataset",
            "viewer",
            "huggingface"
        ],
        "repo": "https://github.com/privetin/dataset-viewer",
        "command": "uv",
        "baseArgs": [
            "run",
            "dataset-viewer"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "HUGGINGFACE_TOKEN": {
                    "type": "string",
                    "description": "Your Hugging Face API token for accessing private datasets",
                    "required": false
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "hacker-news",
        "name": "Hacker News MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides tools for fetching stories from Hacker News. This server parses the HTML content from news.ycombinator.com and provides structured data for different types of stories (top, new, ask, show, jobs).",
        "tags": [
            "mcp",
            "hacker-news"
        ],
        "repo": "https://github.com/pskill9/hn-server",
        "command": "node",
        "baseArgs": [
            "/path/to/hn-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Type of stories to fetch",
                    "required": true
                },
                "limit": {
                    "type": "number",
                    "description": "Number of stories to return",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "type": {
                "type": "single",
                "position": 0
            },
            "limit": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "web-search",
        "name": "Web Search MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables free web searching using Google search results, with no API keys required.",
        "tags": [
            "search",
            "web",
            "google"
        ],
        "repo": "https://github.com/pskill9/web-search",
        "command": "node",
        "baseArgs": [
            "/path/to/web-search/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The search query",
                    "required": true
                },
                "limit": {
                    "type": "number",
                    "description": "Number of results to return (default: 5, max: 10)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "query": {
                "type": "single",
                "position": 0
            },
            "limit": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "website-downloader",
        "name": "Website Downloader",
        "description": "This MCP server provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.",
        "tags": [
            "wget",
            "website",
            "downloader"
        ],
        "repo": "https://github.com/pskill9/website-downloader",
        "command": "node",
        "baseArgs": [
            "/path/to/website-downloader/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "The URL of the website to download",
                    "required": true
                },
                "outputPath": {
                    "type": "string",
                    "description": "The directory where the website should be downloaded. Defaults to the current directory.",
                    "required": false
                },
                "depth": {
                    "type": "integer",
                    "description": "Maximum depth level for recursive downloading. Set to 0 for just the specified page.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "single",
                "position": 0
            },
            "outputPath": {
                "type": "single",
                "position": 1
            },
            "depth": {
                "type": "single",
                "position": 2
            }
        }
    },
    [
        {
            "id": "5ire",
            "name": "5ire",
            "description": "5ire is a cross-platform desktop AI assistant, MCP client. It compatible with major service providers, supports local knowledge base and tools via model context protocol servers.",
            "repo": "https://github.com/nanbingxyz/5ire",
            "tags": [
                "desktop",
                "AI",
                "assistant",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/5ire"
            ],
            "configurable": true,
            "configSchema": {
                "properties": {
                    "platforms": {
                        "type": "array",
                        "description": "Supported platforms",
                        "required": true,
                        "minItems": 1
                    }
                }
            },
            "argsMapping": {
                "platforms": {
                    "type": "spread",
                    "position": 2
                }
            }
        },
        {
            "id": "chatmcp",
            "name": "ChatMCP",
            "description": "ChatMCP is an AI chat client implementing the Model Context Protocol (MCP).",
            "repo": "https://github.com/daodao97/chatmcp",
            "tags": [
                "AI",
                "chat",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/chatmcp"
            ],
            "configurable": true,
            "configSchema": {
                "properties": {
                    "platforms": {
                        "type": "array",
                        "description": "Supported platforms",
                        "required": true,
                        "minItems": 1
                    }
                }
            },
            "argsMapping": {
                "platforms": {
                    "type": "spread",
                    "position": 2
                }
            }
        },
        {
            "id": "claude-desktop",
            "name": "Claude Desktop",
            "description": "The Claude desktop app brings Claude's capabilities directly to your computer, allowing for seamless integration with your workflow.",
            "repo": "https://claude.ai/download",
            "tags": [
                "desktop",
                "AI"
            ],
            "command": "download",
            "baseArgs": [],
            "configurable": false
        },
        {
            "id": "claudemind",
            "name": "ClaudeMind",
            "description": "Experience Claude AI without limits. Use our desktop app for everyday AI assistance, or boost your coding productivity with our JetBrains plugin.",
            "repo": "https://claudemind.com/",
            "tags": [
                "desktop",
                "AI"
            ],
            "command": "download",
            "baseArgs": [],
            "configurable": false
        },
        {
            "id": "cline",
            "name": "Cline",
            "description": "Cline can handle complex software development tasks step-by-step and use the Model Context Protocol (MCP) to create new tools.",
            "repo": "https://github.com/cline/cline",
            "tags": [
                "development",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/cline"
            ],
            "configurable": true,
            "configSchema": {
                "properties": {
                    "tasks": {
                        "type": "array",
                        "description": "Tasks for Cline to perform",
                        "required": true,
                        "minItems": 1
                    }
                }
            },
            "argsMapping": {
                "tasks": {
                    "type": "spread",
                    "position": 2
                }
            }
        },
        {
            "id": "console-chat-gpt",
            "name": "Console Chat GPT",
            "description": "Enjoy seamless interactions with ChatGPT and other LLMs directly from your command line.",
            "repo": "https://github.com/amidabuddha/console-chat-gpt",
            "tags": [
                "CLI",
                "chat",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/console-chat-gpt"
            ],
            "configurable": false
        },
        {
            "id": "continue",
            "name": "Continue",
            "description": "Continue is the leading open-source AI code assistant. Connect any models to build custom autocomplete and chat experiences inside VS Code.",
            "repo": "https://github.com/continuedev/continue",
            "tags": [
                "VS Code",
                "AI",
                "assistant"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/continue"
            ],
            "configurable": false
        },
        {
            "id": "hyperchat",
            "name": "HyperChat",
            "description": "HyperChat is an open Chat client that can use various APIs to provide the best Chat experience.",
            "repo": "https://github.com/BigSweetPotatoStudio/HyperChat",
            "tags": [
                "desktop",
                "chat",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/hyperchat"
            ],
            "configurable": false
        },
        {
            "id": "librechat",
            "name": "LibreChat",
            "description": "Enhanced ChatGPT Clone featuring multiple AI models, agents, and various productivity tools.",
            "repo": "https://github.com/danny-avila/LibreChat",
            "tags": [
                "web app",
                "AI"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/librechat"
            ],
            "configurable": false
        },
        {
            "id": "mcp-chatbot",
            "name": "MCP Chatbot",
            "description": "A chatbot example that integrates the Model Context Protocol (MCP).",
            "repo": "https://github.com/3choff/mcp-chatbot",
            "tags": [
                "CLI",
                "chat",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/mcp-chatbot"
            ],
            "configurable": true,
            "configSchema": {
                "properties": {
                    "model": {
                        "type": "string",
                        "description": "Name of the AI model to use",
                        "required": true
                    }
                }
            },
            "argsMapping": {
                "model": {
                    "type": "single",
                    "position": 2
                }
            }
        },
        {
            "id": "mcp-cli-client",
            "name": "MCP CLI client",
            "description": "A simple CLI to run LLM prompt and implement MCP client.",
            "repo": "https://github.com/adhikasp/mcp-client-cli",
            "tags": [
                "CLI",
                "MCP"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/mcp-client-cli"
            ],
            "configurable": false
        },
        {
            "id": "zed",
            "name": "Zed",
            "description": "Zed is a high-performance, multiplayer code editor from the creators of Atom.",
            "repo": "https://github.com/zed-industries/zed",
            "tags": [
                "desktop",
                "editor"
            ],
            "command": "npx",
            "baseArgs": [
                "-y",
                "@modelcontextprotocol/zed"
            ],
            "configurable": false
        }
    ],
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "github-actions",
        "name": "GitHub Actions",
        "description": "Automate your workflow from idea to production",
        "tags": [
            "automation",
            "ci/cd",
            "github"
        ],
        "repo": "https://github.com/punkpeye/awesome-mcp-servers",
        "command": "npm",
        "baseArgs": [
            "run",
            "build"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "workflowName": {
                    "type": "string",
                    "description": "Name of the workflow",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "workflowName": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "contributing",
        "name": "Contributing to Awesome MCP Servers",
        "description": "Contributions are welcome and encouraged! Whether you're fixing a typo, adding a new server, or suggesting improvements, your help is appreciated.",
        "repo": "https://github.com/punkpeye/awesome-mcp-servers",
        "tags": [
            "contributing",
            "community"
        ],
        "sections": [
            {
                "id": "how-to-contribute",
                "title": "How to Contribute",
                "content": [
                    {
                        "step": 1,
                        "text": "Fork the repository: Click the 'Fork' button in the top right corner of the GitHub page."
                    },
                    {
                        "step": 2,
                        "text": "Create a new branch: Create a new branch for your changes. This keeps your changes separate from the main project until they're ready to be merged."
                    },
                    {
                        "step": 3,
                        "text": "Make your changes: Edit the README.md file with your additions or corrections."
                    },
                    {
                        "step": 4,
                        "text": "Commit your changes: Commit your changes with a clear and concise message explaining what you've done."
                    },
                    {
                        "step": 5,
                        "text": "Push your branch: Push your branch to your forked repository."
                    },
                    {
                        "step": 6,
                        "text": "Create a pull request: Go to the original repository and click the 'New pull request' button."
                    },
                    {
                        "step": 7,
                        "text": "Review and merge: Your pull request will be reviewed by the maintainers."
                    }
                ]
            },
            {
                "id": "guidelines",
                "title": "Guidelines",
                "content": [
                    "Keep it consistent: Follow the existing format and style of the README.md file.",
                    "Alphabetical order: Maintain alphabetical order within each category of servers.",
                    "Accurate information: Ensure that all information is accurate and up-to-date.",
                    "One server per line: List each server on a separate line for better readability.",
                    "Clear descriptions: Write concise and informative descriptions for each server."
                ]
            }
        ]
    },
    {
        "id": "license",
        "name": "License",
        "description": "The MIT License (MIT)",
        "repo": "https://github.com/punkpeye/awesome-mcp-servers",
        "tags": [
            "license",
            "MIT"
        ],
        "content": [
            "Copyright \u00a9 2024 Frank Fiegel (frank@glama.ai)",
            "Permission is hereby granted, free of charge, to any person",
            "obtaining a copy of this software and associated documentation",
            "files (the \u201cSoftware\u201d), to deal in the Software without",
            "restriction, including without limitation the rights to use,",
            "copy, modify, merge, publish, distribute, sublicense, and/or sell",
            "copies of the Software, and to permit persons to whom the",
            "Software is furnished to do so, subject to the following",
            "conditions:",
            "The above copyright notice and this permission notice shall be",
            "included in all copies or substantial portions of the Software.",
            "THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND,",
            "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES",
            "OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND",
            "NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT",
            "HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,",
            "WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING",
            "FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR",
            "OTHER DEALINGS IN THE SOFTWARE."
        ],
        "configurable": false
    },
    {
        "branches": [
            {
                "id": "main",
                "name": "main",
                "isDefault": true,
                "description": "The primary branch for development.",
                "updated": "2025-01-11T19:57:15.000+08:00"
            },
            {
                "id": "revert-80-main",
                "name": "revert-80-main",
                "isDefault": false,
                "description": "A branch for reverting changes to main.",
                "updated": "2024-12-09T00:00:59.000+08:00"
            }
        ]
    },
    {
        "forks": [
            {
                "id": "awesome-mcp-servers-1",
                "name": "awesome-mcp-servers-1",
                "description": "A collection of MCP servers. Contribute to punkpeye/awesome-mcp-servers development by creating an account on GitHub.",
                "repo": "https://github.com/danny-avila/awesome-mcp-servers-1",
                "tags": [
                    "mcp",
                    "servers"
                ],
                "stars": 1,
                "createdAt": "2025-01-11T01:28:16+08:00",
                "updatedAt": "2025-01-11T01:35:27+08:00"
            },
            {
                "id": "awesome-mcp-servers",
                "name": "awesome-mcp-servers",
                "description": "A collection of MCP servers. Contribute to executeautomation/awesome-mcp-servers development by creating an account on GitHub.",
                "repo": "https://github.com/executeautomation/awesome-mcp-servers",
                "tags": [
                    "mcp",
                    "servers"
                ],
                "stars": 1,
                "createdAt": "2024-12-05T08:58:05+08:00",
                "updatedAt": "2024-12-05T09:03:11+08:00"
            },
            {
                "id": "awesome-mcp-servers",
                "name": "awesome-mcp-servers",
                "description": "A collection of MCP servers. Contribute to jlowin/awesome-mcp-servers development by creating an account on GitHub.",
                "repo": "https://github.com/jlowin/awesome-mcp-servers",
                "tags": [
                    "mcp",
                    "servers"
                ],
                "stars": 1,
                "createdAt": "2024-12-17T22:31:36+08:00",
                "updatedAt": "2024-12-17T22:34:42+08:00"
            },
            {
                "id": "awesome-mcp-servers",
                "name": "awesome-mcp-servers",
                "description": "A collection of MCP servers. Contribute to MarkusPfundstein/awesome-mcp-servers development by creating an account on GitHub.",
                "repo": "https://github.com/MarkusPfundstein/awesome-mcp-servers-f",
                "tags": [
                    "mcp",
                    "servers"
                ],
                "stars": 0,
                "createdAt": "2024-12-06T05:55:23+08:00",
                "updatedAt": "2024-12-06T14:40:14+08:00"
            }
        ]
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "pullRequests": [
            {
                "id": "185",
                "title": "Add iterm-mcp",
                "author": "ferrislucas",
                "createdAt": "2025-01-14T04:52:57Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/185",
                "status": "open"
            },
            {
                "id": "184",
                "title": "Add Java and Spring MCP SDK link",
                "author": "tzolov",
                "createdAt": "2025-01-13T16:07:52Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/184",
                "status": "open"
            },
            {
                "id": "183",
                "title": "docs: Update README.md with LibreChat Client",
                "author": "danny-avila",
                "createdAt": "2025-01-10T17:29:57Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/183",
                "status": "open"
            },
            {
                "id": "179",
                "title": "add elasticsearch-mcp-server",
                "author": "cr7258",
                "createdAt": "2025-01-09T09:25:44Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/179",
                "status": "open"
            },
            {
                "id": "178",
                "title": "add mcp-wecombot-server",
                "author": "gotoolkits",
                "createdAt": "2025-01-08T16:12:02Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/178",
                "status": "open"
            },
            {
                "id": "174",
                "title": "JIRA and CONFLUENCE MCP servers",
                "author": "thibautleaux-kreactive",
                "createdAt": "2025-01-06T13:37:42Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/174",
                "status": "open"
            },
            {
                "id": "165",
                "title": "YouTube Transcriber - Automated Transcription and Key Point Extraction",
                "author": "theodx2",
                "createdAt": "2025-01-02T00:35:29Z",
                "url": "https://github.com/punkpeye/awesome-mcp-servers/pull/165",
                "status": "open"
            }
        ]
    },
    {
        "id": "security",
        "name": "Security",
        "description": "No published security advisories.",
        "repo": "https://github.com/punkpeye/awesome-mcp-servers",
        "tags": [
            "security"
        ],
        "configurable": false
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "fastmcp",
        "name": "FastMCP",
        "description": "A TypeScript framework for building MCP servers capable of handling client sessions.",
        "tags": [
            "typescript",
            "mcp",
            "framework"
        ],
        "repo": "https://github.com/punkpeye/fastmcp",
        "command": "npx",
        "baseArgs": [
            "@modelcontextprotocol/server-fastmcp"
        ],
        "configurable": false
    },
    {
        "id": "mcp-proxy",
        "name": "MCP Proxy",
        "description": "A TypeScript SSE proxy for MCP servers that use stdio transport.",
        "tags": [
            "proxy",
            "sse",
            "typescript"
        ],
        "repo": "https://github.com/punkpeye/mcp-proxy",
        "command": "npx",
        "baseArgs": [
            "mcp-proxy"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "port": {
                    "type": "number",
                    "description": "Port for the SSE server",
                    "required": true
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for the SSE server",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "port": {
                "type": "single",
                "position": 2
            },
            "endpoint": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "chat-openai",
        "name": "OpenAI",
        "description": "Integrate Claude with Any OpenAI SDK Compatible Chat Completion API.",
        "tags": [
            "chat",
            "openai"
        ],
        "repo": "https://github.com/pyroprompts/any-chat-completions-mcp",
        "command": "node",
        "baseArgs": [
            "/path/to/any-chat-completions-mcp/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AI_CHAT_KEY": {
                    "type": "string",
                    "description": "OpenAI API Key",
                    "required": true
                },
                "AI_CHAT_NAME": {
                    "type": "string",
                    "description": "Name of the AI Chat Provider",
                    "required": true
                },
                "AI_CHAT_MODEL": {
                    "type": "string",
                    "description": "Model to use for the AI Chat",
                    "required": true
                },
                "AI_CHAT_BASE_URL": {
                    "type": "string",
                    "description": "Base URL for the OpenAI API",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "AI_CHAT_KEY": {
                "type": "env",
                "key": "OPENAI_KEY"
            },
            "AI_CHAT_NAME": {
                "type": "single",
                "position": 2
            },
            "AI_CHAT_MODEL": {
                "type": "single",
                "position": 3
            },
            "AI_CHAT_BASE_URL": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "qdrant",
        "name": "Qdrant MCP Server",
        "description": "A basic Model Context Protocol server for keeping and retrieving memories in the Qdrant vector search engine.",
        "tags": [
            "mcp",
            "qdrant",
            "vector-search"
        ],
        "repo": "https://github.com/qdrant/mcp-server-qdrant",
        "command": "uvx",
        "baseArgs": [
            "mcp-server-qdrant"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "qdrantUrl": {
                    "type": "string",
                    "description": "URL of the Qdrant server",
                    "required": true
                },
                "qdrantApiKey": {
                    "type": "string",
                    "description": "API key for the Qdrant server",
                    "required": false
                },
                "collectionName": {
                    "type": "string",
                    "description": "Name of the collection to use",
                    "required": true
                },
                "fastembedModelName": {
                    "type": "string",
                    "description": "Name of the FastEmbed model to use",
                    "required": false
                },
                "qdrantLocalPath": {
                    "type": "string",
                    "description": "Path to the local Qdrant database",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "qdrantUrl": {
                "type": "single",
                "position": 2
            },
            "qdrantApiKey": {
                "type": "single",
                "position": 4
            },
            "collectionName": {
                "type": "single",
                "position": 6
            },
            "fastembedModelName": {
                "type": "single",
                "position": 8
            },
            "qdrantLocalPath": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "mcp-server-manager",
        "name": "MCP Server Manager",
        "description": "Install and manage Model Context Protocol (MCP) servers for Claude and other LLM clients.",
        "tags": [
            "mcp",
            "server",
            "management"
        ],
        "repo": "https://github.com/qpd-v/mcp-server-manager",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-manager"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "configPaths": {
                    "type": "array",
                    "description": "List of MCP configuration file paths to monitor",
                    "required": true,
                    "minItems": 1
                },
                "autoRefresh": {
                    "type": "boolean",
                    "description": "Enable/disable automatic refresh of server status",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "configPaths": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "mongodb",
        "name": "Coincap MCP",
        "description": "Allows you to query crypto information from coincap's public API - no API keys or registration required",
        "tags": [
            "crypto",
            "api"
        ],
        "repo": "https://github.com/QuantGeekDev/coincap-mcp",
        "command": "npx",
        "baseArgs": [
            "coincap-mcp"
        ],
        "configurable": false
    },
    {
        "id": "docker-mcp",
        "name": "Docker MCP",
        "description": "A powerful Model Context Protocol (MCP) server for Docker operations, enabling seamless container and compose stack management through Claude AI.",
        "tags": [
            "docker",
            "mcp",
            "container",
            "compose"
        ],
        "repo": "https://github.com/QuantGeekDev/docker-mcp",
        "command": "uvx",
        "baseArgs": [
            "docker-mcp"
        ],
        "configurable": false
    },
    {
        "id": "mcp-framework",
        "name": "MCP Framework",
        "description": "A framework for building Model Context Protocol (MCP) servers elegantly in TypeScript.",
        "tags": [
            "framework",
            "typescript",
            "mcp"
        ],
        "repo": "https://github.com/QuantGeekDev/mcp-framework",
        "command": "npm",
        "baseArgs": [
            "install",
            "-g",
            "mcp-framework"
        ],
        "configurable": false
    },
    {
        "id": "mongodb",
        "name": "MongoDB",
        "description": "A Model Context Protocol (MCP) server that enables LLMs to interact directly with MongoDB databases.",
        "tags": [
            "database",
            "mongodb"
        ],
        "repo": "https://github.com/QuantGeekDev/mongo-mcp",
        "command": "npx",
        "baseArgs": [
            "mongo-mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "MongoDB connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "ns-server",
        "name": "NS Travel Information MCP Server",
        "description": "An MCP server that provides access to NS (Dutch Railways) travel information.",
        "tags": [
            "ns",
            "travel",
            "information"
        ],
        "repo": "https://github.com/r-huijts/ns-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/ns-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "NS_API_KEY": {
                    "type": "string",
                    "description": "Your NS API key (required)",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "NS_API_KEY": {
                "type": "env",
                "key": "NS_API_KEY"
            }
        }
    },
    {
        "id": "rijksmuseum",
        "name": "Rijksmuseum",
        "description": "This project implements a Model Context Protocol (MCP) server that interfaces with the Rijksmuseum API. It allows you to search for artworks, retrieve detailed information about specific artworks, access image tiles for artworks, and explore user-created collections from Amsterdam's famous Rijksmuseum.",
        "tags": [
            "api",
            "artwork",
            "museum"
        ],
        "repo": "https://github.com/r-huijts/rijksmuseum-mcp",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "RIJKSMUSEUM_API_KEY": {
                    "type": "string",
                    "description": "Rijksmuseum API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "RIJKSMUSEUM_API_KEY": {
                "type": "env",
                "key": "RIJKSMUSEUM_API_KEY"
            }
        }
    },
    {
        "id": "mcp-apple-notes",
        "name": "MCP Apple Notes",
        "description": "A Model Context Protocol (MCP) server that enables semantic search and RAG (Retrieval Augmented Generation) over your Apple Notes.",
        "tags": [
            "mcp",
            "apple",
            "notes",
            "semantic-search"
        ],
        "repo": "https://github.com/RafalWilinski/mcp-apple-notes",
        "command": "bun",
        "baseArgs": [
            "/Users/<YOUR_USER_NAME>/apple-notes-mcp/index.ts"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Your system username for file paths.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "username": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "tavily",
        "name": "Tavily MCP Server",
        "description": "A Model Context Protocol server that provides AI-powered web search capabilities using Tavily's search API.",
        "tags": [
            "search",
            "ai",
            "tavily"
        ],
        "repo": "https://github.com/RamXX/mcp-tavily",
        "command": "python",
        "baseArgs": [
            "-m",
            "mcp_server_tavily"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Tavily API key for accessing the server.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "TAVILY_API_KEY"
            }
        }
    },
    {
        "id": "mcp-server-ds",
        "name": "MCP Server for Data Exploration",
        "description": "A versatile tool designed for interactive data exploration.",
        "tags": [
            "data",
            "exploration",
            "mcp"
        ],
        "repo": "https://github.com/reading-plus-ai/mcp-server-data-exploration",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/username/src/mcp-server-ds",
            "run",
            "mcp-server-ds"
        ],
        "configurable": false,
        "env": {}
    },
    {
        "id": "filesystem",
        "name": "Filesystem",
        "description": "Secure file operations with configurable access controls",
        "tags": [
            "filesystem",
            "access-control"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-filesystem"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "paths": {
                    "type": "array",
                    "description": "Allowed file system paths",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "paths": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "apple-shortcuts",
        "name": "Apple Shortcuts MCP Server",
        "description": "A Model Context Protocol (MCP) server that lets AI assistants like Claude control Apple Shortcuts automations.",
        "tags": [
            "apple",
            "shortcuts",
            "mcp"
        ],
        "repo": "https://github.com/recursechat/mcp-server-apple-shortcuts",
        "command": "npx",
        "baseArgs": [
            "-y",
            "mcp-server-apple-shortcuts"
        ],
        "configurable": false,
        "configSchema": null,
        "argsMapping": {}
    },
    {
        "id": "ancestry",
        "name": "Ancestry MCP Server",
        "description": "Python server implementing Model Context Protocol (MCP) for interactibility with .ged files (GEDCOM files, commonly seen on Ancestry.com)",
        "tags": [
            "mcp",
            "gedcom",
            "ancestry"
        ],
        "repo": "https://github.com/reeeeemo/ancestry-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@smithery/cli",
            "install",
            "mcp-server-ancestry"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "gedcomPath": {
                    "type": "string",
                    "description": "Path to your .ged files",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "gedcomPath": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "mcp-server-aws",
        "name": "AWS MCP Server",
        "description": "A Model Context Protocol server implementation for AWS operations that currently supports S3 and DynamoDB services. All operations are automatically logged and can be accessed through the `audit://aws-operations` resource endpoint.",
        "repo": "https://github.com/rishikavikondala/mcp-server-aws",
        "tags": [
            "aws",
            "mcp",
            "server"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/repo/mcp-server-aws",
            "run",
            "mcp-server-aws"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "AWS_ACCESS_KEY_ID": {
                    "type": "string",
                    "description": "AWS Access Key ID",
                    "required": true
                },
                "AWS_SECRET_ACCESS_KEY": {
                    "type": "string",
                    "description": "AWS Secret Access Key",
                    "required": true
                },
                "AWS_REGION": {
                    "type": "string",
                    "description": "AWS Region",
                    "required": true,
                    "default": "us-east-1"
                }
            }
        },
        "argsMapping": {
            "AWS_ACCESS_KEY_ID": {
                "type": "env",
                "key": "AWS_ACCESS_KEY_ID"
            },
            "AWS_SECRET_ACCESS_KEY": {
                "type": "env",
                "key": "AWS_SECRET_ACCESS_KEY"
            },
            "AWS_REGION": {
                "type": "env",
                "key": "AWS_REGION"
            }
        }
    },
    {
        "id": "llamacloud",
        "name": "LlamaCloud",
        "description": "A MCP server connecting to a managed index on LlamaCloud",
        "tags": [
            "mcp",
            "cloud",
            "server",
            "index"
        ],
        "repo": "https://github.com/run-llama/mcp-server-llamacloud",
        "command": "node",
        "baseArgs": [
            "/path/to/llamacloud/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "LLAMA_CLOUD_INDEX_NAME": {
                    "type": "string",
                    "description": "Name of the LlamaCloud index",
                    "required": true
                },
                "LLAMA_CLOUD_PROJECT_NAME": {
                    "type": "string",
                    "description": "Name of the LlamaCloud project",
                    "required": true
                },
                "LLAMA_CLOUD_API_KEY": {
                    "type": "string",
                    "description": "API key for LlamaCloud",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "LLAMA_CLOUD_INDEX_NAME": {
                "type": "env",
                "key": "LLAMA_CLOUD_INDEX_NAME"
            },
            "LLAMA_CLOUD_PROJECT_NAME": {
                "type": "env",
                "key": "LLAMA_CLOUD_PROJECT_NAME"
            },
            "LLAMA_CLOUD_API_KEY": {
                "type": "env",
                "key": "LLAMA_CLOUD_API_KEY"
            }
        }
    },
    {
        "id": "my_database",
        "name": "MCP Alchemy",
        "description": "MCP Alchemy connects Claude Desktop directly to your databases, allowing it to explore database structure, assist in SQL queries, display table relationships, analyze large datasets and create reports.",
        "repo": "https://github.com/runekaagaard/mcp-alchemy",
        "tags": [
            "database",
            "sql",
            "api"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/mcp-alchemy",
            "run",
            "server.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "DB_URL": {
                    "type": "string",
                    "description": "SQLAlchemy database URL",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "DB_URL": {
                "type": "env",
                "key": "DB_URL"
            }
        }
    },
    {
        "id": "wcgw",
        "name": "WCGW",
        "description": "Claude desktop support enabling shell and file system access on Mac.",
        "repo": "https://github.com/rusiaaman/wcgw",
        "tags": [
            "desktop",
            "automation"
        ],
        "command": "uv",
        "baseArgs": [
            "tool",
            "run"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Command to run the server",
                    "required": true
                },
                "args": {
                    "type": "array",
                    "description": "Arguments for the command",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "args": {
                "type": "spread",
                "position": 3
            }
        }
    },
    {
        "id": "modelcontextprotocol-net",
        "name": "ModelContextProtocol.NET",
        "description": "A C# SDK implementation of the Model Context Protocol (MCP), enabling seamless integration between AI models and development environments.",
        "tags": [
            "mcp",
            "sdk",
            "csharp"
        ],
        "repo": "https://github.com/salty-flower/ModelContextProtocol.NET",
        "command": "dotnet",
        "baseArgs": [
            "add",
            "package",
            "ModelContextProtocol.NET.Server"
        ],
        "configurable": false
    },
    {
        "id": "package-version",
        "name": "Package Version MCP Server",
        "description": "An MCP server that provides tools for checking latest stable package versions from multiple package registries.",
        "tags": [
            "mcp",
            "package management",
            "version checking"
        ],
        "repo": "https://github.com/sammcj/mcp-package-version",
        "command": "npx",
        "baseArgs": [
            "-y",
            "mcp-package-version"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "dependencies": {
                    "type": "object",
                    "description": "Package dependencies to check versions for",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "dependencies": {
                "type": "spread",
                "position": 0
            }
        }
    },
    {
        "id": "image-gen",
        "name": "Image Generation MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables seamless generation of high-quality images using the Flux.1 Schnell model via Together AI. This server provides a standardized interface to specify image generation parameters.",
        "tags": [
            "image",
            "generation",
            "MCP"
        ],
        "repo": "https://github.com/sarthakkimtani/mcp-image-gen",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/ABSOLUTE/PATH/TO/image-gen/",
            "run",
            "image-gen"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "prompt": {
                    "type": "string",
                    "description": "A descriptive prompt for generating the image (e.g., 'a futuristic cityscape at sunset')",
                    "required": true
                },
                "width": {
                    "type": "integer",
                    "description": "Width of the generated image in pixels (optional)"
                },
                "height": {
                    "type": "integer",
                    "description": "Height of the generated image in pixels (optional)"
                }
            }
        },
        "argsMapping": {
            "prompt": {
                "type": "single",
                "position": 2
            },
            "width": {
                "type": "single",
                "position": 3
            },
            "height": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "anki-mcp-server",
        "name": "Anki MCP Server",
        "description": "An MCP server implementation that connects to a locally running Anki, providing card review and creation. This server is designed to work with the Anki desktop app and the Anki-Connect add-on. Make sure you have the add-on installed before using.",
        "tags": [
            "anki",
            "mcp",
            "server"
        ],
        "repo": "https://github.com/scorzeth/anki-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/anki-mcp-server/build/index.js"
        ],
        "configurable": false
    },
    {
        "id": "mcp-bridge",
        "name": "MCP-Bridge",
        "description": "MCP-Bridge acts as a bridge between the OpenAI API and MCP tools, allowing developers to leverage MCP tools through the OpenAI API interface.",
        "tags": [
            "mcp",
            "bridge",
            "openai"
        ],
        "repo": "https://github.com/SecretiveShell/MCP-Bridge",
        "command": "uvx",
        "baseArgs": [
            "mcp-server-fetch"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "api_key": {
                    "type": "string",
                    "description": "API key for accessing the inference server",
                    "required": false
                },
                "base_url": {
                    "type": "string",
                    "description": "Base URL for the inference server",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "api_key": {
                "type": "env",
                "key": "API_KEY"
            },
            "base_url": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "searxng",
        "name": "MCP-searxng",
        "description": "An MCP server for connecting agentic systems to search systems via searXNG.",
        "tags": [
            "search",
            "searxng"
        ],
        "repo": "https://github.com/SecretiveShell/MCP-searxng",
        "command": "uv",
        "baseArgs": [
            "--project",
            "/absoloute/path/to/MCP-searxng/",
            "run",
            "/absoloute/path/to/MCP-searxng/mcp-searxng/main.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL of the searxng server",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "url": {
                "type": "env",
                "key": "SEARXNG_URL"
            }
        }
    },
    {
        "id": "MCP-timeserver",
        "name": "MCP-timeserver",
        "description": "A simple MCP server that exposes datetime information to agentic systems and chat REPLs",
        "tags": [
            "datetime",
            "server",
            "MCP"
        ],
        "repo": "https://github.com/SecretiveShell/MCP-timeserver",
        "command": "uvx",
        "baseArgs": [
            "MCP-timeserver"
        ],
        "configurable": false
    },
    {
        "id": "MCP-wolfram-alpha",
        "name": "MCP-Wolfram-Alpha",
        "description": "A MCP server to connect to Wolfram Alpha API.",
        "tags": [
            "wolfram",
            "api"
        ],
        "repo": "https://github.com/SecretiveShell/MCP-wolfram-alpha",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/full/path/to/MCP-wolfram-alpha",
            "run",
            "MCP-wolfram-alpha"
        ],
        "env": {
            "WOLFRAM_API_KEY": "your-app-id"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "WOLFRAM_API_KEY": {
                    "type": "string",
                    "description": "Wolfram Alpha API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            },
            "apiKey": {
                "type": "env",
                "key": "WOLFRAM_API_KEY"
            }
        }
    },
    {
        "id": "unomi-server",
        "name": "Inoyu Apache Unomi MCP Server",
        "description": "A Model Context Protocol server enabling Claude to maintain user context through Apache Unomi profile management.",
        "repo": "https://github.com/sergehuber/inoyu-mcp-unomi-server",
        "tags": [
            "unomi",
            "apache",
            "mcp"
        ],
        "command": "npx",
        "baseArgs": [
            "@inoyu/mcp-unomi-server"
        ],
        "env": {
            "UNOMI_BASE_URL": "http://your-unomi-server:8181",
            "UNOMI_USERNAME": "your-username",
            "UNOMI_PASSWORD": "your-password",
            "UNOMI_PROFILE_ID": "your-profile-id",
            "UNOMI_KEY": "your-unomi-key",
            "UNOMI_EMAIL": "your-email@example.com",
            "UNOMI_SOURCE_ID": "claude-desktop"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "UNOMI_BASE_URL": {
                    "type": "string",
                    "description": "Base URL of the Unomi server",
                    "required": true
                },
                "UNOMI_USERNAME": {
                    "type": "string",
                    "description": "Username for Unomi authentication",
                    "required": true
                },
                "UNOMI_PASSWORD": {
                    "type": "string",
                    "description": "Password for Unomi authentication",
                    "required": true
                },
                "UNOMI_PROFILE_ID": {
                    "type": "string",
                    "description": "Profile ID in Unomi",
                    "required": true
                },
                "UNOMI_KEY": {
                    "type": "string",
                    "description": "Key for protected events in Unomi",
                    "required": true
                },
                "UNOMI_EMAIL": {
                    "type": "string",
                    "description": "Email for user identification",
                    "required": true
                },
                "UNOMI_SOURCE_ID": {
                    "type": "string",
                    "description": "Source ID for identifying the source of data",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "UNOMI_BASE_URL": {
                "type": "env",
                "key": "UNOMI_BASE_URL"
            },
            "UNOMI_USERNAME": {
                "type": "env",
                "key": "UNOMI_USERNAME"
            },
            "UNOMI_PASSWORD": {
                "type": "env",
                "key": "UNOMI_PASSWORD"
            },
            "UNOMI_PROFILE_ID": {
                "type": "env",
                "key": "UNOMI_PROFILE_ID"
            },
            "UNOMI_KEY": {
                "type": "env",
                "key": "UNOMI_KEY"
            },
            "UNOMI_EMAIL": {
                "type": "env",
                "key": "UNOMI_EMAIL"
            },
            "UNOMI_SOURCE_ID": {
                "type": "env",
                "key": "UNOMI_SOURCE_ID"
            }
        }
    },
    {
        "id": "openrpc",
        "name": "OpenRPC MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides JSON-RPC functionality through OpenRPC.",
        "tags": [
            "json-rpc",
            "mcp",
            "openrpc"
        ],
        "repo": "https://github.com/shanejonas/openrpc-mpc-server",
        "command": "node",
        "baseArgs": [
            "/path/to/openrpc-mcp-server/build/index.js"
        ],
        "configurable": false
    },
    {
        "id": "postman-runner",
        "name": "Postman MCP Server",
        "description": "An MCP (Model Context Protocol) server that enables running Postman collections using Newman. This server allows LLMs to execute API tests and get detailed results through a standardized interface.",
        "tags": [
            "postman",
            "mcp",
            "api",
            "testing"
        ],
        "repo": "https://github.com/shannonlal/mcp-postman",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/mcp-postman/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "Path or URL to the Postman collection",
                    "required": true
                },
                "environment": {
                    "type": "string",
                    "description": "Path or URL to environment file",
                    "required": false
                },
                "globals": {
                    "type": "string",
                    "description": "Path or URL to globals file",
                    "required": false
                },
                "iterationCount": {
                    "type": "number",
                    "description": "Number of iterations to run",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "collection": {
                "type": "single",
                "position": 0
            },
            "environment": {
                "type": "single",
                "position": 1
            },
            "globals": {
                "type": "single",
                "position": 2
            },
            "iterationCount": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "framer-plugin",
        "name": "Framer Plugin MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables creation and management of Framer plugins with web3 capabilities.",
        "tags": [
            "framer",
            "plugin",
            "web3"
        ],
        "repo": "https://github.com/Sheshiyer/framer-plugin-mcp",
        "command": "node",
        "baseArgs": [
            "/path/to/framer-plugin-mcp/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "web3Features": {
                    "type": "array",
                    "description": "Array of features to include (wallet-connect, contract-interaction, nft-display)",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "pluginPath": {
                "type": "single",
                "position": 0
            },
            "web3Features": {
                "type": "spread",
                "position": 1
            }
        }
    },
    {
        "id": "windows-cli",
        "name": "Windows CLI MCP Server",
        "description": "MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, Git Bash shells, and remote systems via SSH.",
        "tags": [
            "windows",
            "cli",
            "mcp"
        ],
        "repo": "https://github.com/SimonB97/win-cli-mcp-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@simonb97/server-win-cli"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "security": {
                    "type": "object",
                    "description": "Security settings for the MCP server",
                    "required": true,
                    "properties": {
                        "maxCommandLength": {
                            "type": "number",
                            "description": "Maximum allowed length for any command",
                            "required": true
                        },
                        "blockedCommands": {
                            "type": "array",
                            "description": "Commands to block - blocks both direct use and full paths",
                            "required": true,
                            "minItems": 1
                        },
                        "blockedArguments": {
                            "type": "array",
                            "description": "Arguments that will be blocked when used with any command",
                            "required": true,
                            "minItems": 1
                        },
                        "allowedPaths": {
                            "type": "array",
                            "description": "List of directories where commands can be executed",
                            "required": true,
                            "minItems": 1
                        },
                        "restrictWorkingDirectory": {
                            "type": "boolean",
                            "description": "If true, commands can only run in allowedPaths",
                            "required": true
                        },
                        "logCommands": {
                            "type": "boolean",
                            "description": "If true, saves command history",
                            "required": true
                        },
                        "maxHistorySize": {
                            "type": "number",
                            "description": "Maximum number of commands to keep in history",
                            "required": true
                        },
                        "commandTimeout": {
                            "type": "number",
                            "description": "Timeout for command execution in seconds",
                            "required": true
                        },
                        "enableInjectionProtection": {
                            "type": "boolean",
                            "description": "Enable or disable protection against command injection",
                            "required": true
                        }
                    }
                },
                "shells": {
                    "type": "object",
                    "description": "Shell configuration",
                    "required": true,
                    "properties": {
                        "powershell": {
                            "type": "object",
                            "description": "PowerShell shell configuration",
                            "required": true,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable/disable this shell",
                                    "required": true
                                },
                                "command": {
                                    "type": "string",
                                    "description": "Path to shell executable",
                                    "required": true
                                },
                                "args": {
                                    "type": "array",
                                    "description": "Default arguments for the shell",
                                    "required": true,
                                    "minItems": 1
                                },
                                "blockedOperators": {
                                    "type": "array",
                                    "description": "Specify which command operators to block",
                                    "required": false
                                }
                            }
                        },
                        "cmd": {
                            "type": "object",
                            "description": "Command Prompt shell configuration",
                            "required": true,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable/disable this shell",
                                    "required": true
                                },
                                "command": {
                                    "type": "string",
                                    "description": "Path to shell executable",
                                    "required": true
                                },
                                "args": {
                                    "type": "array",
                                    "description": "Default arguments for the shell",
                                    "required": true,
                                    "minItems": 1
                                },
                                "blockedOperators": {
                                    "type": "array",
                                    "description": "Specify which command operators to block",
                                    "required": false
                                }
                            }
                        },
                        "gitbash": {
                            "type": "object",
                            "description": "Git Bash shell configuration",
                            "required": true,
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable/disable this shell",
                                    "required": true
                                },
                                "command": {
                                    "type": "string",
                                    "description": "Path to shell executable",
                                    "required": true
                                },
                                "args": {
                                    "type": "array",
                                    "description": "Default arguments for the shell",
                                    "required": true,
                                    "minItems": 1
                                },
                                "blockedOperators": {
                                    "type": "array",
                                    "description": "Specify which command operators to block",
                                    "required": false
                                }
                            }
                        }
                    }
                },
                "ssh": {
                    "type": "object",
                    "description": "SSH configuration",
                    "required": false,
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable/disable SSH functionality",
                            "required": true
                        },
                        "defaultTimeout": {
                            "type": "number",
                            "description": "Default timeout for SSH commands in seconds",
                            "required": true
                        },
                        "maxConcurrentSessions": {
                            "type": "number",
                            "description": "Maximum number of concurrent SSH sessions",
                            "required": true
                        },
                        "keepaliveInterval": {
                            "type": "number",
                            "description": "Interval for sending keepalive packets",
                            "required": true
                        },
                        "keepaliveCountMax": {
                            "type": "number",
                            "description": "Maximum number of failed keepalive attempts before disconnecting",
                            "required": true
                        },
                        "readyTimeout": {
                            "type": "number",
                            "description": "Timeout for establishing SSH connections (in milliseconds)",
                            "required": true
                        },
                        "connections": {
                            "type": "object",
                            "description": "SSH connection profiles",
                            "required": false
                        }
                    }
                }
            }
        },
        "argsMapping": {}
    },
    {
        "id": "apple-notes-mcp",
        "name": "Apple Notes MCP",
        "description": "Apple Notes Model Context Protocol Server for Claude Desktop.",
        "tags": [
            "notes",
            "database",
            "mcp"
        ],
        "repo": "https://github.com/sirmews/apple-notes-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "{project_dir}",
            "run",
            "apple-notes-mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "project_dir": {
                    "type": "string",
                    "description": "Project directory for the Apple Notes MCP.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "project_dir": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "mcp-pinecone",
        "name": "Pinecone Model Context Protocol Server",
        "description": "Read and write to a Pinecone index.",
        "tags": [
            "pinecone",
            "model-context",
            "server"
        ],
        "repo": "https://github.com/sirmews/mcp-pinecone",
        "command": "uvx",
        "baseArgs": [
            "--index-name",
            "{your-index-name}",
            "--api-key",
            "{your-secret-api-key}",
            "mcp-pinecone"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "indexName": {
                    "type": "string",
                    "description": "The name of the Pinecone index",
                    "required": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "Your Pinecone API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "indexName": {
                "type": "single",
                "position": 1
            },
            "apiKey": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "sefaria_jewish_library",
        "name": "Sefaria Jewish Library",
        "description": "An MCP (Model Context Protocol) server that provides access to Jewish texts from the Sefaria library.",
        "tags": [
            "sefarai",
            "jewish",
            "library"
        ],
        "repo": "https://github.com/Sivan22/mcp-sefaria-server",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:/dev/mcp-sefaria-server",
            "run",
            "sefaria_jewish_library"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "PYTHONIOENCODING": {
                    "type": "string",
                    "description": "Python IO encoding",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "PYTHONIOENCODING": {
                "type": "env",
                "key": "PYTHONIOENCODING"
            }
        }
    },
    {
        "id": "rememberizer",
        "name": "Rememberizer",
        "description": "A Model Context Protocol server for interacting with Rememberizer's document and knowledge management API. This server enables Large Language Models to search, retrieve, and manage documents and integrations through Rememberizer.",
        "tags": [
            "rememberizer",
            "mcp"
        ],
        "repo": "https://github.com/skydeckai/mcp-server-rememberizer",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@smithery/cli",
            "install",
            "mcp-server-rememberizer"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "REMEMBERIZER_API_TOKEN": {
                    "type": "string",
                    "description": "Your Rememberizer API token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "REMEMBERIZER_API_TOKEN": {
                "type": "env",
                "key": "REMEMBERIZER_API_TOKEN"
            }
        }
    },
    {
        "id": "salesforce",
        "name": "Salesforce",
        "description": "A Model Context Protocol (MCP) server implementation for Salesforce integration, allowing LLMs to interact with Salesforce data through SOQL queries and SOSL searches.",
        "tags": [
            "salesforce",
            "api",
            "mcp"
        ],
        "repo": "https://github.com/smn2gnt/MCP-Salesforce",
        "command": "uvx",
        "baseArgs": [
            "--from",
            "mcp-salesforce-connector"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "SALESFORCE_USERNAME": {
                    "type": "string",
                    "description": "Your Salesforce username",
                    "required": true
                },
                "SALESFORCE_PASSWORD": {
                    "type": "string",
                    "description": "Your Salesforce password",
                    "required": true
                },
                "SALESFORCE_SECURITY_TOKEN": {
                    "type": "string",
                    "description": "Your Salesforce security token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "SALESFORCE_USERNAME": {
                "type": "env",
                "key": "SALESFORCE_USERNAME"
            },
            "SALESFORCE_PASSWORD": {
                "type": "env",
                "key": "SALESFORCE_PASSWORD"
            },
            "SALESFORCE_SECURITY_TOKEN": {
                "type": "env",
                "key": "SALESFORCE_SECURITY_TOKEN"
            }
        }
    },
    {
        "id": "openapi-mcp-server",
        "name": "OpenAPI MCP Server",
        "description": "This tool creates a Model Context Protocol (MCP) server that acts as a proxy for any API that has an OpenAPI v3.1 specification.",
        "tags": [
            "api",
            "openapi",
            "proxy"
        ],
        "repo": "https://github.com/snaggle-ai/openapi-mcp-server",
        "command": "npx",
        "baseArgs": [
            "openapi-mcp-server",
            "/path/to/openapi.json"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiSpecPath": {
                    "type": "string",
                    "description": "Path to the OpenAPI specification file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiSpecPath": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "learning-with-claude",
        "name": "Learning with Claude",
        "description": "My learning notes with Claude, focusing on software development topics.",
        "repo": "https://github.com/SongRunqi/learning-with-claude",
        "tags": [
            "java",
            "websocket",
            "proxy",
            "design-patterns"
        ],
        "configurable": false
    },
    {
        "id": "mcp-atlassian",
        "name": "MCP Atlassian",
        "description": "Model Context Protocol (MCP) server for Atlassian Cloud products (Confluence and Jira). This integration is designed specifically for Atlassian Cloud instances and does not support Atlassian Server or Data Center deployments.",
        "tags": [
            "atlassian",
            "mcp",
            "integration"
        ],
        "repo": "https://github.com/sooperset/mcp-atlassian",
        "command": "uvx",
        "baseArgs": [
            "mcp-atlassian"
        ],
        "env": {
            "CONFLUENCE_URL": "https://your-domain.atlassian.net/wiki",
            "CONFLUENCE_USERNAME": "your.email@domain.com",
            "CONFLUENCE_API_TOKEN": "your_api_token",
            "JIRA_URL": "https://your-domain.atlassian.net",
            "JIRA_USERNAME": "your.email@domain.com",
            "JIRA_API_TOKEN": "your_api_token"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "CONFLUENCE_URL": {
                    "type": "string",
                    "description": "Confluence instance URL",
                    "required": true
                },
                "CONFLUENCE_USERNAME": {
                    "type": "string",
                    "description": "Confluence username",
                    "required": true
                },
                "CONFLUENCE_API_TOKEN": {
                    "type": "string",
                    "description": "Confluence API token",
                    "required": true
                },
                "JIRA_URL": {
                    "type": "string",
                    "description": "Jira instance URL",
                    "required": true
                },
                "JIRA_USERNAME": {
                    "type": "string",
                    "description": "Jira username",
                    "required": true
                },
                "JIRA_API_TOKEN": {
                    "type": "string",
                    "description": "Jira API token",
                    "required": true
                }
            }
        }
    },
    {
        "id": "mcp-proxy",
        "name": "MCP Proxy",
        "description": "Tool that lets you switch between server transports.",
        "repo": "https://github.com/sparfenyuk/mcp-proxy",
        "command": "mcp-proxy",
        "baseArgs": [],
        "configurable": true,
        "configSchema": {
            "properties": {
                "command_or_url": {
                    "type": "string",
                    "description": "Command or URL to connect to. When a URL, will run a SSE client, otherwise will run the given command and connect as a stdio client.",
                    "required": true
                },
                "api_access_token": {
                    "type": "string",
                    "description": "Access token Authorization header passed by the client to the SSE server. Can also be set as environment variable API_ACCESS_TOKEN.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "command_or_url": {
                "type": "single",
                "position": 0
            },
            "api_access_token": {
                "type": "env",
                "key": "API_ACCESS_TOKEN"
            }
        }
    },
    {
        "id": "opencti",
        "name": "OpenCTI MCP Server",
        "description": "OpenCTI MCP Server is a Model Context Protocol (MCP) server that provides seamless integration with OpenCTI (Open Cyber Threat Intelligence) platform. It enables querying and retrieving threat intelligence data through a standardized interface.",
        "repo": "https://github.com/Spathodea-Network/opencti-mcp",
        "tags": [
            "mcp",
            "opencti",
            "threat-intelligence"
        ],
        "command": "node",
        "baseArgs": [
            "path/to/opencti-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "OPENCTI_URL": {
                    "type": "string",
                    "description": "Your OpenCTI instance URL",
                    "required": true
                },
                "OPENCTI_TOKEN": {
                    "type": "string",
                    "description": "Your OpenCTI API token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "OPENCTI_URL": {
                "type": "env",
                "key": "OPENCTI_URL"
            },
            "OPENCTI_TOKEN": {
                "type": "env",
                "key": "OPENCTI_TOKEN"
            }
        }
    },
    {
        "id": "webperfect",
        "name": "WebPerfect MCP Server",
        "description": "Transform your images into web-optimized masterpieces with AI-powered precision",
        "tags": [
            "image",
            "optimization",
            "web"
        ],
        "repo": "https://github.com/splendasucks/webperfect-mcp-server",
        "command": "node",
        "baseArgs": [
            "/path/to/webperfect-mcp-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "inputDir": {
                    "type": "string",
                    "description": "Directory containing input images",
                    "required": true
                },
                "outputDir": {
                    "type": "string",
                    "description": "Directory for optimized output",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "inputDir": {
                "type": "single",
                "position": 0
            },
            "outputDir": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "steel-puppeteer",
        "name": "Steel MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables LLMs like Claude to navigate the web through Puppeteer-based tools and Steel.",
        "tags": [
            "mcp",
            "puppeteer",
            "steel"
        ],
        "repo": "https://github.com/steel-dev/steel-mcp-server",
        "command": "node",
        "baseArgs": [
            "path/to/steel-voyager/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "STEEL_LOCAL": {
                    "type": "boolean",
                    "description": "Determines if Steel Voyager runs in local mode.",
                    "required": true
                },
                "STEEL_API_KEY": {
                    "type": "string",
                    "description": "API key for authenticating with Steel.",
                    "required": false
                },
                "STEEL_BASE_URL": {
                    "type": "string",
                    "description": "Base URL for Steel API.",
                    "required": false
                },
                "GLOBAL_WAIT_SECONDS": {
                    "type": "number",
                    "description": "Number of seconds to wait after each tool action.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "path": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "obsidian",
        "name": "Obsidian MCP Server",
        "description": "An MCP (Model Context Protocol) server that enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing and managing notes and tags.",
        "tags": [
            "mcp",
            "obsidian",
            "note",
            "ai"
        ],
        "repo": "https://github.com/StevenStavrakis/obsidian-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "obsidian-mcp"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "vaultPaths": {
                    "type": "array",
                    "description": "Paths to your Obsidian vaults",
                    "required": true,
                    "minItems": 1
                }
            }
        },
        "argsMapping": {
            "vaultPaths": {
                "type": "spread",
                "position": 2
            }
        }
    },
    {
        "id": "foxy-contexts",
        "name": "Foxy Contexts",
        "description": "Foxy contexts is a Golang library for building context servers supporting Model Context Protocol.",
        "tags": [
            "golang",
            "context",
            "mcp"
        ],
        "repo": "https://github.com/strowk/foxy-contexts",
        "command": "git",
        "baseArgs": [
            "clone",
            "https://github.com/strowk/foxy-contexts"
        ],
        "configurable": true,
        "argsMapping": {}
    },
    {
        "id": "mcp_k8s_go",
        "name": "MCP K8S Go",
        "description": "Golang-based MCP server connecting to Kubernetes",
        "tags": [
            "kubernetes",
            "golang",
            "mcp"
        ],
        "repo": "https://github.com/strowk/mcp-k8s-go",
        "command": "mcp-k8s-go",
        "baseArgs": [],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "notion",
        "name": "Notion MCP Server",
        "description": "MCP Server for the Notion API, enabling Claude to interact with Notion workspaces.",
        "tags": [
            "notion",
            "api"
        ],
        "repo": "https://github.com/suekou/mcp-notion-server",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@suekou/mcp-notion-server"
        ],
        "env": {},
        "configurable": true,
        "configSchema": {
            "properties": {
                "NOTION_API_TOKEN": {
                    "type": "string",
                    "description": "Notion integration token for API access",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "NOTION_API_TOKEN": {
                "type": "env",
                "key": "NOTION_API_TOKEN"
            }
        }
    },
    {
        "id": "flightradar24-server",
        "name": "Flightradar24 MCP Server",
        "description": "A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data. Perfect for aviation enthusiasts, travel planners, or anyone curious about flights overhead!",
        "tags": [
            "flightradar24",
            "mcp",
            "server",
            "aviation"
        ],
        "repo": "https://github.com/sunsetcoder/flightradar24-mcp-server",
        "command": "node",
        "baseArgs": [
            "/Users/<username>/<FULL_PATH...>/flightradar24-mcp-server/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "FR24_API_KEY": {
                    "type": "string",
                    "description": "Your Flightradar24 API key",
                    "required": true
                },
                "FR24_API_URL": {
                    "type": "string",
                    "description": "API endpoint for Flightradar24",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "FR24_API_KEY": {
                "type": "env",
                "key": "FR24_API_KEY"
            },
            "FR24_API_URL": {
                "type": "string",
                "position": 1
            }
        }
    },
    {
        "id": "ideagram",
        "name": "Ideogram MCP Server",
        "description": "Ideogram API\u3092\u4f7f\u7528\u3057\u3066\u753b\u50cf\u751f\u6210\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308bModel Context Protocol (MCP) \u30b5\u30fc\u30d0\u30fc",
        "tags": [
            "mcp",
            "api",
            "image-generation"
        ],
        "repo": "https://github.com/Sunwood-ai-labs/ideagram-mcp-server",
        "command": "npm",
        "baseArgs": [
            "install"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "IDEOGRAM_API_KEY": {
                    "type": "string",
                    "description": "Ideogram API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "IDEOGRAM_API_KEY": {
                "type": "env",
                "key": "IDEOGRAM_API_KEY"
            }
        }
    },
    {
        "id": "perplexity",
        "name": "Perplexity MCP Server",
        "description": "MCP Server for the Perplexity API.",
        "tags": [
            "api",
            "perplexity"
        ],
        "repo": "https://github.com/tanigami/mcp-server-perplexity",
        "command": "uvx",
        "baseArgs": [
            "mcp-server-perplexity"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Your Perplexity API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "PERPLEXITY_API_KEY"
            }
        }
    },
    {
        "id": "homeassistant",
        "name": "Home Assistant",
        "description": "A Model Context Protocol Server for Home Assistant",
        "tags": [
            "home-assistant",
            "mcp"
        ],
        "repo": "https://github.com/tevonsb/homeassistant-mcp",
        "command": "node",
        "baseArgs": [
            "/Users/tevonsb/Desktop/mcp/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "token": {
                    "type": "string",
                    "description": "Home Assistant access token",
                    "required": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL for Home Assistant",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "token": {
                "type": "env",
                "key": "TOKEN"
            },
            "baseUrl": {
                "type": "env",
                "key": "BASE_URL"
            }
        }
    },
    {
        "id": "exa",
        "name": "Exa MCP Server",
        "description": "A Model Context Protocol (MCP) server that enables AI assistants to perform web searches using Exa's powerful search API.",
        "repo": "https://github.com/theishangoswami/exa-mcp-server",
        "tags": [
            "mcp",
            "exa",
            "api",
            "search"
        ],
        "command": "npx",
        "baseArgs": [
            "/path/to/exa-mcp-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "Exa API Key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "EXA_API_KEY"
            }
        }
    },
    {
        "id": "mcp-tinybird",
        "name": "Tinybird MCP server",
        "description": "An MCP server to interact with a Tinybird Workspace from any MCP client.",
        "tags": [
            "tinybird",
            "api",
            "data"
        ],
        "repo": "https://github.com/tinybirdco/mcp-tinybird",
        "command": "npx",
        "baseArgs": [
            "@tinybirdco/mcp-tinybird"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "TB_API_URL": {
                    "type": "string",
                    "description": "Tinybird API URL",
                    "required": true
                },
                "TB_ADMIN_TOKEN": {
                    "type": "string",
                    "description": "Tinybird Admin Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "TB_API_URL": {
                "type": "env",
                "key": "TB_API_URL"
            },
            "TB_ADMIN_TOKEN": {
                "type": "env",
                "key": "TB_ADMIN_TOKEN"
            }
        }
    },
    {
        "id": "tavily-search",
        "name": "Tavily Search",
        "description": "A MCP server project using the Tavily API to perform searches based on specified queries.",
        "tags": [
            "search",
            "API"
        ],
        "repo": "https://github.com/Tomatio13/mcp-server-tavily",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "C:\\your_path\\mcp-server-tavily",
            "run",
            "tavily-search"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "TAVILY_API_KEY": {
                    "type": "string",
                    "description": "Your Tavily API key",
                    "required": true
                },
                "PYTHONIOENCODING": {
                    "type": "string",
                    "description": "Python IO encoding",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "directory": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "python-run-mcp",
        "name": "MCP Server",
        "description": "Python service implementing Model Context Protocol (MCP) for Python code execution via standardized API endpoints.",
        "repo": "https://github.com/topherbc/python-run-mcp",
        "tags": [
            "python",
            "mcp",
            "api"
        ],
        "command": "python",
        "baseArgs": [
            "src/server.py"
        ],
        "configurable": false,
        "configSchema": {},
        "argsMapping": {}
    },
    {
        "mcpServers": {
            "cognee": {
                "id": "cognee",
                "name": "Cognee MCP Server",
                "description": "A MCP server project",
                "repo": "https://github.com/topoteretes/cognee-mcp-server",
                "command": "/Users/{user}/cognee/.venv/bin/uv",
                "baseArgs": [
                    "--directory",
                    "/Users/{user}/cognee/cognee-mcp",
                    "run",
                    "cognee"
                ],
                "env": {
                    "ENV": "local",
                    "TOKENIZERS_PARALLELISM": "false",
                    "LLM_API_KEY": "sk-"
                },
                "configurable": true,
                "argsMapping": {
                    "directory": {
                        "type": "single",
                        "position": 1
                    }
                }
            },
            "filesystem": {
                "id": "filesystem",
                "name": "Filesystem",
                "description": "Secure file operations with configurable access controls",
                "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
                "command": "npx",
                "baseArgs": [
                    "-y",
                    "@modelcontextprotocol/server-filesystem"
                ],
                "configurable": true,
                "argsMapping": {
                    "paths": {
                        "type": "spread",
                        "position": 2
                    }
                }
            }
        }
    },
    {
        "id": "cognee",
        "name": "Cognee MCP",
        "description": "Reliable LLM Memory for AI Applications and AI Agents",
        "repo": "https://github.com/topoteretes/cognee/tree/dev/cognee-mcp",
        "tags": [
            "mcp",
            "cognee",
            "ai"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/Users/{user}/cognee/cognee-mcp",
            "run",
            "cognee"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "ENV": {
                    "type": "string",
                    "description": "Environment setting",
                    "required": true
                },
                "TOKENIZERS_PARALLELISM": {
                    "type": "boolean",
                    "description": "Enable parallelism for tokenizers",
                    "required": true
                },
                "LLM_API_KEY": {
                    "type": "string",
                    "description": "API key for LLM",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "sequential-thinking",
        "name": "Sequential Thinking",
        "description": "Verify your MCP server installation on Windows with thorough steps.",
        "tags": [
            "mcp",
            "server",
            "windows",
            "installation",
            "verification"
        ],
        "repo": "https://github.com/trevorwilkerson/Windows-MCP-Server-Installation-Verification-Guide",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-sequential-thinking"
        ],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "shell",
        "name": "MCP Shell Server",
        "description": "A secure shell command execution server implementing the Model Context Protocol (MCP). This server allows remote execution of whitelisted shell commands with support for stdin input.",
        "tags": [
            "shell",
            "mcp",
            "command-execution"
        ],
        "repo": "https://github.com/tumf/mcp-shell-server",
        "command": "uvx",
        "baseArgs": [
            "mcp-shell-server"
        ],
        "env": {
            "ALLOW_COMMANDS": "ls,cat,pwd,grep,wc,touch,find"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "command": {
                    "type": "array",
                    "description": "Command and its arguments as array elements",
                    "required": true,
                    "minItems": 1
                },
                "stdin": {
                    "type": "string",
                    "description": "Input to be passed to the command",
                    "required": false
                },
                "directory": {
                    "type": "string",
                    "description": "Working directory for command execution",
                    "required": false
                },
                "timeout": {
                    "type": "integer",
                    "description": "Maximum execution time in seconds",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "command": {
                "type": "spread",
                "position": 0
            },
            "stdin": {
                "type": "single",
                "position": 2
            },
            "directory": {
                "type": "single",
                "position": 3
            },
            "timeout": {
                "type": "single",
                "position": 4
            }
        }
    },
    {
        "id": "text-editor",
        "name": "MCP Text Editor",
        "description": "A Model Context Protocol (MCP) server that provides line-oriented text file editing capabilities through a standardized API. Optimized for LLM tools with efficient partial file access to minimize token usage.",
        "repo": "https://github.com/tumf/mcp-text-editor",
        "tags": [
            "text-editor",
            "api",
            "llm",
            "file-access"
        ],
        "command": "uvx",
        "baseArgs": [
            "mcp-text-editor"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "file_path": {
                    "type": "string",
                    "description": "Path to the text file",
                    "required": true
                },
                "line_start": {
                    "type": "integer",
                    "description": "Line number to start from (1-based)",
                    "required": true
                },
                "line_end": {
                    "type": "integer",
                    "description": "Line number to end at (inclusive, null for end of file)",
                    "required": false
                },
                "encoding": {
                    "type": "string",
                    "description": "File encoding (default: 'utf-8')",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "file_path": {
                "type": "single",
                "position": 0
            },
            "line_start": {
                "type": "single",
                "position": 1
            },
            "line_end": {
                "type": "single",
                "position": 2
            },
            "encoding": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "gpt-computer-assistant",
        "name": "GPT Computer Assistant",
        "description": "AI agent framework designed to automate repetitive tasks across multiple operating systems.",
        "tags": [
            "ai",
            "automation",
            "framework"
        ],
        "repo": "https://github.com/Upsonic/gpt-computer-assistant",
        "command": "pip",
        "baseArgs": [
            "install",
            "gpt-computer-assistant"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key for access to external services.",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "apiKey": {
                "type": "env",
                "key": "GCA_API_KEY"
            }
        }
    },
    {
        "id": "google-calendar",
        "name": "Google Calendar",
        "description": "This MCP server allows Claude to interact with your Google Calendar, enabling capabilities like listing events, creating meetings, and finding free time slots.",
        "tags": [
            "google",
            "calendar",
            "api"
        ],
        "repo": "https://github.com/v-3/google-calendar",
        "command": "node",
        "baseArgs": [
            "/ABSOLUTE/PATH/TO/YOUR/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Google Client ID",
                    "required": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Google Client Secret",
                    "required": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "Redirect URI for OAuth 2.0",
                    "required": true
                },
                "refreshToken": {
                    "type": "string",
                    "description": "OAuth 2.0 Refresh Token",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "clientId": {
                "type": "env",
                "key": "GOOGLE_CLIENT_ID"
            },
            "clientSecret": {
                "type": "env",
                "key": "GOOGLE_CLIENT_SECRET"
            },
            "redirectUri": {
                "type": "env",
                "key": "GOOGLE_REDIRECT_URI"
            },
            "refreshToken": {
                "type": "env",
                "key": "GOOGLE_REFRESH_TOKEN"
            }
        }
    },
    {
        "id": "notion",
        "name": "Notion MCP Server",
        "description": "A Model Context Protocol (MCP) server that provides seamless integration with Notion. This server enables LLMs to interact with your Notion workspace through standardized tools for searching, reading, creating, and updating pages.",
        "tags": [
            "notion",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/v-3/notion-server",
        "command": "node",
        "baseArgs": [
            "/absolute/path/to/notion-server/build/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "NOTION_API_KEY": {
                    "type": "string",
                    "description": "Your Notion API key",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "NOTION_API_KEY": {
                "type": "env",
                "key": "NOTION_API_KEY"
            }
        }
    },
    {
        "id": "spotify",
        "name": "Spotify MCP Server",
        "description": "MCP project to connect Claude with Spotify. Built on top of spotipy-dev's API.",
        "tags": [
            "spotify",
            "mcp",
            "api"
        ],
        "repo": "https://github.com/varunneal/spotify-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/spotify_mcp",
            "run",
            "spotify-mcp"
        ],
        "env": {
            "SPOTIFY_CLIENT_ID": "YOUR_CLIENT_ID",
            "SPOTIFY_CLIENT_SECRET": "YOUR_CLIENT_SECRET",
            "SPOTIFY_REDIRECT_URI": "http://localhost:8888"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "clientId": {
                    "type": "string",
                    "description": "Spotify Client ID",
                    "required": true
                },
                "clientSecret": {
                    "type": "string",
                    "description": "Spotify Client Secret",
                    "required": true
                },
                "redirectUri": {
                    "type": "string",
                    "description": "Spotify Redirect URI",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "clientId": {
                "type": "env",
                "key": "SPOTIFY_CLIENT_ID"
            },
            "clientSecret": {
                "type": "env",
                "key": "SPOTIFY_CLIENT_SECRET"
            },
            "redirectUri": {
                "type": "env",
                "key": "SPOTIFY_REDIRECT_URI"
            }
        }
    },
    {
        "id": "x_mcp",
        "name": "X(Twitter) MCP Server",
        "description": "An MCP server to create, manage and publish X/Twitter posts directly through Claude chat.",
        "tags": [
            "twitter",
            "mcp",
            "x-api"
        ],
        "repo": "https://github.com/vidhupv/x-mcp",
        "command": "uv",
        "baseArgs": [
            "--directory",
            "/path/to/x-mcp",
            "run",
            "x-mcp"
        ],
        "env": {
            "TWITTER_API_KEY": "your_api_key",
            "TWITTER_API_SECRET": "your_api_secret",
            "TWITTER_ACCESS_TOKEN": "your_access_token",
            "TWITTER_ACCESS_TOKEN_SECRET": "your_access_token_secret"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "repositoryPath": {
                    "type": "string",
                    "description": "Path to the local x-mcp repository",
                    "required": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "X/Twitter API Key",
                    "required": true
                },
                "apiSecret": {
                    "type": "string",
                    "description": "X/Twitter API Secret",
                    "required": true
                },
                "accessToken": {
                    "type": "string",
                    "description": "X/Twitter Access Token",
                    "required": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "X/Twitter Access Token Secret",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "repositoryPath": {
                "type": "single",
                "position": 1
            },
            "apiKey": {
                "type": "env",
                "key": "TWITTER_API_KEY"
            },
            "apiSecret": {
                "type": "env",
                "key": "TWITTER_API_SECRET"
            },
            "accessToken": {
                "type": "env",
                "key": "TWITTER_ACCESS_TOKEN"
            },
            "accessTokenSecret": {
                "type": "env",
                "key": "TWITTER_ACCESS_TOKEN_SECRET"
            }
        }
    },
    {
        "id": "mcp-pandoc",
        "name": "mcp-pandoc",
        "description": "A Model Context Protocol server for document format conversion using pandoc.",
        "tags": [
            "conversion",
            "document",
            "pandoc"
        ],
        "repo": "https://github.com/vivekVells/mcp-pandoc",
        "command": "uvx",
        "baseArgs": [
            "mcp-pandoc"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "input_file": {
                    "type": "string",
                    "description": "The complete path to the input file.",
                    "required": false
                },
                "output_file": {
                    "type": "string",
                    "description": "The complete path for the output file.",
                    "required": true
                },
                "input_format": {
                    "type": "string",
                    "description": "Source format of the content.",
                    "default": "markdown"
                },
                "output_format": {
                    "type": "string",
                    "description": "Target format.",
                    "default": "markdown"
                },
                "contents": {
                    "type": "string",
                    "description": "Source content to convert.",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "input_file": {
                "type": "single",
                "position": 1
            },
            "output_file": {
                "type": "single",
                "position": 2
            },
            "input_format": {
                "type": "single",
                "position": 3
            },
            "output_format": {
                "type": "single",
                "position": 4
            },
            "contents": {
                "type": "single",
                "position": 5
            }
        }
    },
    {
        "id": "firecrawl",
        "name": "FireCrawl MCP Server",
        "description": "A Model Context Protocol (MCP) server implementation that integrates with FireCrawl for advanced web scraping capabilities.",
        "tags": [
            "scraping",
            "web",
            "mcp"
        ],
        "repo": "https://github.com/vrknetha/mcp-server-firecrawl",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@smithery/cli install mcp-server-firecrawl"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "FIRE_CRAWL_API_KEY": {
                    "type": "string",
                    "description": "Your FireCrawl API key",
                    "required": true
                },
                "FIRE_CRAWL_API_URL": {
                    "type": "string",
                    "description": "Custom API endpoint for self-hosted instances",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "FIRE_CRAWL_API_KEY": {
                "type": "env",
                "key": "FIRE_CRAWL_API_KEY"
            },
            "FIRE_CRAWL_API_URL": {
                "type": "single",
                "position": 1
            }
        }
    },
    {
        "id": "geo",
        "name": "MCP Geo",
        "description": "Geocoding MCP server with GeoPY",
        "tags": [
            "geocoding",
            "python"
        ],
        "repo": "https://github.com/webcoderz/MCP-Geo",
        "command": "uv",
        "baseArgs": [
            "run",
            "--with",
            "fastmcp",
            "fastmcp",
            "run",
            "MCP-Geo/geo.py"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "NOMINATIM_URL": {
                    "type": "string",
                    "description": "Domain for Nominatim",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "NOMINATIM_URL": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "servers": [
            {
                "id": "filesystem",
                "name": "Filesystem",
                "description": "Secure file operations with configurable access controls",
                "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem",
                "tags": [
                    "filesystem",
                    "access-control"
                ],
                "command": "npx",
                "baseArgs": [
                    "-y",
                    "@modelcontextprotocol/server-filesystem"
                ],
                "env": {},
                "configurable": true,
                "configSchema": {
                    "properties": {
                        "paths": {
                            "type": "array",
                            "description": "Allowed file system paths",
                            "required": true,
                            "minItems": 1
                        }
                    }
                },
                "argsMapping": {
                    "paths": {
                        "type": "spread",
                        "position": 2
                    }
                }
            },
            {
                "id": "github",
                "name": "GitHub",
                "description": "Repository management, file operations, and GitHub API integration",
                "tags": [
                    "github",
                    "repository",
                    "api"
                ],
                "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/github",
                "command": "npx",
                "baseArgs": [
                    "-y",
                    "@modelcontextprotocol/server-github"
                ],
                "configurable": true,
                "configSchema": {
                    "properties": {
                        "token": {
                            "type": "string",
                            "description": "GitHub Personal Access Token",
                            "required": true
                        }
                    }
                },
                "argsMapping": {
                    "token": {
                        "type": "env",
                        "key": "GITHUB_PERSONAL_ACCESS_TOKEN"
                    }
                }
            },
            {
                "id": "gdrive",
                "name": "Google Drive",
                "tags": [
                    "google",
                    "filesystem",
                    "api"
                ],
                "description": "File access and search capabilities for Google Drive",
                "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/gdrive",
                "command": "npx",
                "baseArgs": [
                    "-y",
                    "@modelcontextprotocol/server-gdrive"
                ],
                "configurable": false
            }
        ]
    },
    {
        "branches": [
            {
                "id": "main",
                "name": "main",
                "description": "Default branch",
                "updated": "Jan 11, 2025",
                "checkStatus": null,
                "aheadBehind": {
                    "behind": 0,
                    "ahead": 0
                },
                "pullRequest": null,
                "actions": {
                    "delete": false,
                    "menu": true
                }
            }
        ]
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "litemcp",
        "name": "LiteMCP",
        "description": "A TypeScript framework for building MCP (Model Context Protocol) servers elegantly",
        "repo": "https://github.com/wong2/litemcp",
        "tags": [
            "typescript",
            "mcp",
            "framework"
        ],
        "command": "npm",
        "baseArgs": [
            "install",
            "litemcp",
            "zod"
        ],
        "configurable": false
    },
    {
        "id": "mcp-cli",
        "name": "MCP CLI",
        "description": "A CLI inspector for the Model Context Protocol",
        "tags": [
            "cli",
            "mcp",
            "protocol"
        ],
        "repo": "https://github.com/wong2/mcp-cli",
        "command": "npx",
        "baseArgs": [
            "@wong2/mcp-cli"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {}
        },
        "argsMapping": {}
    },
    {
        "id": "mcp-jina-reader",
        "name": "Jina Reader MCP Server",
        "description": "Fetch the content of a remote URL as Markdown with Jina Reader",
        "tags": [
            "jina",
            "mcp",
            "markdown"
        ],
        "repo": "https://github.com/wong2/mcp-jina-reader",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-jina-reader"
        ],
        "configurable": false
    },
    {
        "id": "mcp-server-rag-web-browser",
        "name": "MCP Server for Dify Workflows",
        "description": "A simple implementation of an MCP server for using dify. It achieves the invocation of the Dify workflow by calling the tools of MCP.",
        "repo": "https://github.com/YanxingLiu/dify-mcp-server",
        "tags": [
            "mcp",
            "dify",
            "server"
        ],
        "command": "uv",
        "baseArgs": [
            "--directory",
            "${DIFY_MCP_SERVER_PATH}",
            "run",
            "dify_mcp_server"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "CONFIG_PATH": {
                    "type": "string",
                    "description": "Path to the config.yaml file",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "CONFIG_PATH": {
                "type": "env",
                "key": "CONFIG_PATH"
            }
        }
    },
    {
        "id": "easy-mcp",
        "name": "Easy MCP",
        "description": "The simplest way to create Model Context Protocol (MCP) servers in TypeScript.",
        "tags": [
            "mcp",
            "typescript",
            "server"
        ],
        "repo": "https://github.com/zcaceres/easy-mcp",
        "command": "npm",
        "baseArgs": [
            "install",
            "easy-mcp"
        ],
        "configurable": false
    },
    {
        "id": "fetch",
        "name": "Fetch MCP Server",
        "description": "This MCP server provides functionality to fetch web content in various formats, including HTML, JSON, plain text, and Markdown.",
        "tags": [
            "fetch",
            "web",
            "API"
        ],
        "repo": "https://github.com/zcaceres/fetch-mcp",
        "command": "node",
        "baseArgs": [
            "{ABSOLUTE PATH TO FILE HERE}/dist/index.js"
        ],
        "configurable": false,
        "argsMapping": {}
    },
    {
        "id": "gtasks",
        "name": "Google Tasks MCP Server",
        "description": "This MCP server integrates with Google Tasks to allow listing, reading, searching, creating, updating, and deleting tasks.",
        "tags": [
            "google",
            "tasks",
            "api"
        ],
        "repo": "https://github.com/zcaceres/gtasks-mcp",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-gtasks"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "taskListId": {
                    "type": "string",
                    "description": "Optional Task List ID",
                    "required": false
                },
                "title": {
                    "type": "string",
                    "description": "Task title",
                    "required": true
                },
                "notes": {
                    "type": "string",
                    "description": "Task notes",
                    "required": false
                },
                "due": {
                    "type": "string",
                    "description": "Due date",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "taskListId": {
                "type": "single",
                "position": 0
            },
            "title": {
                "type": "single",
                "position": 1
            },
            "notes": {
                "type": "single",
                "position": 2
            },
            "due": {
                "type": "single",
                "position": 3
            }
        }
    },
    {
        "id": "markdownify",
        "name": "Markdownify MCP Server",
        "description": "Markdownify is a Model Context Protocol (MCP) server that converts various file types and web content to Markdown format.",
        "tags": [
            "markdown",
            "conversion",
            "tools"
        ],
        "repo": "https://github.com/zcaceres/markdownify-mcp",
        "command": "node",
        "baseArgs": [
            "{ABSOLUTE PATH TO FILE HERE}/dist/index.js"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "UV_PATH": {
                    "type": "string",
                    "description": "Path to the 'uv' installation",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "UV_PATH": {
                "type": "env",
                "key": "UV_PATH"
            }
        }
    },
    {
        "id": "zed",
        "name": "Zed",
        "description": "A high-performance, multiplayer code editor from the creators of Atom and Tree-sitter.",
        "tags": [
            "editor",
            "multiplayer",
            "code"
        ],
        "repo": "https://github.com/zed-industries/zed",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-zed"
        ],
        "configurable": false
    },
    {
        "id": "mcp-datetime",
        "name": "mcp-datetime",
        "description": "A datetime formatting service implemented as an MCP server for the Claude Desktop Application. Supports generation of datetime strings in various formats.",
        "tags": [
            "datetime",
            "service"
        ],
        "repo": "https://github.com/ZeparHyfar/mcp-datetime",
        "command": "uvx",
        "baseArgs": [
            "mcp-datetime"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "The format for datetime generation",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "format": {
                "type": "single",
                "position": 0
            }
        }
    },
    {
        "id": "postgres",
        "name": "PostgreSQL",
        "description": "Read-only database access with schema inspection",
        "repo": "https://github.com/modelcontextprotocol/servers/tree/main/src/postgres",
        "tags": [
            "database",
            "postgresql",
            "sql"
        ],
        "command": "npx",
        "baseArgs": [
            "-y",
            "@modelcontextprotocol/server-postgres"
        ],
        "configurable": true,
        "configSchema": {
            "properties": {
                "connectionString": {
                    "type": "string",
                    "description": "PostgreSQL connection string",
                    "required": true
                }
            }
        },
        "argsMapping": {
            "connectionString": {
                "type": "single",
                "position": 2
            }
        }
    },
    {
        "id": "amazon-bedrock",
        "name": "Amazon Bedrock",
        "description": "A Model Control Protocol (MCP) server that integrates with Amazon Bedrock's Nova Canvas model for AI image generation.",
        "tags": [
            "amazon",
            "bedrock",
            "ai",
            "image-generation"
        ],
        "repo": "https://github.com/zxkane/mcp-server-amazon-bedrock",
        "command": "npx",
        "baseArgs": [
            "-y",
            "@zxkane/mcp-server-amazon-bedrock"
        ],
        "env": {
            "AWS_PROFILE": "your_profile_name",
            "AWS_ACCESS_KEY_ID": "your_access_key",
            "AWS_SECRET_ACCESS_KEY": "your_secret_key",
            "AWS_REGION": "us-east-1"
        },
        "configurable": true,
        "configSchema": {
            "properties": {
                "prompt": {
                    "type": "string",
                    "description": "Descriptive text for the desired image (1-1024 characters)",
                    "required": true
                },
                "negativePrompt": {
                    "type": "string",
                    "description": "Elements to exclude from the image (1-1024 characters)",
                    "required": false
                },
                "width": {
                    "type": "number",
                    "description": "Image width in pixels (default: 1024)",
                    "required": false
                },
                "height": {
                    "type": "number",
                    "description": "Image height in pixels (default: 1024)",
                    "required": false
                },
                "quality": {
                    "type": "string",
                    "description": "Image quality level - \"standard\" or \"premium\" (default: \"standard\")",
                    "required": false
                },
                "cfg_scale": {
                    "type": "number",
                    "description": "Prompt adherence strength (1.1-10, default: 6.5)",
                    "required": false
                },
                "seed": {
                    "type": "number",
                    "description": "Generation seed for reproducibility (0-858993459, default: 12)",
                    "required": false
                },
                "numberOfImages": {
                    "type": "number",
                    "description": "Batch size for generation (1-5, default: 1)",
                    "required": false
                }
            }
        },
        "argsMapping": {
            "prompt": {
                "type": "single",
                "position": 1
            },
            "negativePrompt": {
                "type": "single",
                "position": 2
            },
            "width": {
                "type": "single",
                "position": 3
            },
            "height": {
                "type": "single",
                "position": 4
            },
            "quality": {
                "type": "single",
                "position": 5
            },
            "cfg_scale": {
                "type": "single",
                "position": 6
            },
            "seed": {
                "type": "single",
                "position": 7
            },
            "numberOfImages": {
                "type": "single",
                "position": 8
            }
        }
    }
]